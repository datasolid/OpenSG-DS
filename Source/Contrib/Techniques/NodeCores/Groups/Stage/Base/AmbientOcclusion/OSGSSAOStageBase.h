/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SSAOStage
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGSSAOSTAGEBASE_H_
#define _OSGSSAOSTAGEBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGContribTechniquesDef.h"

//#include "OSGBaseTypes.h"

#include "OSGStage.h" // Parent

#include "OSGSysFields.h"               // Activate type
#include "OSGUniformBufferObjStd140ChunkFields.h" // OffsetKernelChunk type
#include "OSGTextureObjChunkFields.h"   // RotateKernelChunk type

#include "OSGSSAOStageFields.h"

OSG_BEGIN_NAMESPACE


class SSAOStage;

//! \brief SSAOStage Base Class.

class OSG_CONTRIBTECHNIQUES_DLLMAPPING SSAOStageBase : public Stage
{
  public:

    typedef Stage Inherited;
    typedef Stage ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(SSAOStage);

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        ActivateFieldId = Inherited::NextFieldId,
        CalcPosFromDepthFieldId = ActivateFieldId + 1,
        OffsetKernelSizeFieldId = CalcPosFromDepthFieldId + 1,
        RotateKernelSizeFieldId = OffsetKernelSizeFieldId + 1,
        RadiusFieldId = RotateKernelSizeFieldId + 1,
        BiasFieldId = RadiusFieldId + 1,
        BlurKernelSizeFieldId = BiasFieldId + 1,
        AmbientOcclusionTexUnitFieldId = BlurKernelSizeFieldId + 1,
        OffsetKernelChunkFieldId = AmbientOcclusionTexUnitFieldId + 1,
        RotateKernelChunkFieldId = OffsetKernelChunkFieldId + 1,
        NextFieldId = RotateKernelChunkFieldId + 1
    };

    static const OSG::BitVector ActivateFieldMask =
        (TypeTraits<BitVector>::One << ActivateFieldId);
    static const OSG::BitVector CalcPosFromDepthFieldMask =
        (TypeTraits<BitVector>::One << CalcPosFromDepthFieldId);
    static const OSG::BitVector OffsetKernelSizeFieldMask =
        (TypeTraits<BitVector>::One << OffsetKernelSizeFieldId);
    static const OSG::BitVector RotateKernelSizeFieldMask =
        (TypeTraits<BitVector>::One << RotateKernelSizeFieldId);
    static const OSG::BitVector RadiusFieldMask =
        (TypeTraits<BitVector>::One << RadiusFieldId);
    static const OSG::BitVector BiasFieldMask =
        (TypeTraits<BitVector>::One << BiasFieldId);
    static const OSG::BitVector BlurKernelSizeFieldMask =
        (TypeTraits<BitVector>::One << BlurKernelSizeFieldId);
    static const OSG::BitVector AmbientOcclusionTexUnitFieldMask =
        (TypeTraits<BitVector>::One << AmbientOcclusionTexUnitFieldId);
    static const OSG::BitVector OffsetKernelChunkFieldMask =
        (TypeTraits<BitVector>::One << OffsetKernelChunkFieldId);
    static const OSG::BitVector RotateKernelChunkFieldMask =
        (TypeTraits<BitVector>::One << RotateKernelChunkFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFBool            SFActivateType;
    typedef SFBool            SFCalcPosFromDepthType;
    typedef SFInt32           SFOffsetKernelSizeType;
    typedef SFInt32           SFRotateKernelSizeType;
    typedef SFReal32          SFRadiusType;
    typedef SFReal32          SFBiasType;
    typedef SFInt32           SFBlurKernelSizeType;
    typedef SFInt32           SFAmbientOcclusionTexUnitType;
    typedef SFUnrecUniformBufferObjStd140ChunkPtr SFOffsetKernelChunkType;
    typedef SFUnrecTextureObjChunkPtr SFRotateKernelChunkType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  SFBool              *editSFActivate       (void);
            const SFBool              *getSFActivate        (void) const;

                  SFBool              *editSFCalcPosFromDepth(void);
            const SFBool              *getSFCalcPosFromDepth (void) const;

                  SFInt32             *editSFOffsetKernelSize(void);
            const SFInt32             *getSFOffsetKernelSize (void) const;

                  SFInt32             *editSFRotateKernelSize(void);
            const SFInt32             *getSFRotateKernelSize (void) const;

                  SFReal32            *editSFRadius         (void);
            const SFReal32            *getSFRadius          (void) const;

                  SFReal32            *editSFBias           (void);
            const SFReal32            *getSFBias            (void) const;

                  SFInt32             *editSFBlurKernelSize (void);
            const SFInt32             *getSFBlurKernelSize  (void) const;

                  SFInt32             *editSFAmbientOcclusionTexUnit(void);
            const SFInt32             *getSFAmbientOcclusionTexUnit (void) const;


                  bool                &editActivate       (void);
                  bool                 getActivate        (void) const;

                  bool                &editCalcPosFromDepth(void);
                  bool                 getCalcPosFromDepth (void) const;

                  Int32               &editOffsetKernelSize(void);
                  Int32                getOffsetKernelSize (void) const;

                  Int32               &editRotateKernelSize(void);
                  Int32                getRotateKernelSize (void) const;

                  Real32              &editRadius         (void);
                  Real32               getRadius          (void) const;

                  Real32              &editBias           (void);
                  Real32               getBias            (void) const;

                  Int32               &editBlurKernelSize (void);
                  Int32                getBlurKernelSize  (void) const;

                  Int32               &editAmbientOcclusionTexUnit(void);
                  Int32                getAmbientOcclusionTexUnit (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setActivate       (const bool value);
            void setCalcPosFromDepth(const bool value);
            void setOffsetKernelSize(const Int32 value);
            void setRotateKernelSize(const Int32 value);
            void setRadius         (const Real32 value);
            void setBias           (const Real32 value);
            void setBlurKernelSize (const Int32 value);
            void setAmbientOcclusionTexUnit(const Int32 value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual SizeT  getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  SSAOStageTransitPtr  create          (void);
    static  SSAOStage           *createEmpty     (void);

    static  SSAOStageTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  SSAOStage            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  SSAOStageTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFBool            _sfActivate;
    SFBool            _sfCalcPosFromDepth;
    SFInt32           _sfOffsetKernelSize;
    SFInt32           _sfRotateKernelSize;
    SFReal32          _sfRadius;
    SFReal32          _sfBias;
    SFInt32           _sfBlurKernelSize;
    SFInt32           _sfAmbientOcclusionTexUnit;
    SFUnrecUniformBufferObjStd140ChunkPtr _sfOffsetKernelChunk;
    SFUnrecTextureObjChunkPtr _sfRotateKernelChunk;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    SSAOStageBase(void);
    SSAOStageBase(const SSAOStageBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~SSAOStageBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const SSAOStage *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

     GetFieldHandlePtr  getHandleActivate        (void) const;
     EditFieldHandlePtr editHandleActivate       (void);
     GetFieldHandlePtr  getHandleCalcPosFromDepth (void) const;
     EditFieldHandlePtr editHandleCalcPosFromDepth(void);
     GetFieldHandlePtr  getHandleOffsetKernelSize (void) const;
     EditFieldHandlePtr editHandleOffsetKernelSize(void);
     GetFieldHandlePtr  getHandleRotateKernelSize (void) const;
     EditFieldHandlePtr editHandleRotateKernelSize(void);
     GetFieldHandlePtr  getHandleRadius          (void) const;
     EditFieldHandlePtr editHandleRadius         (void);
     GetFieldHandlePtr  getHandleBias            (void) const;
     EditFieldHandlePtr editHandleBias           (void);
     GetFieldHandlePtr  getHandleBlurKernelSize  (void) const;
     EditFieldHandlePtr editHandleBlurKernelSize (void);
     GetFieldHandlePtr  getHandleAmbientOcclusionTexUnit (void) const;
     EditFieldHandlePtr editHandleAmbientOcclusionTexUnit(void);
     GetFieldHandlePtr  getHandleOffsetKernelChunk (void) const;
     EditFieldHandlePtr editHandleOffsetKernelChunk(void);
     GetFieldHandlePtr  getHandleRotateKernelChunk (void) const;
     EditFieldHandlePtr editHandleRotateKernelChunk(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

            const SFUnrecUniformBufferObjStd140ChunkPtr *getSFOffsetKernelChunk (void) const;
                  SFUnrecUniformBufferObjStd140ChunkPtr *editSFOffsetKernelChunk(void);
            const SFUnrecTextureObjChunkPtr *getSFRotateKernelChunk (void) const;
                  SFUnrecTextureObjChunkPtr *editSFRotateKernelChunk(void);


                  UniformBufferObjStd140Chunk * getOffsetKernelChunk(void) const;

                  TextureObjChunk * getRotateKernelChunk(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setOffsetKernelChunk(UniformBufferObjStd140Chunk * const value);
            void setRotateKernelChunk(TextureObjChunk * const value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      SSAOStageBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const SSAOStageBase &source);
};

typedef SSAOStageBase *SSAOStageBaseP;

typedef CoredNodeRefPtr  <SSAOStage> SSAOStageNodeRefPtr;
typedef CoredNodeMTRefPtr<SSAOStage> SSAOStageNodeMTRefPtr;

OSG_END_NAMESPACE

#endif /* _OSGSSAOSTAGEBASE_H_ */
