/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SSAOStageData
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGSSAOSTAGEDATABASE_H_
#define _OSGSSAOSTAGEDATABASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGContribTechniquesDef.h"

//#include "OSGBaseTypes.h"

#include "OSGStageData.h" // Parent

#include "OSGSysFields.h"               // Width type
#include "OSGMathFields.h"              // Projection type
#include "OSGFrameBufferObjectFields.h" // ScenePassRenderTarget type
#include "OSGSimpleSHLChunkFields.h"    // ScenePassShader type
#include "OSGChunkMaterialFields.h"     // ScenePassMaterial type
#include "OSGMaterialChunkFields.h"     // SharedMaterialChunk type

#include "OSGSSAOStageDataFields.h"

OSG_BEGIN_NAMESPACE


class SSAOStageData;

//! \brief SSAOStageData Base Class.

class OSG_CONTRIBTECHNIQUES_DLLMAPPING SSAOStageDataBase : public StageData
{
  public:

    typedef StageData Inherited;
    typedef StageData ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(SSAOStageData);

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        WidthFieldId = Inherited::NextFieldId,
        HeightFieldId = WidthFieldId + 1,
        CalcPosFromDepthFieldId = HeightFieldId + 1,
        ProjectionFieldId = CalcPosFromDepthFieldId + 1,
        ScenePassRenderTargetFieldId = ProjectionFieldId + 1,
        ScenePassShaderFieldId = ScenePassRenderTargetFieldId + 1,
        ScenePassMaterialFieldId = ScenePassShaderFieldId + 1,
        SSAOPassRenderTargetFieldId = ScenePassMaterialFieldId + 1,
        SSAOPassShaderFieldId = SSAOPassRenderTargetFieldId + 1,
        SSAOPassMaterialFieldId = SSAOPassShaderFieldId + 1,
        BlurPassRenderTargetFieldId = SSAOPassMaterialFieldId + 1,
        BlurPassShaderFieldId = BlurPassRenderTargetFieldId + 1,
        BlurPassMaterialFieldId = BlurPassShaderFieldId + 1,
        SharedMaterialChunkFieldId = BlurPassMaterialFieldId + 1,
        NextFieldId = SharedMaterialChunkFieldId + 1
    };

    static const OSG::BitVector WidthFieldMask =
        (TypeTraits<BitVector>::One << WidthFieldId);
    static const OSG::BitVector HeightFieldMask =
        (TypeTraits<BitVector>::One << HeightFieldId);
    static const OSG::BitVector CalcPosFromDepthFieldMask =
        (TypeTraits<BitVector>::One << CalcPosFromDepthFieldId);
    static const OSG::BitVector ProjectionFieldMask =
        (TypeTraits<BitVector>::One << ProjectionFieldId);
    static const OSG::BitVector ScenePassRenderTargetFieldMask =
        (TypeTraits<BitVector>::One << ScenePassRenderTargetFieldId);
    static const OSG::BitVector ScenePassShaderFieldMask =
        (TypeTraits<BitVector>::One << ScenePassShaderFieldId);
    static const OSG::BitVector ScenePassMaterialFieldMask =
        (TypeTraits<BitVector>::One << ScenePassMaterialFieldId);
    static const OSG::BitVector SSAOPassRenderTargetFieldMask =
        (TypeTraits<BitVector>::One << SSAOPassRenderTargetFieldId);
    static const OSG::BitVector SSAOPassShaderFieldMask =
        (TypeTraits<BitVector>::One << SSAOPassShaderFieldId);
    static const OSG::BitVector SSAOPassMaterialFieldMask =
        (TypeTraits<BitVector>::One << SSAOPassMaterialFieldId);
    static const OSG::BitVector BlurPassRenderTargetFieldMask =
        (TypeTraits<BitVector>::One << BlurPassRenderTargetFieldId);
    static const OSG::BitVector BlurPassShaderFieldMask =
        (TypeTraits<BitVector>::One << BlurPassShaderFieldId);
    static const OSG::BitVector BlurPassMaterialFieldMask =
        (TypeTraits<BitVector>::One << BlurPassMaterialFieldId);
    static const OSG::BitVector SharedMaterialChunkFieldMask =
        (TypeTraits<BitVector>::One << SharedMaterialChunkFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFUInt32          SFWidthType;
    typedef SFUInt32          SFHeightType;
    typedef SFBool            SFCalcPosFromDepthType;
    typedef SFMatrix          SFProjectionType;
    typedef SFUnrecFrameBufferObjectPtr SFScenePassRenderTargetType;
    typedef SFUnrecSimpleSHLChunkPtr SFScenePassShaderType;
    typedef SFUnrecChunkMaterialPtr SFScenePassMaterialType;
    typedef SFUnrecFrameBufferObjectPtr SFSSAOPassRenderTargetType;
    typedef SFUnrecSimpleSHLChunkPtr SFSSAOPassShaderType;
    typedef SFUnrecChunkMaterialPtr SFSSAOPassMaterialType;
    typedef SFUnrecFrameBufferObjectPtr SFBlurPassRenderTargetType;
    typedef SFUnrecSimpleSHLChunkPtr SFBlurPassShaderType;
    typedef SFUnrecChunkMaterialPtr SFBlurPassMaterialType;
    typedef SFUnrecMaterialChunkPtr SFSharedMaterialChunkType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  SFUInt32            *editSFWidth          (void);
            const SFUInt32            *getSFWidth           (void) const;

                  SFUInt32            *editSFHeight         (void);
            const SFUInt32            *getSFHeight          (void) const;

                  SFBool              *editSFCalcPosFromDepth(void);
            const SFBool              *getSFCalcPosFromDepth (void) const;

                  SFMatrix            *editSFProjection     (void);
            const SFMatrix            *getSFProjection      (void) const;
            const SFUnrecFrameBufferObjectPtr *getSFScenePassRenderTarget(void) const;
                  SFUnrecFrameBufferObjectPtr *editSFScenePassRenderTarget(void);
            const SFUnrecSimpleSHLChunkPtr *getSFScenePassShader(void) const;
                  SFUnrecSimpleSHLChunkPtr *editSFScenePassShader(void);
            const SFUnrecChunkMaterialPtr *getSFScenePassMaterial(void) const;
                  SFUnrecChunkMaterialPtr *editSFScenePassMaterial(void);
            const SFUnrecFrameBufferObjectPtr *getSFSSAOPassRenderTarget(void) const;
                  SFUnrecFrameBufferObjectPtr *editSFSSAOPassRenderTarget(void);
            const SFUnrecSimpleSHLChunkPtr *getSFSSAOPassShader (void) const;
                  SFUnrecSimpleSHLChunkPtr *editSFSSAOPassShader (void);
            const SFUnrecChunkMaterialPtr *getSFSSAOPassMaterial(void) const;
                  SFUnrecChunkMaterialPtr *editSFSSAOPassMaterial(void);
            const SFUnrecFrameBufferObjectPtr *getSFBlurPassRenderTarget(void) const;
                  SFUnrecFrameBufferObjectPtr *editSFBlurPassRenderTarget(void);
            const SFUnrecSimpleSHLChunkPtr *getSFBlurPassShader (void) const;
                  SFUnrecSimpleSHLChunkPtr *editSFBlurPassShader (void);
            const SFUnrecChunkMaterialPtr *getSFBlurPassMaterial(void) const;
                  SFUnrecChunkMaterialPtr *editSFBlurPassMaterial(void);
            const SFUnrecMaterialChunkPtr *getSFSharedMaterialChunk(void) const;
                  SFUnrecMaterialChunkPtr *editSFSharedMaterialChunk(void);


                  UInt32              &editWidth          (void);
                  UInt32               getWidth           (void) const;

                  UInt32              &editHeight         (void);
                  UInt32               getHeight          (void) const;

                  bool                &editCalcPosFromDepth(void);
                  bool                 getCalcPosFromDepth (void) const;

                  Matrix              &editProjection     (void);
            const Matrix              &getProjection      (void) const;

                  FrameBufferObject * getScenePassRenderTarget(void) const;

                  SimpleSHLChunk * getScenePassShader(void) const;

                  ChunkMaterial * getScenePassMaterial(void) const;

                  FrameBufferObject * getSSAOPassRenderTarget(void) const;

                  SimpleSHLChunk * getSSAOPassShader (void) const;

                  ChunkMaterial * getSSAOPassMaterial(void) const;

                  FrameBufferObject * getBlurPassRenderTarget(void) const;

                  SimpleSHLChunk * getBlurPassShader (void) const;

                  ChunkMaterial * getBlurPassMaterial(void) const;

                  MaterialChunk * getSharedMaterialChunk(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setWidth          (const UInt32 value);
            void setHeight         (const UInt32 value);
            void setCalcPosFromDepth(const bool value);
            void setProjection     (const Matrix &value);
            void setScenePassRenderTarget(FrameBufferObject * const value);
            void setScenePassShader(SimpleSHLChunk * const value);
            void setScenePassMaterial(ChunkMaterial * const value);
            void setSSAOPassRenderTarget(FrameBufferObject * const value);
            void setSSAOPassShader (SimpleSHLChunk * const value);
            void setSSAOPassMaterial(ChunkMaterial * const value);
            void setBlurPassRenderTarget(FrameBufferObject * const value);
            void setBlurPassShader (SimpleSHLChunk * const value);
            void setBlurPassMaterial(ChunkMaterial * const value);
            void setSharedMaterialChunk(MaterialChunk * const value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual SizeT  getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  SSAOStageDataTransitPtr  create          (void);
    static  SSAOStageData           *createEmpty     (void);

    static  SSAOStageDataTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  SSAOStageData            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  SSAOStageDataTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFUInt32          _sfWidth;
    SFUInt32          _sfHeight;
    SFBool            _sfCalcPosFromDepth;
    SFMatrix          _sfProjection;
    SFUnrecFrameBufferObjectPtr _sfScenePassRenderTarget;
    SFUnrecSimpleSHLChunkPtr _sfScenePassShader;
    SFUnrecChunkMaterialPtr _sfScenePassMaterial;
    SFUnrecFrameBufferObjectPtr _sfSSAOPassRenderTarget;
    SFUnrecSimpleSHLChunkPtr _sfSSAOPassShader;
    SFUnrecChunkMaterialPtr _sfSSAOPassMaterial;
    SFUnrecFrameBufferObjectPtr _sfBlurPassRenderTarget;
    SFUnrecSimpleSHLChunkPtr _sfBlurPassShader;
    SFUnrecChunkMaterialPtr _sfBlurPassMaterial;
    SFUnrecMaterialChunkPtr _sfSharedMaterialChunk;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    SSAOStageDataBase(void);
    SSAOStageDataBase(const SSAOStageDataBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~SSAOStageDataBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const SSAOStageData *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

     GetFieldHandlePtr  getHandleWidth           (void) const;
     EditFieldHandlePtr editHandleWidth          (void);
     GetFieldHandlePtr  getHandleHeight          (void) const;
     EditFieldHandlePtr editHandleHeight         (void);
     GetFieldHandlePtr  getHandleCalcPosFromDepth (void) const;
     EditFieldHandlePtr editHandleCalcPosFromDepth(void);
     GetFieldHandlePtr  getHandleProjection      (void) const;
     EditFieldHandlePtr editHandleProjection     (void);
     GetFieldHandlePtr  getHandleScenePassRenderTarget (void) const;
     EditFieldHandlePtr editHandleScenePassRenderTarget(void);
     GetFieldHandlePtr  getHandleScenePassShader (void) const;
     EditFieldHandlePtr editHandleScenePassShader(void);
     GetFieldHandlePtr  getHandleScenePassMaterial (void) const;
     EditFieldHandlePtr editHandleScenePassMaterial(void);
     GetFieldHandlePtr  getHandleSSAOPassRenderTarget (void) const;
     EditFieldHandlePtr editHandleSSAOPassRenderTarget(void);
     GetFieldHandlePtr  getHandleSSAOPassShader  (void) const;
     EditFieldHandlePtr editHandleSSAOPassShader (void);
     GetFieldHandlePtr  getHandleSSAOPassMaterial (void) const;
     EditFieldHandlePtr editHandleSSAOPassMaterial(void);
     GetFieldHandlePtr  getHandleBlurPassRenderTarget (void) const;
     EditFieldHandlePtr editHandleBlurPassRenderTarget(void);
     GetFieldHandlePtr  getHandleBlurPassShader  (void) const;
     EditFieldHandlePtr editHandleBlurPassShader (void);
     GetFieldHandlePtr  getHandleBlurPassMaterial (void) const;
     EditFieldHandlePtr editHandleBlurPassMaterial(void);
     GetFieldHandlePtr  getHandleSharedMaterialChunk (void) const;
     EditFieldHandlePtr editHandleSharedMaterialChunk(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      SSAOStageDataBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const SSAOStageDataBase &source);
};

typedef SSAOStageDataBase *SSAOStageDataBaseP;

OSG_END_NAMESPACE

#endif /* _OSGSSAOSTAGEDATABASE_H_ */
