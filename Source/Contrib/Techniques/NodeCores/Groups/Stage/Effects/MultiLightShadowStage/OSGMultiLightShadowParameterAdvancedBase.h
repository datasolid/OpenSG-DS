/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class MultiLightShadowParameterAdvanced
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGMULTILIGHTSHADOWPARAMETERADVANCEDBASE_H_
#define _OSGMULTILIGHTSHADOWPARAMETERADVANCEDBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGContribTechniquesDef.h"

//#include "OSGBaseTypes.h"

#include "OSGMultiLightShadowParameter.h" // Parent

#include "OSGSysFields.h"               // NumberOfSplits type

#include "OSGMultiLightShadowParameterAdvancedFields.h"

OSG_BEGIN_NAMESPACE


class MultiLightShadowParameterAdvanced;

//! \brief MultiLightShadowParameterAdvanced Base Class.

class OSG_CONTRIBTECHNIQUES_DLLMAPPING MultiLightShadowParameterAdvancedBase : public MultiLightShadowParameter
{
  public:

    typedef MultiLightShadowParameter Inherited;
    typedef MultiLightShadowParameter ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(MultiLightShadowParameterAdvanced);

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        NumberOfSplitsFieldId = Inherited::NextFieldId,
        UseLiSPFieldId = NumberOfSplitsFieldId + 1,
        UseGeometryShaderFieldId = UseLiSPFieldId + 1,
        LiSPModeFieldId = UseGeometryShaderFieldId + 1,
        FocusingFieldId = LiSPModeFieldId + 1,
        ReduceSwimmingFieldId = FocusingFieldId + 1,
        LightSpaceAlignmentFieldId = ReduceSwimmingFieldId + 1,
        UseMinDepthFieldId = LightSpaceAlignmentFieldId + 1,
        UseBestResSelectionFieldId = UseMinDepthFieldId + 1,
        WarpingParameterFieldId = UseBestResSelectionFieldId + 1,
        SplitParamterLambdaFieldId = WarpingParameterFieldId + 1,
        ZNearFieldId = SplitParamterLambdaFieldId + 1,
        PseudoNearFieldId = ZNearFieldId + 1,
        PseudoFarFieldId = PseudoNearFieldId + 1,
        NextFieldId = PseudoFarFieldId + 1
    };

    static const OSG::BitVector NumberOfSplitsFieldMask =
        (TypeTraits<BitVector>::One << NumberOfSplitsFieldId);
    static const OSG::BitVector UseLiSPFieldMask =
        (TypeTraits<BitVector>::One << UseLiSPFieldId);
    static const OSG::BitVector UseGeometryShaderFieldMask =
        (TypeTraits<BitVector>::One << UseGeometryShaderFieldId);
    static const OSG::BitVector LiSPModeFieldMask =
        (TypeTraits<BitVector>::One << LiSPModeFieldId);
    static const OSG::BitVector FocusingFieldMask =
        (TypeTraits<BitVector>::One << FocusingFieldId);
    static const OSG::BitVector ReduceSwimmingFieldMask =
        (TypeTraits<BitVector>::One << ReduceSwimmingFieldId);
    static const OSG::BitVector LightSpaceAlignmentFieldMask =
        (TypeTraits<BitVector>::One << LightSpaceAlignmentFieldId);
    static const OSG::BitVector UseMinDepthFieldMask =
        (TypeTraits<BitVector>::One << UseMinDepthFieldId);
    static const OSG::BitVector UseBestResSelectionFieldMask =
        (TypeTraits<BitVector>::One << UseBestResSelectionFieldId);
    static const OSG::BitVector WarpingParameterFieldMask =
        (TypeTraits<BitVector>::One << WarpingParameterFieldId);
    static const OSG::BitVector SplitParamterLambdaFieldMask =
        (TypeTraits<BitVector>::One << SplitParamterLambdaFieldId);
    static const OSG::BitVector ZNearFieldMask =
        (TypeTraits<BitVector>::One << ZNearFieldId);
    static const OSG::BitVector PseudoNearFieldMask =
        (TypeTraits<BitVector>::One << PseudoNearFieldId);
    static const OSG::BitVector PseudoFarFieldMask =
        (TypeTraits<BitVector>::One << PseudoFarFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFInt32           SFNumberOfSplitsType;
    typedef SFBool            SFUseLiSPType;
    typedef SFBool            SFUseGeometryShaderType;
    typedef SFInt32           SFLiSPModeType;
    typedef SFBool            SFFocusingType;
    typedef SFBool            SFReduceSwimmingType;
    typedef SFBool            SFLightSpaceAlignmentType;
    typedef SFBool            SFUseMinDepthType;
    typedef SFBool            SFUseBestResSelectionType;
    typedef SFReal32          SFWarpingParameterType;
    typedef SFReal32          SFSplitParamterLambdaType;
    typedef SFReal32          SFZNearType;
    typedef SFReal32          SFPseudoNearType;
    typedef SFReal32          SFPseudoFarType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  SFInt32             *editSFNumberOfSplits (void);
            const SFInt32             *getSFNumberOfSplits  (void) const;

                  SFBool              *editSFUseLiSP        (void);
            const SFBool              *getSFUseLiSP         (void) const;

                  SFBool              *editSFUseGeometryShader(void);
            const SFBool              *getSFUseGeometryShader (void) const;

                  SFInt32             *editSFLiSPMode       (void);
            const SFInt32             *getSFLiSPMode        (void) const;

                  SFBool              *editSFFocusing       (void);
            const SFBool              *getSFFocusing        (void) const;

                  SFBool              *editSFReduceSwimming (void);
            const SFBool              *getSFReduceSwimming  (void) const;

                  SFBool              *editSFLightSpaceAlignment(void);
            const SFBool              *getSFLightSpaceAlignment (void) const;

                  SFBool              *editSFUseMinDepth    (void);
            const SFBool              *getSFUseMinDepth     (void) const;

                  SFBool              *editSFUseBestResSelection(void);
            const SFBool              *getSFUseBestResSelection (void) const;

                  SFReal32            *editSFWarpingParameter(void);
            const SFReal32            *getSFWarpingParameter (void) const;

                  SFReal32            *editSFSplitParamterLambda(void);
            const SFReal32            *getSFSplitParamterLambda (void) const;

                  SFReal32            *editSFZNear          (void);
            const SFReal32            *getSFZNear           (void) const;

                  SFReal32            *editSFPseudoNear     (void);
            const SFReal32            *getSFPseudoNear      (void) const;

                  SFReal32            *editSFPseudoFar      (void);
            const SFReal32            *getSFPseudoFar       (void) const;


                  Int32               &editNumberOfSplits (void);
                  Int32                getNumberOfSplits  (void) const;

                  bool                &editUseLiSP        (void);
                  bool                 getUseLiSP         (void) const;

                  bool                &editUseGeometryShader(void);
                  bool                 getUseGeometryShader (void) const;

                  Int32               &editLiSPMode       (void);
                  Int32                getLiSPMode        (void) const;

                  bool                &editFocusing       (void);
                  bool                 getFocusing        (void) const;

                  bool                &editReduceSwimming (void);
                  bool                 getReduceSwimming  (void) const;

                  bool                &editLightSpaceAlignment(void);
                  bool                 getLightSpaceAlignment (void) const;

                  bool                &editUseMinDepth    (void);
                  bool                 getUseMinDepth     (void) const;

                  bool                &editUseBestResSelection(void);
                  bool                 getUseBestResSelection (void) const;

                  Real32              &editWarpingParameter(void);
                  Real32               getWarpingParameter (void) const;

                  Real32              &editSplitParamterLambda(void);
                  Real32               getSplitParamterLambda (void) const;

                  Real32              &editZNear          (void);
                  Real32               getZNear           (void) const;

                  Real32              &editPseudoNear     (void);
                  Real32               getPseudoNear      (void) const;

                  Real32              &editPseudoFar      (void);
                  Real32               getPseudoFar       (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setNumberOfSplits (const Int32 value);
            void setUseLiSP        (const bool value);
            void setUseGeometryShader(const bool value);
            void setLiSPMode       (const Int32 value);
            void setFocusing       (const bool value);
            void setReduceSwimming (const bool value);
            void setLightSpaceAlignment(const bool value);
            void setUseMinDepth    (const bool value);
            void setUseBestResSelection(const bool value);
            void setWarpingParameter(const Real32 value);
            void setSplitParamterLambda(const Real32 value);
            void setZNear          (const Real32 value);
            void setPseudoNear     (const Real32 value);
            void setPseudoFar      (const Real32 value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual SizeT  getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  MultiLightShadowParameterAdvancedTransitPtr  create          (void);
    static  MultiLightShadowParameterAdvanced           *createEmpty     (void);

    static  MultiLightShadowParameterAdvancedTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  MultiLightShadowParameterAdvanced            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  MultiLightShadowParameterAdvancedTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFInt32           _sfNumberOfSplits;
    SFBool            _sfUseLiSP;
    SFBool            _sfUseGeometryShader;
    SFInt32           _sfLiSPMode;
    SFBool            _sfFocusing;
    SFBool            _sfReduceSwimming;
    SFBool            _sfLightSpaceAlignment;
    SFBool            _sfUseMinDepth;
    SFBool            _sfUseBestResSelection;
    SFReal32          _sfWarpingParameter;
    SFReal32          _sfSplitParamterLambda;
    SFReal32          _sfZNear;
    SFReal32          _sfPseudoNear;
    SFReal32          _sfPseudoFar;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    MultiLightShadowParameterAdvancedBase(void);
    MultiLightShadowParameterAdvancedBase(const MultiLightShadowParameterAdvancedBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~MultiLightShadowParameterAdvancedBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

     GetFieldHandlePtr  getHandleNumberOfSplits  (void) const;
     EditFieldHandlePtr editHandleNumberOfSplits (void);
     GetFieldHandlePtr  getHandleUseLiSP         (void) const;
     EditFieldHandlePtr editHandleUseLiSP        (void);
     GetFieldHandlePtr  getHandleUseGeometryShader (void) const;
     EditFieldHandlePtr editHandleUseGeometryShader(void);
     GetFieldHandlePtr  getHandleLiSPMode        (void) const;
     EditFieldHandlePtr editHandleLiSPMode       (void);
     GetFieldHandlePtr  getHandleFocusing        (void) const;
     EditFieldHandlePtr editHandleFocusing       (void);
     GetFieldHandlePtr  getHandleReduceSwimming  (void) const;
     EditFieldHandlePtr editHandleReduceSwimming (void);
     GetFieldHandlePtr  getHandleLightSpaceAlignment (void) const;
     EditFieldHandlePtr editHandleLightSpaceAlignment(void);
     GetFieldHandlePtr  getHandleUseMinDepth     (void) const;
     EditFieldHandlePtr editHandleUseMinDepth    (void);
     GetFieldHandlePtr  getHandleUseBestResSelection (void) const;
     EditFieldHandlePtr editHandleUseBestResSelection(void);
     GetFieldHandlePtr  getHandleWarpingParameter (void) const;
     EditFieldHandlePtr editHandleWarpingParameter(void);
     GetFieldHandlePtr  getHandleSplitParamterLambda (void) const;
     EditFieldHandlePtr editHandleSplitParamterLambda(void);
     GetFieldHandlePtr  getHandleZNear           (void) const;
     EditFieldHandlePtr editHandleZNear          (void);
     GetFieldHandlePtr  getHandlePseudoNear      (void) const;
     EditFieldHandlePtr editHandlePseudoNear     (void);
     GetFieldHandlePtr  getHandlePseudoFar       (void) const;
     EditFieldHandlePtr editHandlePseudoFar      (void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      MultiLightShadowParameterAdvancedBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const MultiLightShadowParameterAdvancedBase &source);
};

typedef MultiLightShadowParameterAdvancedBase *MultiLightShadowParameterAdvancedBaseP;

OSG_END_NAMESPACE

#endif /* _OSGMULTILIGHTSHADOWPARAMETERADVANCEDBASE_H_ */
