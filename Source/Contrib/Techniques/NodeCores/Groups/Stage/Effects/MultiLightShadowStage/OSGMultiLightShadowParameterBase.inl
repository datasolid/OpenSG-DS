/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class MultiLightShadowParameter!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE



//! access the type of the class
inline
OSG::FieldContainerType &MultiLightShadowParameterBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 MultiLightShadowParameterBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 MultiLightShadowParameterBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/

//! Get the value of the MultiLightShadowParameter::_sfIntensity field.

inline
Real32 &MultiLightShadowParameterBase::editIntensity(void)
{
    editSField(IntensityFieldMask);

    return _sfIntensity.getValue();
}

//! Get the value of the MultiLightShadowParameter::_sfIntensity field.
inline
      Real32  MultiLightShadowParameterBase::getIntensity(void) const
{
    return _sfIntensity.getValue();
}

//! Set the value of the MultiLightShadowParameter::_sfIntensity field.
inline
void MultiLightShadowParameterBase::setIntensity(const Real32 value)
{
    editSField(IntensityFieldMask);

    _sfIntensity.setValue(value);
}
//! Get the value of the MultiLightShadowParameter::_sfBias field.

inline
Real32 &MultiLightShadowParameterBase::editBias(void)
{
    editSField(BiasFieldMask);

    return _sfBias.getValue();
}

//! Get the value of the MultiLightShadowParameter::_sfBias field.
inline
      Real32  MultiLightShadowParameterBase::getBias(void) const
{
    return _sfBias.getValue();
}

//! Set the value of the MultiLightShadowParameter::_sfBias field.
inline
void MultiLightShadowParameterBase::setBias(const Real32 value)
{
    editSField(BiasFieldMask);

    _sfBias.setValue(value);
}
//! Get the value of the MultiLightShadowParameter::_sfFilterMode field.

inline
Int32 &MultiLightShadowParameterBase::editFilterMode(void)
{
    editSField(FilterModeFieldMask);

    return _sfFilterMode.getValue();
}

//! Get the value of the MultiLightShadowParameter::_sfFilterMode field.
inline
      Int32  MultiLightShadowParameterBase::getFilterMode(void) const
{
    return _sfFilterMode.getValue();
}

//! Set the value of the MultiLightShadowParameter::_sfFilterMode field.
inline
void MultiLightShadowParameterBase::setFilterMode(const Int32 value)
{
    editSField(FilterModeFieldMask);

    _sfFilterMode.setValue(value);
}
//! Get the value of the MultiLightShadowParameter::_sfFilterRadius field.

inline
Real32 &MultiLightShadowParameterBase::editFilterRadius(void)
{
    editSField(FilterRadiusFieldMask);

    return _sfFilterRadius.getValue();
}

//! Get the value of the MultiLightShadowParameter::_sfFilterRadius field.
inline
      Real32  MultiLightShadowParameterBase::getFilterRadius(void) const
{
    return _sfFilterRadius.getValue();
}

//! Set the value of the MultiLightShadowParameter::_sfFilterRadius field.
inline
void MultiLightShadowParameterBase::setFilterRadius(const Real32 value)
{
    editSField(FilterRadiusFieldMask);

    _sfFilterRadius.setValue(value);
}
//! Get the value of the MultiLightShadowParameter::_sfRandomRotateFilter field.

inline
bool &MultiLightShadowParameterBase::editRandomRotateFilter(void)
{
    editSField(RandomRotateFilterFieldMask);

    return _sfRandomRotateFilter.getValue();
}

//! Get the value of the MultiLightShadowParameter::_sfRandomRotateFilter field.
inline
      bool  MultiLightShadowParameterBase::getRandomRotateFilter(void) const
{
    return _sfRandomRotateFilter.getValue();
}

//! Set the value of the MultiLightShadowParameter::_sfRandomRotateFilter field.
inline
void MultiLightShadowParameterBase::setRandomRotateFilter(const bool value)
{
    editSField(RandomRotateFilterFieldMask);

    _sfRandomRotateFilter.setValue(value);
}
//! Get the value of the MultiLightShadowParameter::_sfUseBlockerSearch field.

inline
bool &MultiLightShadowParameterBase::editUseBlockerSearch(void)
{
    editSField(UseBlockerSearchFieldMask);

    return _sfUseBlockerSearch.getValue();
}

//! Get the value of the MultiLightShadowParameter::_sfUseBlockerSearch field.
inline
      bool  MultiLightShadowParameterBase::getUseBlockerSearch(void) const
{
    return _sfUseBlockerSearch.getValue();
}

//! Set the value of the MultiLightShadowParameter::_sfUseBlockerSearch field.
inline
void MultiLightShadowParameterBase::setUseBlockerSearch(const bool value)
{
    editSField(UseBlockerSearchFieldMask);

    _sfUseBlockerSearch.setValue(value);
}
//! Get the value of the MultiLightShadowParameter::_sfUsePCSS field.

inline
bool &MultiLightShadowParameterBase::editUsePCSS(void)
{
    editSField(UsePCSSFieldMask);

    return _sfUsePCSS.getValue();
}

//! Get the value of the MultiLightShadowParameter::_sfUsePCSS field.
inline
      bool  MultiLightShadowParameterBase::getUsePCSS(void) const
{
    return _sfUsePCSS.getValue();
}

//! Set the value of the MultiLightShadowParameter::_sfUsePCSS field.
inline
void MultiLightShadowParameterBase::setUsePCSS(const bool value)
{
    editSField(UsePCSSFieldMask);

    _sfUsePCSS.setValue(value);
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void MultiLightShadowParameterBase::execSync (      MultiLightShadowParameterBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (IntensityFieldMask & whichField))
        _sfIntensity.syncWith(pFrom->_sfIntensity);

    if(FieldBits::NoField != (BiasFieldMask & whichField))
        _sfBias.syncWith(pFrom->_sfBias);

    if(FieldBits::NoField != (FilterModeFieldMask & whichField))
        _sfFilterMode.syncWith(pFrom->_sfFilterMode);

    if(FieldBits::NoField != (FilterRadiusFieldMask & whichField))
        _sfFilterRadius.syncWith(pFrom->_sfFilterRadius);

    if(FieldBits::NoField != (RandomRotateFilterFieldMask & whichField))
        _sfRandomRotateFilter.syncWith(pFrom->_sfRandomRotateFilter);

    if(FieldBits::NoField != (UseBlockerSearchFieldMask & whichField))
        _sfUseBlockerSearch.syncWith(pFrom->_sfUseBlockerSearch);

    if(FieldBits::NoField != (UsePCSSFieldMask & whichField))
        _sfUsePCSS.syncWith(pFrom->_sfUsePCSS);
}
#endif


inline
const Char8 *MultiLightShadowParameterBase::getClassname(void)
{
    return "MultiLightShadowParameter";
}
OSG_GEN_CONTAINERPTR(MultiLightShadowParameter);

OSG_END_NAMESPACE

