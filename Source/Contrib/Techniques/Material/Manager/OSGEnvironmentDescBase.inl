/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class EnvironmentDesc!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE



//! access the type of the class
inline
OSG::FieldContainerType &EnvironmentDescBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 EnvironmentDescBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 EnvironmentDescBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/

//! Get the value of the EnvironmentDesc::_sfFeature field.

inline
UInt32 &EnvironmentDescBase::editFeature(void)
{
    editSField(FeatureFieldMask);

    return _sfFeature.getValue();
}

//! Get the value of the EnvironmentDesc::_sfFeature field.
inline
      UInt32  EnvironmentDescBase::getFeature(void) const
{
    return _sfFeature.getValue();
}

//! Set the value of the EnvironmentDesc::_sfFeature field.
inline
void EnvironmentDescBase::setFeature(const UInt32 value)
{
    editSField(FeatureFieldMask);

    _sfFeature.setValue(value);
}
//! Get the value of the EnvironmentDesc::_sfApplyGamma field.

inline
bool &EnvironmentDescBase::editApplyGamma(void)
{
    editSField(ApplyGammaFieldMask);

    return _sfApplyGamma.getValue();
}

//! Get the value of the EnvironmentDesc::_sfApplyGamma field.
inline
      bool  EnvironmentDescBase::getApplyGamma(void) const
{
    return _sfApplyGamma.getValue();
}

//! Set the value of the EnvironmentDesc::_sfApplyGamma field.
inline
void EnvironmentDescBase::setApplyGamma(const bool value)
{
    editSField(ApplyGammaFieldMask);

    _sfApplyGamma.setValue(value);
}
//! Get the value of the EnvironmentDesc::_sfAccurateGamma field.

inline
bool &EnvironmentDescBase::editAccurateGamma(void)
{
    editSField(AccurateGammaFieldMask);

    return _sfAccurateGamma.getValue();
}

//! Get the value of the EnvironmentDesc::_sfAccurateGamma field.
inline
      bool  EnvironmentDescBase::getAccurateGamma(void) const
{
    return _sfAccurateGamma.getValue();
}

//! Set the value of the EnvironmentDesc::_sfAccurateGamma field.
inline
void EnvironmentDescBase::setAccurateGamma(const bool value)
{
    editSField(AccurateGammaFieldMask);

    _sfAccurateGamma.setValue(value);
}
//! Get the value of the EnvironmentDesc::_sfToneMappingMode field.

inline
UInt32 &EnvironmentDescBase::editToneMappingMode(void)
{
    editSField(ToneMappingModeFieldMask);

    return _sfToneMappingMode.getValue();
}

//! Get the value of the EnvironmentDesc::_sfToneMappingMode field.
inline
      UInt32  EnvironmentDescBase::getToneMappingMode(void) const
{
    return _sfToneMappingMode.getValue();
}

//! Set the value of the EnvironmentDesc::_sfToneMappingMode field.
inline
void EnvironmentDescBase::setToneMappingMode(const UInt32 value)
{
    editSField(ToneMappingModeFieldMask);

    _sfToneMappingMode.setValue(value);
}
//! Get the value of the EnvironmentDesc::_sfAutoExposureMode field.

inline
UInt32 &EnvironmentDescBase::editAutoExposureMode(void)
{
    editSField(AutoExposureModeFieldMask);

    return _sfAutoExposureMode.getValue();
}

//! Get the value of the EnvironmentDesc::_sfAutoExposureMode field.
inline
      UInt32  EnvironmentDescBase::getAutoExposureMode(void) const
{
    return _sfAutoExposureMode.getValue();
}

//! Set the value of the EnvironmentDesc::_sfAutoExposureMode field.
inline
void EnvironmentDescBase::setAutoExposureMode(const UInt32 value)
{
    editSField(AutoExposureModeFieldMask);

    _sfAutoExposureMode.setValue(value);
}
//! Get the value of the EnvironmentDesc::_sfUse_ITU_R_BT_709 field.

inline
bool &EnvironmentDescBase::editUse_ITU_R_BT_709(void)
{
    editSField(Use_ITU_R_BT_709FieldMask);

    return _sfUse_ITU_R_BT_709.getValue();
}

//! Get the value of the EnvironmentDesc::_sfUse_ITU_R_BT_709 field.
inline
      bool  EnvironmentDescBase::getUse_ITU_R_BT_709(void) const
{
    return _sfUse_ITU_R_BT_709.getValue();
}

//! Set the value of the EnvironmentDesc::_sfUse_ITU_R_BT_709 field.
inline
void EnvironmentDescBase::setUse_ITU_R_BT_709(const bool value)
{
    editSField(Use_ITU_R_BT_709FieldMask);

    _sfUse_ITU_R_BT_709.setValue(value);
}
//! Get the value of the EnvironmentDesc::_sfUseLinChromCorrection field.

inline
bool &EnvironmentDescBase::editUseLinChromCorrection(void)
{
    editSField(UseLinChromCorrectionFieldMask);

    return _sfUseLinChromCorrection.getValue();
}

//! Get the value of the EnvironmentDesc::_sfUseLinChromCorrection field.
inline
      bool  EnvironmentDescBase::getUseLinChromCorrection(void) const
{
    return _sfUseLinChromCorrection.getValue();
}

//! Set the value of the EnvironmentDesc::_sfUseLinChromCorrection field.
inline
void EnvironmentDescBase::setUseLinChromCorrection(const bool value)
{
    editSField(UseLinChromCorrectionFieldMask);

    _sfUseLinChromCorrection.setValue(value);
}
//! Get the value of the EnvironmentDesc::_sfExposure field.

inline
Real32 &EnvironmentDescBase::editExposure(void)
{
    editSField(ExposureFieldMask);

    return _sfExposure.getValue();
}

//! Get the value of the EnvironmentDesc::_sfExposure field.
inline
      Real32  EnvironmentDescBase::getExposure(void) const
{
    return _sfExposure.getValue();
}

//! Set the value of the EnvironmentDesc::_sfExposure field.
inline
void EnvironmentDescBase::setExposure(const Real32 value)
{
    editSField(ExposureFieldMask);

    _sfExposure.setValue(value);
}
//! Get the value of the EnvironmentDesc::_sfKeyValue field.

inline
Real32 &EnvironmentDescBase::editKeyValue(void)
{
    editSField(KeyValueFieldMask);

    return _sfKeyValue.getValue();
}

//! Get the value of the EnvironmentDesc::_sfKeyValue field.
inline
      Real32  EnvironmentDescBase::getKeyValue(void) const
{
    return _sfKeyValue.getValue();
}

//! Set the value of the EnvironmentDesc::_sfKeyValue field.
inline
void EnvironmentDescBase::setKeyValue(const Real32 value)
{
    editSField(KeyValueFieldMask);

    _sfKeyValue.setValue(value);
}
//! Get the value of the EnvironmentDesc::_sfApertureFNumber field.

inline
Real32 &EnvironmentDescBase::editApertureFNumber(void)
{
    editSField(ApertureFNumberFieldMask);

    return _sfApertureFNumber.getValue();
}

//! Get the value of the EnvironmentDesc::_sfApertureFNumber field.
inline
      Real32  EnvironmentDescBase::getApertureFNumber(void) const
{
    return _sfApertureFNumber.getValue();
}

//! Set the value of the EnvironmentDesc::_sfApertureFNumber field.
inline
void EnvironmentDescBase::setApertureFNumber(const Real32 value)
{
    editSField(ApertureFNumberFieldMask);

    _sfApertureFNumber.setValue(value);
}
//! Get the value of the EnvironmentDesc::_sfShutterSpeed field.

inline
Real32 &EnvironmentDescBase::editShutterSpeed(void)
{
    editSField(ShutterSpeedFieldMask);

    return _sfShutterSpeed.getValue();
}

//! Get the value of the EnvironmentDesc::_sfShutterSpeed field.
inline
      Real32  EnvironmentDescBase::getShutterSpeed(void) const
{
    return _sfShutterSpeed.getValue();
}

//! Set the value of the EnvironmentDesc::_sfShutterSpeed field.
inline
void EnvironmentDescBase::setShutterSpeed(const Real32 value)
{
    editSField(ShutterSpeedFieldMask);

    _sfShutterSpeed.setValue(value);
}
//! Get the value of the EnvironmentDesc::_sfISO field.

inline
Real32 &EnvironmentDescBase::editISO(void)
{
    editSField(ISOFieldMask);

    return _sfISO.getValue();
}

//! Get the value of the EnvironmentDesc::_sfISO field.
inline
      Real32  EnvironmentDescBase::getISO(void) const
{
    return _sfISO.getValue();
}

//! Set the value of the EnvironmentDesc::_sfISO field.
inline
void EnvironmentDescBase::setISO(const Real32 value)
{
    editSField(ISOFieldMask);

    _sfISO.setValue(value);
}
//! Get the value of the EnvironmentDesc::_sfWhiteLevel field.

inline
Real32 &EnvironmentDescBase::editWhiteLevel(void)
{
    editSField(WhiteLevelFieldMask);

    return _sfWhiteLevel.getValue();
}

//! Get the value of the EnvironmentDesc::_sfWhiteLevel field.
inline
      Real32  EnvironmentDescBase::getWhiteLevel(void) const
{
    return _sfWhiteLevel.getValue();
}

//! Set the value of the EnvironmentDesc::_sfWhiteLevel field.
inline
void EnvironmentDescBase::setWhiteLevel(const Real32 value)
{
    editSField(WhiteLevelFieldMask);

    _sfWhiteLevel.setValue(value);
}
//! Get the value of the EnvironmentDesc::_sfDragoBias field.

inline
Real32 &EnvironmentDescBase::editDragoBias(void)
{
    editSField(DragoBiasFieldMask);

    return _sfDragoBias.getValue();
}

//! Get the value of the EnvironmentDesc::_sfDragoBias field.
inline
      Real32  EnvironmentDescBase::getDragoBias(void) const
{
    return _sfDragoBias.getValue();
}

//! Set the value of the EnvironmentDesc::_sfDragoBias field.
inline
void EnvironmentDescBase::setDragoBias(const Real32 value)
{
    editSField(DragoBiasFieldMask);

    _sfDragoBias.setValue(value);
}
//! Get the value of the EnvironmentDesc::_sfSaturation field.

inline
Real32 &EnvironmentDescBase::editSaturation(void)
{
    editSField(SaturationFieldMask);

    return _sfSaturation.getValue();
}

//! Get the value of the EnvironmentDesc::_sfSaturation field.
inline
      Real32  EnvironmentDescBase::getSaturation(void) const
{
    return _sfSaturation.getValue();
}

//! Set the value of the EnvironmentDesc::_sfSaturation field.
inline
void EnvironmentDescBase::setSaturation(const Real32 value)
{
    editSField(SaturationFieldMask);

    _sfSaturation.setValue(value);
}
//! Get the value of the EnvironmentDesc::_sfContrast field.

inline
Real32 &EnvironmentDescBase::editContrast(void)
{
    editSField(ContrastFieldMask);

    return _sfContrast.getValue();
}

//! Get the value of the EnvironmentDesc::_sfContrast field.
inline
      Real32  EnvironmentDescBase::getContrast(void) const
{
    return _sfContrast.getValue();
}

//! Set the value of the EnvironmentDesc::_sfContrast field.
inline
void EnvironmentDescBase::setContrast(const Real32 value)
{
    editSField(ContrastFieldMask);

    _sfContrast.setValue(value);
}
//! Get the value of the EnvironmentDesc::_sfGamma field.

inline
Real32 &EnvironmentDescBase::editGamma(void)
{
    editSField(GammaFieldMask);

    return _sfGamma.getValue();
}

//! Get the value of the EnvironmentDesc::_sfGamma field.
inline
      Real32  EnvironmentDescBase::getGamma(void) const
{
    return _sfGamma.getValue();
}

//! Set the value of the EnvironmentDesc::_sfGamma field.
inline
void EnvironmentDescBase::setGamma(const Real32 value)
{
    editSField(GammaFieldMask);

    _sfGamma.setValue(value);
}
//! Get the value of the EnvironmentDesc::_sfFilterColor field.

inline
Color3f &EnvironmentDescBase::editFilterColor(void)
{
    editSField(FilterColorFieldMask);

    return _sfFilterColor.getValue();
}

//! Get the value of the EnvironmentDesc::_sfFilterColor field.
inline
const Color3f &EnvironmentDescBase::getFilterColor(void) const
{
    return _sfFilterColor.getValue();
}

//! Set the value of the EnvironmentDesc::_sfFilterColor field.
inline
void EnvironmentDescBase::setFilterColor(const Color3f &value)
{
    editSField(FilterColorFieldMask);

    _sfFilterColor.setValue(value);
}
//! Get the value of the EnvironmentDesc::_sfGlobalAmbientIntensity field.

inline
Vec3f &EnvironmentDescBase::editGlobalAmbientIntensity(void)
{
    editSField(GlobalAmbientIntensityFieldMask);

    return _sfGlobalAmbientIntensity.getValue();
}

//! Get the value of the EnvironmentDesc::_sfGlobalAmbientIntensity field.
inline
const Vec3f &EnvironmentDescBase::getGlobalAmbientIntensity(void) const
{
    return _sfGlobalAmbientIntensity.getValue();
}

//! Set the value of the EnvironmentDesc::_sfGlobalAmbientIntensity field.
inline
void EnvironmentDescBase::setGlobalAmbientIntensity(const Vec3f &value)
{
    editSField(GlobalAmbientIntensityFieldMask);

    _sfGlobalAmbientIntensity.setValue(value);
}

//! Get the value of the \a index element the EnvironmentDesc::_mfClipPlanes field.
inline
const Vec4f &EnvironmentDescBase::getClipPlanes(const UInt32 index) const
{
    return _mfClipPlanes[index];
}

inline
MFVec4f            ::reference EnvironmentDescBase::editClipPlanes(const UInt32 index)
{
    editMField(ClipPlanesFieldMask, _mfClipPlanes);

    return _mfClipPlanes[index];
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void EnvironmentDescBase::execSync (      EnvironmentDescBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (FeatureFieldMask & whichField))
        _sfFeature.syncWith(pFrom->_sfFeature);

    if(FieldBits::NoField != (ClipPlanesFieldMask & whichField))
        _mfClipPlanes.syncWith(pFrom->_mfClipPlanes,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (ApplyGammaFieldMask & whichField))
        _sfApplyGamma.syncWith(pFrom->_sfApplyGamma);

    if(FieldBits::NoField != (AccurateGammaFieldMask & whichField))
        _sfAccurateGamma.syncWith(pFrom->_sfAccurateGamma);

    if(FieldBits::NoField != (ToneMappingModeFieldMask & whichField))
        _sfToneMappingMode.syncWith(pFrom->_sfToneMappingMode);

    if(FieldBits::NoField != (AutoExposureModeFieldMask & whichField))
        _sfAutoExposureMode.syncWith(pFrom->_sfAutoExposureMode);

    if(FieldBits::NoField != (Use_ITU_R_BT_709FieldMask & whichField))
        _sfUse_ITU_R_BT_709.syncWith(pFrom->_sfUse_ITU_R_BT_709);

    if(FieldBits::NoField != (UseLinChromCorrectionFieldMask & whichField))
        _sfUseLinChromCorrection.syncWith(pFrom->_sfUseLinChromCorrection);

    if(FieldBits::NoField != (ExposureFieldMask & whichField))
        _sfExposure.syncWith(pFrom->_sfExposure);

    if(FieldBits::NoField != (KeyValueFieldMask & whichField))
        _sfKeyValue.syncWith(pFrom->_sfKeyValue);

    if(FieldBits::NoField != (ApertureFNumberFieldMask & whichField))
        _sfApertureFNumber.syncWith(pFrom->_sfApertureFNumber);

    if(FieldBits::NoField != (ShutterSpeedFieldMask & whichField))
        _sfShutterSpeed.syncWith(pFrom->_sfShutterSpeed);

    if(FieldBits::NoField != (ISOFieldMask & whichField))
        _sfISO.syncWith(pFrom->_sfISO);

    if(FieldBits::NoField != (WhiteLevelFieldMask & whichField))
        _sfWhiteLevel.syncWith(pFrom->_sfWhiteLevel);

    if(FieldBits::NoField != (DragoBiasFieldMask & whichField))
        _sfDragoBias.syncWith(pFrom->_sfDragoBias);

    if(FieldBits::NoField != (SaturationFieldMask & whichField))
        _sfSaturation.syncWith(pFrom->_sfSaturation);

    if(FieldBits::NoField != (ContrastFieldMask & whichField))
        _sfContrast.syncWith(pFrom->_sfContrast);

    if(FieldBits::NoField != (GammaFieldMask & whichField))
        _sfGamma.syncWith(pFrom->_sfGamma);

    if(FieldBits::NoField != (FilterColorFieldMask & whichField))
        _sfFilterColor.syncWith(pFrom->_sfFilterColor);

    if(FieldBits::NoField != (GlobalAmbientIntensityFieldMask & whichField))
        _sfGlobalAmbientIntensity.syncWith(pFrom->_sfGlobalAmbientIntensity);
}
#endif


inline
const Char8 *EnvironmentDescBase::getClassname(void)
{
    return "EnvironmentDesc";
}
OSG_GEN_CONTAINERPTR(EnvironmentDesc);

OSG_END_NAMESPACE

