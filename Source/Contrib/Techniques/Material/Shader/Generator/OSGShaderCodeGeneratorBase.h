/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ShaderCodeGenerator
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGSHADERCODEGENERATORBASE_H_
#define _OSGSHADERCODEGENERATORBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGContribTechniquesDef.h"

//#include "OSGBaseTypes.h"

#include "OSGFieldContainer.h" // Parent

#include "OSGCapabilitiesDescFields.h"  // CapabilitiesDesc type
#include "OSGHDR2StageFields.h"         // HDR2Stage type
#include "OSGClusterShadingStageFields.h" // ClusterShadingStage type
#include "OSGMultiLightShadowStageFields.h" // MultiLightShadowStage type
#include "OSGSSAOStageFields.h"         // SSAOStage type
#include "OSGMultiLightGroupFields.h"   // MultiLightGroup type
#include "OSGSysFields.h"               // LightBindingPnt type

#include "OSGShaderCodeGeneratorFields.h"

OSG_BEGIN_NAMESPACE


class ShaderCodeGenerator;

//! \brief ShaderCodeGenerator Base Class.

class OSG_CONTRIBTECHNIQUES_DLLMAPPING ShaderCodeGeneratorBase : public FieldContainer
{
  public:

    typedef FieldContainer Inherited;
    typedef FieldContainer ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(ShaderCodeGenerator);

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        CapabilitiesDescFieldId = Inherited::NextFieldId,
        HDR2StageFieldId = CapabilitiesDescFieldId + 1,
        ClusterShadingStageFieldId = HDR2StageFieldId + 1,
        MultiLightShadowStageFieldId = ClusterShadingStageFieldId + 1,
        SSAOStageFieldId = MultiLightShadowStageFieldId + 1,
        MultiLightGroupFieldId = SSAOStageFieldId + 1,
        LightBindingPntFieldId = MultiLightGroupFieldId + 1,
        HasClipPlanesFieldId = LightBindingPntFieldId + 1,
        NextFieldId = HasClipPlanesFieldId + 1
    };

    static const OSG::BitVector CapabilitiesDescFieldMask =
        (TypeTraits<BitVector>::One << CapabilitiesDescFieldId);
    static const OSG::BitVector HDR2StageFieldMask =
        (TypeTraits<BitVector>::One << HDR2StageFieldId);
    static const OSG::BitVector ClusterShadingStageFieldMask =
        (TypeTraits<BitVector>::One << ClusterShadingStageFieldId);
    static const OSG::BitVector MultiLightShadowStageFieldMask =
        (TypeTraits<BitVector>::One << MultiLightShadowStageFieldId);
    static const OSG::BitVector SSAOStageFieldMask =
        (TypeTraits<BitVector>::One << SSAOStageFieldId);
    static const OSG::BitVector MultiLightGroupFieldMask =
        (TypeTraits<BitVector>::One << MultiLightGroupFieldId);
    static const OSG::BitVector LightBindingPntFieldMask =
        (TypeTraits<BitVector>::One << LightBindingPntFieldId);
    static const OSG::BitVector HasClipPlanesFieldMask =
        (TypeTraits<BitVector>::One << HasClipPlanesFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFUnrecCapabilitiesDescPtr SFCapabilitiesDescType;
    typedef SFUnrecHDR2StagePtr SFHDR2StageType;
    typedef SFUnrecClusterShadingStagePtr SFClusterShadingStageType;
    typedef SFUnrecMultiLightShadowStagePtr SFMultiLightShadowStageType;
    typedef SFUnrecSSAOStagePtr SFSSAOStageType;
    typedef SFUnrecMultiLightGroupPtr SFMultiLightGroupType;
    typedef SFUInt32          SFLightBindingPntType;
    typedef SFBool            SFHasClipPlanesType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

            const SFUnrecCapabilitiesDescPtr *getSFCapabilitiesDesc(void) const;
                  SFUnrecCapabilitiesDescPtr *editSFCapabilitiesDesc(void);
            const SFUnrecHDR2StagePtr *getSFHDR2Stage      (void) const;
                  SFUnrecHDR2StagePtr *editSFHDR2Stage      (void);
            const SFUnrecClusterShadingStagePtr *getSFClusterShadingStage(void) const;
                  SFUnrecClusterShadingStagePtr *editSFClusterShadingStage(void);
            const SFUnrecMultiLightShadowStagePtr *getSFMultiLightShadowStage(void) const;
                  SFUnrecMultiLightShadowStagePtr *editSFMultiLightShadowStage(void);
            const SFUnrecSSAOStagePtr *getSFSSAOStage      (void) const;
                  SFUnrecSSAOStagePtr *editSFSSAOStage      (void);
            const SFUnrecMultiLightGroupPtr *getSFMultiLightGroup(void) const;
                  SFUnrecMultiLightGroupPtr *editSFMultiLightGroup(void);

                  SFUInt32            *editSFLightBindingPnt(void);
            const SFUInt32            *getSFLightBindingPnt (void) const;

                  SFBool              *editSFHasClipPlanes  (void);
            const SFBool              *getSFHasClipPlanes   (void) const;


                  CapabilitiesDesc * getCapabilitiesDesc(void) const;

                  HDR2Stage * getHDR2Stage      (void) const;

                  ClusterShadingStage * getClusterShadingStage(void) const;

                  MultiLightShadowStage * getMultiLightShadowStage(void) const;

                  SSAOStage * getSSAOStage      (void) const;

                  MultiLightGroup * getMultiLightGroup(void) const;

                  UInt32              &editLightBindingPnt(void);
                  UInt32               getLightBindingPnt (void) const;

                  bool                &editHasClipPlanes  (void);
                  bool                 getHasClipPlanes   (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setCapabilitiesDesc(CapabilitiesDesc * const value);
            void setHDR2Stage      (HDR2Stage * const value);
            void setClusterShadingStage(ClusterShadingStage * const value);
            void setMultiLightShadowStage(MultiLightShadowStage * const value);
            void setSSAOStage      (SSAOStage * const value);
            void setMultiLightGroup(MultiLightGroup * const value);
            void setLightBindingPnt(const UInt32 value);
            void setHasClipPlanes  (const bool value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual SizeT  getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFUnrecCapabilitiesDescPtr _sfCapabilitiesDesc;
    SFUnrecHDR2StagePtr _sfHDR2Stage;
    SFUnrecClusterShadingStagePtr _sfClusterShadingStage;
    SFUnrecMultiLightShadowStagePtr _sfMultiLightShadowStage;
    SFUnrecSSAOStagePtr _sfSSAOStage;
    SFUnrecMultiLightGroupPtr _sfMultiLightGroup;
    SFUInt32          _sfLightBindingPnt;
    SFBool            _sfHasClipPlanes;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    ShaderCodeGeneratorBase(void);
    ShaderCodeGeneratorBase(const ShaderCodeGeneratorBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~ShaderCodeGeneratorBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const ShaderCodeGenerator *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

     GetFieldHandlePtr  getHandleCapabilitiesDesc (void) const;
     EditFieldHandlePtr editHandleCapabilitiesDesc(void);
     GetFieldHandlePtr  getHandleHDR2Stage       (void) const;
     EditFieldHandlePtr editHandleHDR2Stage      (void);
     GetFieldHandlePtr  getHandleClusterShadingStage (void) const;
     EditFieldHandlePtr editHandleClusterShadingStage(void);
     GetFieldHandlePtr  getHandleMultiLightShadowStage (void) const;
     EditFieldHandlePtr editHandleMultiLightShadowStage(void);
     GetFieldHandlePtr  getHandleSSAOStage       (void) const;
     EditFieldHandlePtr editHandleSSAOStage      (void);
     GetFieldHandlePtr  getHandleMultiLightGroup (void) const;
     EditFieldHandlePtr editHandleMultiLightGroup(void);
     GetFieldHandlePtr  getHandleLightBindingPnt (void) const;
     EditFieldHandlePtr editHandleLightBindingPnt(void);
     GetFieldHandlePtr  getHandleHasClipPlanes   (void) const;
     EditFieldHandlePtr editHandleHasClipPlanes  (void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      ShaderCodeGeneratorBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const ShaderCodeGeneratorBase &source);
};

typedef ShaderCodeGeneratorBase *ShaderCodeGeneratorBaseP;

OSG_END_NAMESPACE

#endif /* _OSGSHADERCODEGENERATORBASE_H_ */
