/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *             Copyright (C) 2000-2003 by the OpenSG Forum                   *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

// System declarations
#include <algorithm>

#include "OSGPoissonDistribution.h"

#include "OSGMatrix.h"

//
// All Poisson distribution values found in this file were generated with the
// help of the PoissonDiskGenerator in the following manner:
//
//      #include "OSGPoissonDiskGenerator.h"
//
//      PoissonDiskGenerator<OSG::Real32> generator(time(0));
//      generator.setMaxIterations(100);        // try hard
//      generator.setSizeFactor(2.f);           // values from -1.f to 1.f
//      generator.setUseCircle(true);           // for disk and sphere
//      std::vector<OSG::Pnt2f> disk;           // results
//      std::vector<OSG::Pnt3f> sphere;
//      std::vector<int> Ns;
//      Ns.push_back(9);
//      Ns.push_back(16);
//      Ns.push_back(25);
//      Ns.push_back(32);
//      Ns.push_back(64);
//      Ns.push_back(100);
//      Ns.push_back(128);
//      Ns.push_back(256);
//      for (int i = 0; i < Ns.size(); ++i)
//      {
//          generator.clear();
//          disk = generator.getDisk(Ns[i]);
//      }
//      for (int i = 0; i < Ns.size(); ++i)
//      {
//          generator.clear();
//          sphere = generator.getSphere(Ns[i]);
//      }
//
//      generator.setUseCircle(false);
//      std::vector<OSG::Pnt2f> quad;           // results
//      std::vector<OSG::Pnt3f> box;
//
//      for (int i = 0; i < Ns.size(); ++i)
//      {
//          generator.clear();
//          quad = generator.getDisk(Ns[i]);
//      }
//      for (int i = 0; i < Ns.size(); ++i)
//      {
//          generator.clear();
//          box = generator.getSphere(Ns[i]);
//      }
//

OSG_BEGIN_NAMESPACE

namespace Shader {

OSG_SYSTEM_DLLMAPPING std::string getPoissonDiskSnippet(std::vector<Int16>& sizes)
{
    using namespace std;

    std::sort(sizes.begin(), sizes.end());
    sizes.erase(
        std::unique(sizes.begin(), 
                    sizes.end()), 
        sizes.end());

    stringstream ost;

    std::vector<Int16>::const_iterator iter = sizes.begin();
    std::vector<Int16>::const_iterator end  = sizes.end();

    for (; iter != end; ++iter)
    {
        switch (*iter)
        {
            case  9:
            {
                ost     << "const int  OSGPoissonKernel9Size = 9;"
                << endl << "const vec2 OSGPoissonKernel9[OSGPoissonKernel9Size] = vec2[]"
                << endl << "("
                << endl << "    vec2( 0.5856745, 0.6626827),"
                << endl << "    vec2( 0.9782205,-0.0110201),"
                << endl << "    vec2( 0.1352401, 0.2216032),"
                << endl << "    vec2(-0.2561858,-0.4427317),"
                << endl << "    vec2(-0.2337459, 0.8528743),"
                << endl << "    vec2(-0.6073725, 0.1131358),"
                << endl << "    vec2( 0.5192298,-0.2921064),"
                << endl << "    vec2(-0.8545103,-0.4572518),"
                << endl << "    vec2( 0.0733981,-0.9472286)"
                << endl << ");"
                << endl << ""
                ;
            }
            break;
            case 16:
            {
                ost     << "const int  OSGPoissonKernel16Size = 16;"
                << endl << "const vec2 OSGPoissonKernel16[OSGPoissonKernel16Size] = vec2[]"
                << endl << "("
                << endl << "    vec2(-0.5537201,-0.7204525),"
                << endl << "    vec2( 0.2253020,-0.7393359),"
                << endl << "    vec2( 0.8522859,-0.3376682),"
                << endl << "    vec2(-0.5658886,-0.1063365),"
                << endl << "    vec2( 0.3000245,-0.2786088),"
                << endl << "    vec2(-0.1231781,-0.1792133),"
                << endl << "    vec2( 0.2689788, 0.4212370),"
                << endl << "    vec2(-0.9100587,-0.4102688),"
                << endl << "    vec2(-0.1641327,-0.9659021),"
                << endl << "    vec2(-0.9649884, 0.1653993),"
                << endl << "    vec2(-0.3803298, 0.3354410),"
                << endl << "    vec2( 0.6371646, 0.0988400),"
                << endl << "    vec2( 0.4142494, 0.9059868),"
                << endl << "    vec2(-0.4818619, 0.8360126),"
                << endl << "    vec2( 0.7607553, 0.6241947),"
                << endl << "    vec2(-0.0501305, 0.7609186)"
                << endl << ");"
                << endl << ""
                ;
            }
            break;
            case 25:
            {
                ost     << "const int  OSGPoissonKernel25Size = 25;"
                << endl << "const vec2 OSGPoissonKernel25[OSGPoissonKernel25Size] = vec2[]"
                << endl << "("
                << endl << "    vec2(-0.8128385, 0.0190134),"
                << endl << "    vec2(-0.6245845,-0.2730294),"
                << endl << "    vec2(-0.9051442, 0.3558149),"
                << endl << "    vec2(-0.4894872, 0.0261891),"
                << endl << "    vec2(-0.4242690, 0.6351391),"
                << endl << "    vec2(-0.9281102,-0.3592809),"
                << endl << "    vec2( 0.0994301, 0.4971559),"
                << endl << "    vec2(-0.5647935,-0.7697409),"
                << endl << "    vec2(-0.2155677,-0.2039018),"
                << endl << "    vec2(-0.3432781,-0.5263912),"
                << endl << "    vec2(-0.2849647, 0.3048477),"
                << endl << "    vec2( 0.0982834,-0.5857462),"
                << endl << "    vec2( 0.1836078, 0.1467776),"
                << endl << "    vec2(-0.1895790,-0.9047863),"
                << endl << "    vec2( 0.6020226,-0.7168623),"
                << endl << "    vec2( 0.7208881, 0.1064829),"
                << endl << "    vec2( 0.8871855,-0.3539439),"
                << endl << "    vec2(-0.1173731, 0.7822462),"
                << endl << "    vec2( 0.3258387,-0.3626084),"
                << endl << "    vec2( 0.6044956,-0.2136807),"
                << endl << "    vec2( 0.2988238,-0.8936564),"
                << endl << "    vec2( 0.9328820, 0.3492278),"
                << endl << "    vec2( 0.4446226, 0.3824062),"
                << endl << "    vec2( 0.4515171, 0.7146864),"
                << endl << "    vec2( 0.2104273, 0.9385742)"
                << endl << ");"
                << endl << ""
                ;
            }
            break;
            case 32:
            {
                ost     << "const int  OSGPoissonKernel32Size = 32;"
                << endl << "const vec2 OSGPoissonKernel32[OSGPoissonKernel32Size] = vec2[]"
                << endl << "("
                << endl << "    vec2(-0.1233718,-0.0760604),"
                << endl << "    vec2(-0.1485880, 0.4550762),"
                << endl << "    vec2( 0.1343074, 0.1644976),"
                << endl << "    vec2( 0.2803440, 0.4457366),"
                << endl << "    vec2( 0.4911748,-0.0037385),"
                << endl << "    vec2( 0.8672607,-0.3697065),"
                << endl << "    vec2( 0.0870118, 0.6760999),"
                << endl << "    vec2(-0.3391240, 0.7752155),"
                << endl << "    vec2( 0.7866176, 0.5053647),"
                << endl << "    vec2( 0.8957045,-0.0326846),"
                << endl << "    vec2( 0.1777456, 0.9628344),"
                << endl << "    vec2(-0.3829228, 0.2268766),"
                << endl << "    vec2(-0.6881316, 0.6567527),"
                << endl << "    vec2(-0.8722556, 0.3340226),"
                << endl << "    vec2( 0.4446204, 0.7488220),"
                << endl << "    vec2( 0.5520806, 0.3089725),"
                << endl << "    vec2( 0.9156921, 0.2589695),"
                << endl << "    vec2( 0.4782519,-0.3550036),"
                << endl << "    vec2( 0.2081639,-0.4762477),"
                << endl << "    vec2( 0.2200260,-0.1891373),"
                << endl << "    vec2(-0.9619211,-0.1829884),"
                << endl << "    vec2(-0.1299604, 0.9883857),"
                << endl << "    vec2(-0.1600019,-0.3994551),"
                << endl << "    vec2( 0.7168827,-0.6566594),"
                << endl << "    vec2( 0.4249492,-0.6628892),"
                << endl << "    vec2(-0.6507450,-0.1082346),"
                << endl << "    vec2( 0.3158960,-0.9215328),"
                << endl << "    vec2(-0.4324769, 0.5124969),"
                << endl << "    vec2(-0.5202396,-0.6931750),"
                << endl << "    vec2(-0.1415857,-0.8461879),"
                << endl << "    vec2(-0.7439865,-0.4420812),"
                << endl << "    vec2(-0.4464570,-0.3152097)"
                << endl << ");"
                << endl << ""
                ;
            }
            break;
            case 64:
            {
                ost     << "const int  OSGPoissonKernel64Size = 64;"
                << endl << "const vec2 OSGPoissonKernel64[OSGPoissonKernel64Size] = vec2[]"
                << endl << "("
                << endl << "    vec2(-0.3255016, 0.9388465),"
                << endl << "    vec2(-0.3398367, 0.5664982),"
                << endl << "    vec2(-0.0360128, 0.8275380),"
                << endl << "    vec2(-0.4868964, 0.4274127),"
                << endl << "    vec2(-0.5816338, 0.7856910),"
                << endl << "    vec2(-0.6581377, 0.5307279),"
                << endl << "    vec2( 0.1618174, 0.7142949),"
                << endl << "    vec2( 0.3725057, 0.7546169),"
                << endl << "    vec2( 0.6783590, 0.7001967),"
                << endl << "    vec2(-0.0275619, 0.5589527),"
                << endl << "    vec2( 0.0089591, 0.2818522),"
                << endl << "    vec2(-0.2622792, 0.3503826),"
                << endl << "    vec2(-0.5432284, 0.2229125),"
                << endl << "    vec2(-0.7882840, 0.3204186),"
                << endl << "    vec2( 0.4697374, 0.4142215),"
                << endl << "    vec2(-0.0628464,-0.0756901),"
                << endl << "    vec2(-0.2430724, 0.1328177),"
                << endl << "    vec2( 0.3356494, 0.1066933),"
                << endl << "    vec2(-0.1975849, 0.7218834),"
                << endl << "    vec2( 0.1739452, 0.4204996),"
                << endl << "    vec2( 0.2122829, 0.9594055),"
                << endl << "    vec2(-0.0398384,-0.3871368),"
                << endl << "    vec2( 0.8488919, 0.4028556),"
                << endl << "    vec2(-0.5489367,-0.0846282),"
                << endl << "    vec2( 0.5341847, 0.1828818),"
                << endl << "    vec2(-0.3166471,-0.1739604),"
                << endl << "    vec2(-0.7450054,-0.0892212),"
                << endl << "    vec2( 0.0799813,-0.7287418),"
                << endl << "    vec2( 0.7430627, 0.0267377),"
                << endl << "    vec2( 0.3039000,-0.1683287),"
                << endl << "    vec2(-0.8362801,-0.3766779),"
                << endl << "    vec2( 0.1455743,-0.2808273),"
                << endl << "    vec2( 0.1718353,-0.4880974),"
                << endl << "    vec2( 0.6664871, 0.3381162),"
                << endl << "    vec2(-0.5272653,-0.4276148),"
                << endl << "    vec2(-0.9493377, 0.1513424),"
                << endl << "    vec2(-0.8521829, 0.5151993),"
                << endl << "    vec2( 0.1209967, 0.0002915),"
                << endl << "    vec2(-0.2933905,-0.4503433),"
                << endl << "    vec2(-0.4034941,-0.6279461),"
                << endl << "    vec2( 0.4094346,-0.4502383),"
                << endl << "    vec2( 0.7939084,-0.2195404),"
                << endl << "    vec2( 0.3120862, 0.5645704),"
                << endl << "    vec2(-0.9977674,-0.0645626),"
                << endl << "    vec2(-0.7606370, 0.1186333),"
                << endl << "    vec2( 0.4744296,-0.2627314),"
                << endl << "    vec2( 0.9613329, 0.1802706),"
                << endl << "    vec2(-0.1032084,-0.5731086),"
                << endl << "    vec2(-0.1310065,-0.8516991),"
                << endl << "    vec2( 0.9483961,-0.0778806),"
                << endl << "    vec2( 0.5649692,-0.0748296),"
                << endl << "    vec2( 0.7522465,-0.5127447),"
                << endl << "    vec2( 0.3159249,-0.6256344),"
                << endl << "    vec2(-0.3506594,-0.8244902),"
                << endl << "    vec2(-0.4275004, 0.0712700),"
                << endl << "    vec2( 0.2387210,-0.8808631),"
                << endl << "    vec2( 0.0379202,-0.9693972),"
                << endl << "    vec2( 0.8981071,-0.3793197),"
                << endl << "    vec2( 0.5822343,-0.7525322),"
                << endl << "    vec2( 0.4341342,-0.8811681),"
                << endl << "    vec2(-0.7446748,-0.5910950),"
                << endl << "    vec2(-0.6233911,-0.7428396),"
                << endl << "    vec2( 0.6443700,-0.3511960),"
                << endl << "    vec2(-0.6283710,-0.2610060)"
                << endl << ");"
                << endl << ""
                ;
            }
            break;
            case 100:
            {
                ost     << "const int  OSGPoissonKernel100Size = 100;"
                << endl << "const vec2 OSGPoissonKernel100[OSGPoissonKernel100Size] = vec2[]"
                << endl << "("
                << endl << "    vec2(-0.4249593, 0.1265825),"
                << endl << "    vec2(-0.3975613,-0.0631523),"
                << endl << "    vec2(-0.2106478, 0.0227078),"
                << endl << "    vec2(-0.5679302, 0.2297134),"
                << endl << "    vec2(-0.6461394,-0.1832678),"
                << endl << "    vec2(-0.3818946, 0.3738894),"
                << endl << "    vec2(-0.4128714,-0.3010148),"
                << endl << "    vec2(-0.3281339, 0.5257638),"
                << endl << "    vec2(-0.5197292, 0.5568894),"
                << endl << "    vec2(-0.2314163, 0.3639393),"
                << endl << "    vec2(-0.6388845, 0.0645306),"
                << endl << "    vec2(-0.0453742, 0.0436698),"
                << endl << "    vec2(-0.0372658, 0.4482222),"
                << endl << "    vec2(-0.8079908,-0.1159261),"
                << endl << "    vec2( 0.1649063, 0.5871502),"
                << endl << "    vec2(-0.1460860,-0.1289014),"
                << endl << "    vec2(-0.9272219, 0.0690085),"
                << endl << "    vec2(-0.2744038, 0.2011783),"
                << endl << "    vec2(-0.5336983, 0.3881326),"
                << endl << "    vec2(-0.7550069, 0.2100410),"
                << endl << "    vec2( 0.0972722,-0.2774833),"
                << endl << "    vec2(-0.7505497, 0.5671571),"
                << endl << "    vec2( 0.0940166,-0.0883316),"
                << endl << "    vec2(-0.9602946, 0.2707007),"
                << endl << "    vec2(-0.0582492, 0.2053640),"
                << endl << "    vec2(-0.9503192,-0.1906677),"
                << endl << "    vec2(-0.2780855,-0.2195318),"
                << endl << "    vec2(-0.7851517,-0.3085149),"
                << endl << "    vec2(-0.7410043, 0.3613971),"
                << endl << "    vec2(-0.0830660,-0.3616878),"
                << endl << "    vec2(-0.5890944, 0.7637706),"
                << endl << "    vec2( 0.0547104, 0.3032167),"
                << endl << "    vec2(-0.1173095, 0.5938561),"
                << endl << "    vec2( 0.2153113, 0.0013063),"
                << endl << "    vec2(-0.2930324, 0.7853358),"
                << endl << "    vec2(-0.4356353, 0.8287870),"
                << endl << "    vec2(-0.2099428, 0.9477583),"
                << endl << "    vec2(-0.5861238,-0.4347652),"
                << endl << "    vec2(-0.5495973,-0.0636752),"
                << endl << "    vec2( 0.2208997, 0.7656574),"
                << endl << "    vec2( 0.3100981,-0.2134551),"
                << endl << "    vec2( 0.0891551, 0.1128361),"
                << endl << "    vec2( 0.0550007,-0.5189380),"
                << endl << "    vec2(-0.8795874, 0.4436061),"
                << endl << "    vec2( 0.3477604, 0.6032573),"
                << endl << "    vec2(-0.1453420,-0.5806811),"
                << endl << "    vec2( 0.2143342, 0.2708611),"
                << endl << "    vec2( 0.3299360, 0.1573807),"
                << endl << "    vec2(-0.1618754,-0.8526429),"
                << endl << "    vec2(-0.4081240, 0.6777102),"
                << endl << "    vec2( 0.5874143, 0.0830709),"
                << endl << "    vec2( 0.2788768, 0.4690994),"
                << endl << "    vec2(-0.0030232, 0.7439678),"
                << endl << "    vec2( 0.4151734, 0.2888650),"
                << endl << "    vec2( 0.4382063,-0.1180393),"
                << endl << "    vec2(-0.4065752,-0.8332210),"
                << endl << "    vec2( 0.1777811,-0.4204908),"
                << endl << "    vec2( 0.4390087, 0.8694390),"
                << endl << "    vec2(-0.8304414,-0.5348642),"
                << endl << "    vec2( 0.4442910,-0.4091573),"
                << endl << "    vec2( 0.5269107, 0.7136331),"
                << endl << "    vec2(-0.9187867,-0.3845811),"
                << endl << "    vec2( 0.4675055, 0.4286852),"
                << endl << "    vec2( 0.1980968, 0.9283324),"
                << endl << "    vec2(-0.0605315,-0.9791890),"
                << endl << "    vec2( 0.1298392, 0.4364119),"
                << endl << "    vec2( 0.0159093,-0.7904001),"
                << endl << "    vec2( 0.1751958,-0.8346355),"
                << endl << "    vec2(-0.3898844,-0.4908124),"
                << endl << "    vec2( 0.2714298,-0.6536949),"
                << endl << "    vec2( 0.6428027, 0.4228548),"
                << endl << "    vec2( 0.6084919, 0.2349324),"
                << endl << "    vec2( 0.1293144,-0.9779825),"
                << endl << "    vec2( 0.3945383,-0.7751359),"
                << endl << "    vec2( 0.5714439,-0.6472839),"
                << endl << "    vec2( 0.5768528,-0.8051900),"
                << endl << "    vec2(-0.2418083,-0.7244869),"
                << endl << "    vec2( 0.7594124,-0.5998687),"
                << endl << "    vec2( 0.3093452,-0.9392706),"
                << endl << "    vec2( 0.5448980, 0.5639963),"
                << endl << "    vec2( 0.4192492,-0.5972158),"
                << endl << "    vec2( 0.8458008,-0.3344938),"
                << endl << "    vec2(-0.2334328,-0.3910202),"
                << endl << "    vec2(-0.6847335,-0.6163261),"
                << endl << "    vec2( 0.6769977,-0.1069798),"
                << endl << "    vec2( 0.6511338,-0.4261963),"
                << endl << "    vec2(-0.4338316,-0.6580555),"
                << endl << "    vec2(-0.0100227, 0.9195217),"
                << endl << "    vec2(-0.5735832,-0.7299238),"
                << endl << "    vec2( 0.8487434, 0.1238062),"
                << endl << "    vec2( 0.6433299,-0.2644231),"
                << endl << "    vec2( 0.8398460,-0.0424625),"
                << endl << "    vec2(-0.2801820,-0.9570199),"
                << endl << "    vec2( 0.7109237, 0.6166135),"
                << endl << "    vec2( 0.9840028,-0.1332766),"
                << endl << "    vec2( 0.8186411, 0.4848934),"
                << endl << "    vec2( 0.9838127, 0.0367379),"
                << endl << "    vec2( 0.9675119, 0.2309351),"
                << endl << "    vec2( 0.8204639, 0.3092834),"
                << endl << "    vec2( 0.8634174,-0.4882675)"
                << endl << ");"
                << endl << ""
                ;
            }
            break;
            case 128:
            {
                ost     << "const int  OSGPoissonKernel128Size = 128;"
                << endl << "const vec2 OSGPoissonKernel128[OSGPoissonKernel128Size] = vec2[]"
                << endl << "("
                << endl << "    vec2( 0.6185910,-0.4255581),"
                << endl << "    vec2( 0.4786723,-0.4391382),"
                << endl << "    vec2( 0.6235275,-0.6576239),"
                << endl << "    vec2( 0.3959055,-0.5989475),"
                << endl << "    vec2( 0.2398407,-0.7276645),"
                << endl << "    vec2( 0.6582102,-0.2437022),"
                << endl << "    vec2( 0.0462606,-0.9089898),"
                << endl << "    vec2( 0.5656512,-0.0951860),"
                << endl << "    vec2( 0.4130996,-0.3069293),"
                << endl << "    vec2( 0.3740838,-0.7902877),"
                << endl << "    vec2( 0.7193086,-0.5468385),"
                << endl << "    vec2( 0.0793480,-0.7397187),"
                << endl << "    vec2( 0.8579998,-0.3946407),"
                << endl << "    vec2( 0.3261027,-0.4300863),"
                << endl << "    vec2( 0.2651311,-0.8696506),"
                << endl << "    vec2( 0.7969043,-0.0643570),"
                << endl << "    vec2(-0.1325164,-0.8135149),"
                << endl << "    vec2( 0.0610982,-0.5484891),"
                << endl << "    vec2( 0.1229968,-0.4272476),"
                << endl << "    vec2( 0.4823112,-0.7094020),"
                << endl << "    vec2( 0.4085412,-0.1735018),"
                << endl << "    vec2( 0.5028393,-0.8417178),"
                << endl << "    vec2( 0.1983681,-0.5946711),"
                << endl << "    vec2(-0.0796074,-0.3594195),"
                << endl << "    vec2(-0.1306214,-0.9521112),"
                << endl << "    vec2( 0.2488267,-0.2450605),"
                << endl << "    vec2(-0.2766832,-0.7191472),"
                << endl << "    vec2(-0.3021886,-0.9138032),"
                << endl << "    vec2(-0.0775158,-0.6839314),"
                << endl << "    vec2( 0.8036495,-0.2607304),"
                << endl << "    vec2( 0.1611652,-0.1241900),"
                << endl << "    vec2(-0.1739990,-0.5788706),"
                << endl << "    vec2( 0.9638191,-0.2349226),"
                << endl << "    vec2( 0.3795642, 0.0749857),"
                << endl << "    vec2( 0.1626610,-0.9735964),"
                << endl << "    vec2(-0.5080345,-0.7862911),"
                << endl << "    vec2( 0.9464989,-0.0637910),"
                << endl << "    vec2(-0.4024699,-0.5480365),"
                << endl << "    vec2( 0.1144596, 0.1160001),"
                << endl << "    vec2(-0.1515849,-0.2212974),"
                << endl << "    vec2(-0.0677955,-0.0082370),"
                << endl << "    vec2( 0.8363013, 0.1271434),"
                << endl << "    vec2( 0.9570345, 0.2630224),"
                << endl << "    vec2( 0.5473175, 0.0870155),"
                << endl << "    vec2( 0.7531213, 0.3418040),"
                << endl << "    vec2( 0.9938517, 0.0735192),"
                << endl << "    vec2( 0.0039445, 0.3270036),"
                << endl << "    vec2( 0.6911660, 0.1062514),"
                << endl << "    vec2(-0.5737385,-0.6381226),"
                << endl << "    vec2( 0.3235483, 0.2487466),"
                << endl << "    vec2(-0.4212795,-0.6806591),"
                << endl << "    vec2(-0.3826777,-0.3139729),"
                << endl << "    vec2(-0.2570805,-0.4724309),"
                << endl << "    vec2(-0.2315532, 0.0352073),"
                << endl << "    vec2( 0.2845576,-0.0695930),"
                << endl << "    vec2( 0.0479674,-0.2875305),"
                << endl << "    vec2(-0.4617966,-0.4262882),"
                << endl << "    vec2( 0.5237542, 0.2225828),"
                << endl << "    vec2( 0.4252796, 0.4074485),"
                << endl << "    vec2( 0.6433681, 0.5799611),"
                << endl << "    vec2( 0.8048412, 0.4770068),"
                << endl << "    vec2(-0.6651574,-0.7465115),"
                << endl << "    vec2(-0.0877731, 0.1372790),"
                << endl << "    vec2( 0.1817887, 0.2801877),"
                << endl << "    vec2( 0.6132948, 0.3867215),"
                << endl << "    vec2( 0.5146055, 0.5067307),"
                << endl << "    vec2( 0.2455381, 0.0876225),"
                << endl << "    vec2(-0.2398890,-0.3280737),"
                << endl << "    vec2(-0.0291423,-0.1551506),"
                << endl << "    vec2(-0.1543732, 0.2608304),"
                << endl << "    vec2(-0.2840514,-0.1863133),"
                << endl << "    vec2(-0.5863841,-0.3577761),"
                << endl << "    vec2(-0.3499732, 0.2134279),"
                << endl << "    vec2(-0.8007996,-0.5042173),"
                << endl << "    vec2(-0.8802255,-0.3771194),"
                << endl << "    vec2(-0.8368671,-0.1602424),"
                << endl << "    vec2(-0.6376885,-0.4843019),"
                << endl << "    vec2( 0.2390152, 0.4852147),"
                << endl << "    vec2(-0.3679625,-0.0796929),"
                << endl << "    vec2(-0.7258399,-0.6147825),"
                << endl << "    vec2(-0.6881825,-0.1623296),"
                << endl << "    vec2( 0.3172017, 0.6335183),"
                << endl << "    vec2(-0.4947163,-0.1905652),"
                << endl << "    vec2(-0.7326189,-0.3446047),"
                << endl << "    vec2(-0.9554938,-0.2595502),"
                << endl << "    vec2( 0.5003965, 0.8089279),"
                << endl << "    vec2(-0.7068511, 0.0188577),"
                << endl << "    vec2(-0.4965384, 0.0118405),"
                << endl << "    vec2(-0.9092886,-0.0206692),"
                << endl << "    vec2( 0.6080853, 0.7110277),"
                << endl << "    vec2(-0.9902173,-0.1297870),"
                << endl << "    vec2(-0.5100209, 0.2827512),"
                << endl << "    vec2(-0.9921292, 0.1195123),"
                << endl << "    vec2( 0.1413382, 0.6052825),"
                << endl << "    vec2( 0.0010102, 0.4853985),"
                << endl << "    vec2(-0.7100998, 0.1647744),"
                << endl << "    vec2(-0.2790539, 0.3993899),"
                << endl << "    vec2( 0.7670896, 0.6370147),"
                << endl << "    vec2(-0.3896471, 0.6139387),"
                << endl << "    vec2(-0.9441192, 0.2984797),"
                << endl << "    vec2(-0.0808611, 0.6707176),"
                << endl << "    vec2(-0.4463258, 0.4024497),"
                << endl << "    vec2(-0.6056754, 0.5137193),"
                << endl << "    vec2( 0.0538698, 0.7354094),"
                << endl << "    vec2(-0.5424771, 0.1446817),"
                << endl << "    vec2(-0.2581684, 0.7851061),"
                << endl << "    vec2(-0.1652032, 0.9008547),"
                << endl << "    vec2( 0.2114540, 0.8645396),"
                << endl << "    vec2(-0.2587891, 0.5858073),"
                << endl << "    vec2( 0.4675748, 0.6426128),"
                << endl << "    vec2( 0.3603169, 0.8859296),"
                << endl << "    vec2(-0.3656216, 0.0638707),"
                << endl << "    vec2(-0.8297464, 0.1024526),"
                << endl << "    vec2(-0.4206437, 0.7611625),"
                << endl << "    vec2( 0.1308062, 0.9708366),"
                << endl << "    vec2(-0.1081116, 0.4069136),"
                << endl << "    vec2(-0.0657640, 0.8087333),"
                << endl << "    vec2(-0.5324392, 0.6428875),"
                << endl << "    vec2(-0.7058167, 0.6475085),"
                << endl << "    vec2(-0.8272324, 0.3934687),"
                << endl << "    vec2(-0.6830599, 0.4051682),"
                << endl << "    vec2(-0.8073227, 0.2562267),"
                << endl << "    vec2( 0.1242921, 0.4037466),"
                << endl << "    vec2(-0.0186634, 0.9466382),"
                << endl << "    vec2( 0.2220401, 0.7280650),"
                << endl << "    vec2(-0.7884435, 0.5231727),"
                << endl << "    vec2(-0.3017695, 0.9272554),"
                << endl << "    vec2(-0.5974731, 0.7847365)"
                << endl << ");"
                << endl << ""
                ;
            }
            break;
            case 256:
            {
                ost     << "const int  OSGPoissonKernel256Size = 256;"
                << endl << "const vec2 OSGPoissonKernel256[OSGPoissonKernel256Size] = vec2[]"
                << endl << "("
                << endl << "    vec2(-0.6845875,-0.6382553),"
                << endl << "    vec2(-0.7727840,-0.5234371),"
                << endl << "    vec2(-0.7179987,-0.3882750),"
                << endl << "    vec2(-0.6775165,-0.2517154),"
                << endl << "    vec2(-0.5361705,-0.2654960),"
                << endl << "    vec2(-0.6565002,-0.5149921),"
                << endl << "    vec2(-0.7880949,-0.2413236),"
                << endl << "    vec2(-0.4661275,-0.3449219),"
                << endl << "    vec2(-0.6194428,-0.3522120),"
                << endl << "    vec2(-0.5584347,-0.4641879),"
                << endl << "    vec2(-0.8633562,-0.3107704),"
                << endl << "    vec2(-0.8713264,-0.4536122),"
                << endl << "    vec2(-0.4634125,-0.4379900),"
                << endl << "    vec2(-0.5519007,-0.5722814),"
                << endl << "    vec2(-0.5803509,-0.6731107),"
                << endl << "    vec2(-0.5000741,-0.1644035),"
                << endl << "    vec2(-0.7180372,-0.1095650),"
                << endl << "    vec2(-0.6188119,-0.7591207),"
                << endl << "    vec2(-0.7654315, 0.0123545),"
                << endl << "    vec2(-0.6851625, 0.0597378),"
                << endl << "    vec2(-0.4212110,-0.6915097),"
                << endl << "    vec2(-0.4171501,-0.5534253),"
                << endl << "    vec2(-0.3784298,-0.2865617),"
                << endl << "    vec2(-0.6420689,-0.0462519),"
                << endl << "    vec2(-0.3248271,-0.4098083),"
                << endl << "    vec2(-0.3675304,-0.1728693),"
                << endl << "    vec2(-0.6233899,-0.1567689),"
                << endl << "    vec2(-0.5669193, 0.0751048),"
                << endl << "    vec2(-0.2718564,-0.2169380),"
                << endl << "    vec2(-0.8475598,-0.0464608),"
                << endl << "    vec2(-0.8917545, 0.1370921),"
                << endl << "    vec2(-0.9424604,-0.1799425),"
                << endl << "    vec2(-0.2977483,-0.5020629),"
                << endl << "    vec2(-0.4518692,-0.0718746),"
                << endl << "    vec2(-0.3303545,-0.0131280),"
                << endl << "    vec2(-0.4675735, 0.0307096),"
                << endl << "    vec2(-0.1888173,-0.4279464),"
                << endl << "    vec2(-0.3715519, 0.0752146),"
                << endl << "    vec2(-0.4978774, 0.2062324),"
                << endl << "    vec2(-0.5473622,-0.0366468),"
                << endl << "    vec2(-0.8028294,-0.1482733),"
                << endl << "    vec2(-0.6494846, 0.1469729),"
                << endl << "    vec2(-0.9585745,-0.0479081),"
                << endl << "    vec2(-0.1608000,-0.3315299),"
                << endl << "    vec2(-0.9939626, 0.0385580),"
                << endl << "    vec2(-0.2595644,-0.3380910),"
                << endl << "    vec2(-0.7642547, 0.1144366),"
                << endl << "    vec2(-0.1970180,-0.5340305),"
                << endl << "    vec2(-0.1497743,-0.2351105),"
                << endl << "    vec2(-0.2509425,-0.6205519),"
                << endl << "    vec2(-0.4441081,-0.8096184),"
                << endl << "    vec2(-0.8961660, 0.0344605),"
                << endl << "    vec2(-0.2978147,-0.1100380),"
                << endl << "    vec2(-0.0982852,-0.4788018),"
                << endl << "    vec2( 0.0598642,-0.5330622),"
                << endl << "    vec2(-0.8001932, 0.2552736),"
                << endl << "    vec2(-0.2947631,-0.7235715),"
                << endl << "    vec2(-0.3761199, 0.1844667),"
                << endl << "    vec2(-0.1992897, 0.0149752),"
                << endl << "    vec2(-0.1937581,-0.0974519),"
                << endl << "    vec2(-0.2584668, 0.1184238),"
                << endl << "    vec2(-0.1103567, 0.0489811),"
                << endl << "    vec2(-0.6057810, 0.2442155),"
                << endl << "    vec2(-0.0020717,-0.2486418),"
                << endl << "    vec2(-0.7814875,-0.6198449),"
                << endl << "    vec2(-0.6192346, 0.3701663),"
                << endl << "    vec2(-0.0931899, 0.1548269),"
                << endl << "    vec2(-0.6315920, 0.5177325),"
                << endl << "    vec2(-0.1759855,-0.7438451),"
                << endl << "    vec2(-0.2281176, 0.2393179),"
                << endl << "    vec2(-0.0309376,-0.3696007),"
                << endl << "    vec2(-0.9862669, 0.1353054),"
                << endl << "    vec2(-0.0348008,-0.0055487),"
                << endl << "    vec2(-0.5131892, 0.4309027),"
                << endl << "    vec2(-0.7058736, 0.2414945),"
                << endl << "    vec2(-0.0800425,-0.1107968),"
                << endl << "    vec2(-0.7320421, 0.3441476),"
                << endl << "    vec2( 0.1558268,-0.4182693),"
                << endl << "    vec2(-0.0710823,-0.6537905),"
                << endl << "    vec2(-0.3488507,-0.6253702),"
                << endl << "    vec2(-0.5164821,-0.7465257),"
                << endl << "    vec2(-0.9567933,-0.2756309),"
                << endl << "    vec2(-0.1598265, 0.3294444),"
                << endl << "    vec2(-0.3146080, 0.4082236),"
                << endl << "    vec2( 0.0266554,-0.0984197),"
                << endl << "    vec2(-0.4164849, 0.2999979),"
                << endl << "    vec2(-0.3395878,-0.9288309),"
                << endl << "    vec2( 0.2467005,-0.5350434),"
                << endl << "    vec2( 0.2196391,-0.3128432),"
                << endl << "    vec2(-0.6802588, 0.6268561),"
                << endl << "    vec2(-0.5331094, 0.3269825),"
                << endl << "    vec2(-0.9500914, 0.2510533),"
                << endl << "    vec2( 0.0306351,-0.4407189),"
                << endl << "    vec2( 0.0814066,-0.3434824),"
                << endl << "    vec2(-0.4132268, 0.4521863),"
                << endl << "    vec2( 0.0658128, 0.0188782),"
                << endl << "    vec2(-0.0139309, 0.1059862),"
                << endl << "    vec2(-0.3236088, 0.2614498),"
                << endl << "    vec2(-0.2884920, 0.5899489),"
                << endl << "    vec2(-0.3337726,-0.8162601),"
                << endl << "    vec2( 0.1206746,-0.2269065),"
                << endl << "    vec2(-0.0777932, 0.4943697),"
                << endl << "    vec2(-0.0167139, 0.2090348),"
                << endl << "    vec2( 0.2057768,-0.1169270),"
                << endl << "    vec2(-0.0051484,-0.7963835),"
                << endl << "    vec2(-0.2262291,-0.8879169),"
                << endl << "    vec2( 0.0838565, 0.2088083),"
                << endl << "    vec2( 0.1586711,-0.0151662),"
                << endl << "    vec2( 0.1665866,-0.5851103),"
                << endl << "    vec2(-0.5465652, 0.5746363),"
                << endl << "    vec2( 0.0376530, 0.3651378),"
                << endl << "    vec2(-0.0877493,-0.8999488),"
                << endl << "    vec2(-0.1944456, 0.4562850),"
                << endl << "    vec2(-0.8674996, 0.3855878),"
                << endl << "    vec2( 0.1212010,-0.7003400),"
                << endl << "    vec2( 0.2628719,-0.4058964),"
                << endl << "    vec2( 0.2470311, 0.1325077),"
                << endl << "    vec2(-0.1009855, 0.6012619),"
                << endl << "    vec2( 0.3852571,-0.5424530),"
                << endl << "    vec2(-0.4133889, 0.5820367),"
                << endl << "    vec2(-0.1808678, 0.7090276),"
                << endl << "    vec2( 0.2959106,-0.1803396),"
                << endl << "    vec2(-0.5806949, 0.6926744),"
                << endl << "    vec2( 0.0300846,-0.6229676),"
                << endl << "    vec2( 0.1443491, 0.0788471),"
                << endl << "    vec2( 0.0313646, 0.5168833),"
                << endl << "    vec2( 0.2856060,-0.0624381),"
                << endl << "    vec2(-0.2555792, 0.3303034),"
                << endl << "    vec2( 0.3140153,-0.3275810),"
                << endl << "    vec2( 0.4345884,-0.2151185),"
                << endl << "    vec2(-0.7954490, 0.4542460),"
                << endl << "    vec2( 0.2209656,-0.8295765),"
                << endl << "    vec2( 0.0900487,-0.8321360),"
                << endl << "    vec2( 0.0158165,-0.9076511),"
                << endl << "    vec2(-0.0597350, 0.3366162),"
                << endl << "    vec2( 0.2637047,-0.6276751),"
                << endl << "    vec2( 0.0757701, 0.6076030),"
                << endl << "    vec2( 0.4562857,-0.3088211),"
                << endl << "    vec2( 0.3865517,-0.0097384),"
                << endl << "    vec2( 0.1602554,-0.9276950),"
                << endl << "    vec2(-0.7303301, 0.5299214),"
                << endl << "    vec2( 0.2915965,-0.7457029),"
                << endl << "    vec2(-0.1832868, 0.5532165),"
                << endl << "    vec2(-0.4908286, 0.7415285),"
                << endl << "    vec2( 0.3869305,-0.7539107),"
                << endl << "    vec2(-0.3492184, 0.7246443),"
                << endl << "    vec2( 0.1549515, 0.5455064),"
                << endl << "    vec2( 0.3298435,-0.8557597),"
                << endl << "    vec2(-0.0156904, 0.6429234),"
                << endl << "    vec2(-0.3346117, 0.8652196),"
                << endl << "    vec2( 0.4608655,-0.1171504),"
                << endl << "    vec2( 0.0751619, 0.7601056),"
                << endl << "    vec2( 0.3670291,-0.6430801),"
                << endl << "    vec2( 0.3458380,-0.4492794),"
                << endl << "    vec2( 0.0979197, 0.4413359),"
                << endl << "    vec2(-0.1322207, 0.8054290),"
                << endl << "    vec2( 0.3482748, 0.1687506),"
                << endl << "    vec2( 0.4414439,-0.4399930),"
                << endl << "    vec2( 0.5859044,-0.3529334),"
                << endl << "    vec2(-0.6857793, 0.4357483),"
                << endl << "    vec2( 0.5108656,-0.6688035),"
                << endl << "    vec2( 0.2617443,-0.9623922),"
                << endl << "    vec2(-0.6817619, 0.7212509),"
                << endl << "    vec2( 0.1624647, 0.3283877),"
                << endl << "    vec2( 0.1888249, 0.2374382),"
                << endl << "    vec2( 0.5950811,-0.4802930),"
                << endl << "    vec2( 0.4966753,-0.7849858),"
                << endl << "    vec2(-0.2706618, 0.7762617),"
                << endl << "    vec2(-0.7821032, 0.6079491),"
                << endl << "    vec2(-0.5191892, 0.8315132),"
                << endl << "    vec2( 0.2463639, 0.0230325),"
                << endl << "    vec2( 0.5297930,-0.0411580),"
                << endl << "    vec2( 0.5789659,-0.1928011),"
                << endl << "    vec2( 0.4892442,-0.5512637),"
                << endl << "    vec2( 0.2199686, 0.7962707),"
                << endl << "    vec2(-0.4335827, 0.8961933),"
                << endl << "    vec2(-0.8432744, 0.5357863),"
                << endl << "    vec2( 0.6411871,-0.7666851),"
                << endl << "    vec2( 0.2178177, 0.4435161),"
                << endl << "    vec2( 0.6286446,-0.6635349),"
                << endl << "    vec2( 0.4090183, 0.0925504),"
                << endl << "    vec2( 0.6284997,-0.1107032),"
                << endl << "    vec2( 0.5235238, 0.0851079),"
                << endl << "    vec2( 0.3002483, 0.3412520),"
                << endl << "    vec2(-0.6066649, 0.7901601),"
                << endl << "    vec2( 0.7165918,-0.6247835),"
                << endl << "    vec2( 0.2495492, 0.5715667),"
                << endl << "    vec2(-0.1432879,-0.9845687),"
                << endl << "    vec2(-0.2718951, 0.9527328),"
                << endl << "    vec2(-0.0232911, 0.7367150),"
                << endl << "    vec2( 0.7229561,-0.0647247),"
                << endl << "    vec2( 0.3432649, 0.6909411),"
                << endl << "    vec2( 0.0939426,-0.9944397),"
                << endl << "    vec2( 0.4606154,-0.8763652),"
                << endl << "    vec2( 0.7033937,-0.5218148),"
                << endl << "    vec2(-0.0085083, 0.8873807),"
                << endl << "    vec2(-0.4146432, 0.8024352),"
                << endl << "    vec2( 0.1263669, 0.9273195),"
                << endl << "    vec2( 0.8006883,-0.5396930),"
                << endl << "    vec2( 0.1582975, 0.6692669),"
                << endl << "    vec2( 0.3026493, 0.4828470),"
                << endl << "    vec2(-0.0412369, 0.9750304),"
                << endl << "    vec2( 0.7648560,-0.1782805),"
                << endl << "    vec2( 0.7733930,-0.4150966),"
                << endl << "    vec2( 0.5982728,-0.5734630),"
                << endl << "    vec2( 0.8649573,-0.1736228),"
                << endl << "    vec2( 0.4715699, 0.4571655),"
                << endl << "    vec2( 0.4001868, 0.3682061),"
                << endl << "    vec2(-0.1352138, 0.9200681),"
                << endl << "    vec2( 0.6673058, 0.1325836),"
                << endl << "    vec2(-0.0370948,-0.9974731),"
                << endl << "    vec2( 0.4557577, 0.2409841),"
                << endl << "    vec2( 0.8286042, 0.0466802),"
                << endl << "    vec2(-0.2329511, 0.8640153),"
                << endl << "    vec2( 0.6824381,-0.2228419),"
                << endl << "    vec2( 0.3730073, 0.5947105),"
                << endl << "    vec2( 0.7035520,-0.3303345),"
                << endl << "    vec2( 0.8605040,-0.3084160),"
                << endl << "    vec2( 0.8241976,-0.0843996),"
                << endl << "    vec2( 0.6094476, 0.3869199),"
                << endl << "    vec2( 0.6326663, 0.5437722),"
                << endl << "    vec2( 0.6298158,-0.0125732),"
                << endl << "    vec2( 0.3501302, 0.2619256),"
                << endl << "    vec2( 0.7377779, 0.4191611),"
                << endl << "    vec2( 0.5458181, 0.6019267),"
                << endl << "    vec2( 0.9278548,-0.0963264),"
                << endl << "    vec2( 0.2704381, 0.8758754),"
                << endl << "    vec2( 0.7485286, 0.5292861),"
                << endl << "    vec2( 0.6081367, 0.2619390),"
                << endl << "    vec2( 0.9404898, 0.0058762),"
                << endl << "    vec2( 0.4986081, 0.3443960),"
                << endl << "    vec2( 0.4392782, 0.7090372),"
                << endl << "    vec2( 0.2414989, 0.9700682),"
                << endl << "    vec2( 0.9773315,-0.1788465),"
                << endl << "    vec2( 0.7759391, 0.1325525),"
                << endl << "    vec2( 0.7940844, 0.2907424),"
                << endl << "    vec2( 0.5739869, 0.1719819),"
                << endl << "    vec2( 0.8857721,-0.4033214),"
                << endl << "    vec2( 0.3518999, 0.7884170),"
                << endl << "    vec2( 0.4653542, 0.5508914),"
                << endl << "    vec2( 0.8892323, 0.1763880),"
                << endl << "    vec2( 0.5364978, 0.7191328),"
                << endl << "    vec2( 0.6945124, 0.3253323),"
                << endl << "    vec2( 0.7220190, 0.0454448),"
                << endl << "    vec2( 0.9703888, 0.1105175),"
                << endl << "    vec2( 0.9255302, 0.3028197),"
                << endl << "    vec2( 0.4421102, 0.8589296),"
                << endl << "    vec2( 0.6200305, 0.6772834),"
                << endl << "    vec2( 0.7260270, 0.6867529),"
                << endl << "    vec2( 0.6778224,-0.4228106),"
                << endl << "    vec2( 0.7186043, 0.2183112),"
                << endl << "    vec2( 0.8911998, 0.4121280),"
                << endl << "    vec2( 0.5941237, 0.8032219),"
                << endl << "    vec2( 0.3590889, 0.9201994),"
                << endl << "    vec2( 0.8338200, 0.4863092),"
                << endl << "    vec2( 0.0603895, 0.9970402)"
                << endl << ");"
                << endl << ""
                ;
            }
            break;
        }
    }



    return ost.str();
}

} // namespace Shader

namespace Distribution {
    
OSG_SYSTEM_DLLMAPPING std::vector<Real32> getPoissonLine(UInt32 size)
{
    std::vector<Real32> result;

    switch (size)
    {
        case  9:
        {
            result.resize(9);
            result[  0] = -0.7871524f;
            result[  1] =  0.7255595f;
            result[  2] = -0.5337411f;
            result[  3] = -0.9954861f;
            result[  4] =  0.0110326f;
            result[  5] =  0.4819908f;
            result[  6] = -0.2898753f;
            result[  7] =  0.2440656f;
            result[  8] =  0.9490762f;
        }
        break;
        case 16:
        {
            result.resize(16);
            result[  0] =  0.3344579f;
            result[  1] = -0.6107870f;
            result[  2] =  0.0231032f;
            result[  3] = -0.8159175f;
            result[  4] =  0.8845439f;
            result[  5] =  0.5450187f;
            result[  6] =  0.9980156f;
            result[  7] = -0.7055847f;
            result[  8] =  0.7188022f;
            result[  9] = -0.5086509f;
            result[ 10] =  0.4558750f;
            result[ 11] = -0.1205825f;
            result[ 12] =  0.1625757f;
            result[ 13] = -0.9583639f;
            result[ 14] = -0.2133949f;
            result[ 15] = -0.3503573f;
        }
        break;
        case 25:
        {
            result.resize(25);
            result[  0] = -0.6193479f;
            result[  1] =  0.1325963f;
            result[  2] = -0.2373877f;
            result[  3] = -0.0083522f;
            result[  4] =  0.9538764f;
            result[  5] = -0.9675521f;
            result[  6] =  0.5274807f;
            result[  7] = -0.4087552f;
            result[  8] =  0.7756370f;
            result[  9] =  0.8739091f;
            result[ 10] =  0.2166704f;
            result[ 11] =  0.4633284f;
            result[ 12] =  0.3162857f;
            result[ 13] = -0.0973841f;
            result[ 14] = -0.5102893f;
            result[ 15] = -0.6822718f;
            result[ 16] = -0.1721446f;
            result[ 17] = -0.3194513f;
            result[ 18] = -0.8939903f;
            result[ 19] = -0.8339820f;
            result[ 20] =  0.3804911f;
            result[ 21] = -0.7701393f;
            result[ 22] =  0.6911535f;
            result[ 23] =  0.5978600f;
            result[ 24] =  0.0637553f;
        }
        break;
        case 32:
        {
            result.resize(32);
            result[  0] =  0.1749052f;
            result[  1] = -0.9818898f;
            result[  2] =  0.3419300f;
            result[  3] =  0.8365791f;
            result[  4] =  0.2726786f;
            result[  5] =  0.6298493f;
            result[  6] = -0.5077800f;
            result[  7] =  0.9562850f;
            result[  8] = -0.6159893f;
            result[  9] =  0.1100755f;
            result[ 10] =  0.5666519f;
            result[ 11] =  0.7102038f;
            result[ 12] = -0.8550465f;
            result[ 13] =  0.4214811f;
            result[ 14] =  0.8843614f;
            result[ 15] = -0.3508025f;
            result[ 16] = -0.2893730f;
            result[ 17] = -0.4324377f;
            result[ 18] =  0.2258713f;
            result[ 19] = -0.7958426f;
            result[ 20] =  0.7693667f;
            result[ 21] = -0.2139989f;
            result[ 22] = -0.5533406f;
            result[ 23] =  0.4935635f;
            result[ 24] = -0.0184851f;
            result[ 25] = -0.9023134f;
            result[ 26] =  0.9988542f;
            result[ 27] = -0.1591510f;
            result[ 28] = -0.0890089f;
            result[ 29] =  0.0447893f;
            result[ 30] = -0.6570482f;
            result[ 31] = -0.7232474f;
        }
        break;
        case 64:
        {
            result.resize(64);
            result[  0] = -0.3358129f;
            result[  1] = -0.3778557f;
            result[  2] = -0.9943723f;
            result[  3] =  0.3698654f;
            result[  4] = -0.4971023f;
            result[  5] =  0.0437801f;
            result[  6] = -0.4743662f;
            result[  7] =  0.5229008f;
            result[  8] =  0.8851620f;
            result[  9] = -0.9122248f;
            result[ 10] =  0.1797411f;
            result[ 11] = -0.0552303f;
            result[ 12] =  0.4639393f;
            result[ 13] = -0.8074720f;
            result[ 14] = -0.6732544f;
            result[ 15] = -0.2999173f;
            result[ 16] = -0.0981755f;
            result[ 17] = -0.2781757f;
            result[ 18] = -0.1258567f;
            result[ 19] = -0.5839347f;
            result[ 20] = -0.1597793f;
            result[ 21] =  0.6612101f;
            result[ 22] = -0.6106691f;
            result[ 23] = -0.7401019f;
            result[ 24] = -0.7082537f;
            result[ 25] = -0.6437340f;
            result[ 26] =  0.5509888f;
            result[ 27] =  0.3422089f;
            result[ 28] =  0.0034373f;
            result[ 29] =  0.8503081f;
            result[ 30] =  0.7193253f;
            result[ 31] = -0.9699913f;
            result[ 32] = -0.2560489f;
            result[ 33] = -0.1877452f;
            result[ 34] = -0.8796064f;
            result[ 35] =  0.2818258f;
            result[ 36] =  0.9997827f;
            result[ 37] =  0.7873942f;
            result[ 38] =  0.0851299f;
            result[ 39] =  0.6284571f;
            result[ 40] =  0.8151190f;
            result[ 41] = -0.5557547f;
            result[ 42] =  0.4976506f;
            result[ 43] =  0.9459400f;
            result[ 44] = -0.4397905f;
            result[ 45] =  0.4391923f;
            result[ 46] =  0.2442654f;
            result[ 47] = -0.7775086f;
            result[ 48] = -0.4115611f;
            result[ 49] = -0.9473934f;
            result[ 50] =  0.7522984f;
            result[ 51] =  0.6915271f;
            result[ 52] = -0.0263261f;
            result[ 53] =  0.9205810f;
            result[ 54] = -0.8422883f;
            result[ 55] =  0.5872250f;
            result[ 56] =  0.9695262f;
            result[ 57] =  0.3041239f;
            result[ 58] =  0.4009351f;
            result[ 59] =  0.1539419f;
            result[ 60] = -0.2275835f;
            result[ 61] =  0.2084063f;
            result[ 62] = -0.5212141f;
            result[ 63] =  0.1284794f;
        }
        break;
        case 100:
        {
            result.resize(100);
            result[  0] =  0.6646792f;
            result[  1] =  0.9549159f;
            result[  2] = -0.1618729f;
            result[  3] = -0.9093261f;
            result[  4] =  0.9934465f;
            result[  5] =  0.3199250f;
            result[  6] = -0.8952503f;
            result[  7] =  0.7512851f;
            result[  8] =  0.1981025f;
            result[  9] = -0.3408080f;
            result[ 10] =  0.1052785f;
            result[ 11] = -0.5898780f;
            result[ 12] = -0.6322011f;
            result[ 13] =  0.4686877f;
            result[ 14] = -0.5311512f;
            result[ 15] = -0.9579585f;
            result[ 16] = -0.8690947f;
            result[ 17] = -0.4174470f;
            result[ 18] = -0.5063637f;
            result[ 19] =  0.4118505f;
            result[ 20] =  0.2960047f;
            result[ 21] =  0.8188670f;
            result[ 22] = -0.7066251f;
            result[ 23] =  0.4497209f;
            result[ 24] = -0.8277867f;
            result[ 25] =  0.8325815f;
            result[ 26] =  0.5579408f;
            result[ 27] =  0.2540900f;
            result[ 28] = -0.0211837f;
            result[ 29] = -0.9346561f;
            result[ 30] = -0.7452374f;
            result[ 31] = -0.0564438f;
            result[ 32] =  0.6018726f;
            result[ 33] = -0.4637597f;
            result[ 34] =  0.9142684f;
            result[ 35] = -0.2743481f;
            result[ 36] =  0.2772299f;
            result[ 37] = -0.7795851f;
            result[ 38] = -0.3816891f;
            result[ 39] = -0.0719319f;
            result[ 40] = -0.2515216f;
            result[ 41] = -0.3978117f;
            result[ 42] = -0.2325465f;
            result[ 43] =  0.3411419f;
            result[ 44] =  0.1328899f;
            result[ 45] =  0.0878183f;
            result[ 46] = -0.4473614f;
            result[ 47] = -0.2916390f;
            result[ 48] =  0.1466681f;
            result[ 49] =  0.8906232f;
            result[ 50] = -0.7211071f;
            result[ 51] = -0.7639483f;
            result[ 52] =  0.3930402f;
            result[ 53] =  0.3555646f;
            result[ 54] =  0.6497824f;
            result[ 55] = -0.0959454f;
            result[ 56] =  0.5327556f;
            result[ 57] = -0.6132896f;
            result[ 58] =  0.3753365f;
            result[ 59] = -0.8036053f;
            result[ 60] =  0.7372751f;
            result[ 61] = -0.9845613f;
            result[ 62] = -0.4886579f;
            result[ 63] =  0.2325442f;
            result[ 64] = -0.3138666f;
            result[ 65] =  0.5133662f;
            result[ 66] = -0.3550025f;
            result[ 67] =  0.9302908f;
            result[ 68] = -0.5712074f;
            result[ 69] = -0.0351858f;
            result[ 70] =  0.1190622f;
            result[ 71] = -0.1364995f;
            result[ 72] =  0.5793860f;
            result[ 73] =  0.7705318f;
            result[ 74] = -0.6528262f;
            result[ 75] =  0.4302015f;
            result[ 76] = -0.8496915f;
            result[ 77] =  0.2174765f;
            result[ 78] =  0.0654489f;
            result[ 79] =  0.8763741f;
            result[ 80] =  0.7203366f;
            result[ 81] = -0.2080412f;
            result[ 82] =  0.7932810f;
            result[ 83] = -0.9981984f;
            result[ 84] =  0.0275993f;
            result[ 85] =  0.6228331f;
            result[ 86] = -0.1862389f;
            result[ 87] = -0.4322892f;
            result[ 88] =  0.8577539f;
            result[ 89] =  0.1731219f;
            result[ 90] =  0.0025429f;
            result[ 91] =  0.6811379f;
            result[ 92] =  0.4921583f;
            result[ 93] = -0.6883360f;
            result[ 94] =  0.9784057f;
            result[ 95] = -0.5509794f;
            result[ 96] =  0.6969110f;
            result[ 97] =  0.0443461f;
            result[ 98] = -0.6665478f;
            result[ 99] = -0.1206993f;
        }
        break;
        case 128:
        {
            result.resize(128);
            result[  0] = -0.5597589f;
            result[  1] =  0.3401266f;
            result[  2] =  0.5304612f;
            result[  3] =  0.2274592f;
            result[  4] =  0.9044242f;
            result[  5] =  0.1531553f;
            result[  6] = -0.1052573f;
            result[  7] =  0.5122370f;
            result[  8] = -0.4389635f;
            result[  9] = -0.2626778f;
            result[ 10] = -0.9479403f;
            result[ 11] =  0.3691779f;
            result[ 12] = -0.3057303f;
            result[ 13] = -0.4565771f;
            result[ 14] =  0.2019379f;
            result[ 15] =  0.8127080f;
            result[ 16] =  0.4257112f;
            result[ 17] =  0.6736293f;
            result[ 18] =  0.7513447f;
            result[ 19] = -0.5279821f;
            result[ 20] =  0.1877457f;
            result[ 21] =  0.7058672f;
            result[ 22] =  0.8917552f;
            result[ 23] = -0.4139419f;
            result[ 24] =  0.3859087f;
            result[ 25] =  0.8752941f;
            result[ 26] = -0.0861605f;
            result[ 27] =  0.0388077f;
            result[ 28] = -0.8656245f;
            result[ 29] =  0.5454611f;
            result[ 30] = -0.0467380f;
            result[ 31] =  0.0701808f;
            result[ 32] =  0.5911509f;
            result[ 33] =  0.0040773f;
            result[ 34] =  0.0547738f;
            result[ 35] = -0.7749274f;
            result[ 36] = -0.8354952f;
            result[ 37] =  0.2755542f;
            result[ 38] = -0.6519850f;
            result[ 39] = -0.7635450f;
            result[ 40] =  0.7837889f;
            result[ 41] = -0.2924294f;
            result[ 42] = -0.3806432f;
            result[ 43] =  0.8442680f;
            result[ 44] = -0.8865100f;
            result[ 45] =  0.6898851f;
            result[ 46] =  0.8284385f;
            result[ 47] = -0.0725895f;
            result[ 48] =  0.3537921f;
            result[ 49] = -0.0149930f;
            result[ 50] = -0.6947492f;
            result[ 51] = -0.3632776f;
            result[ 52] = -0.2362357f;
            result[ 53] = -0.6226428f;
            result[ 54] =  0.3266870f;
            result[ 55] = -0.6022466f;
            result[ 56] =  0.4134119f;
            result[ 57] =  0.9164027f;
            result[ 58] =  0.7984852f;
            result[ 59] =  0.0219594f;
            result[ 60] = -0.9747187f;
            result[ 61] = -0.9944595f;
            result[ 62] = -0.4984608f;
            result[ 63] =  0.1688195f;
            result[ 64] = -0.1337184f;
            result[ 65] = -0.7485920f;
            result[ 66] = -0.0341870f;
            result[ 67] =  0.1373500f;
            result[ 68] = -0.0595654f;
            result[ 69] =  0.6228793f;
            result[ 70] = -0.1748949f;
            result[ 71] =  0.7699337f;
            result[ 72] = -0.8011220f;
            result[ 73] = -0.8197109f;
            result[ 74] =  0.4916753f;
            result[ 75] = -0.7891875f;
            result[ 76] =  0.6409063f;
            result[ 77] =  0.2137861f;
            result[ 78] = -0.7125705f;
            result[ 79] = -0.5855985f;
            result[ 80] =  0.4618670f;
            result[ 81] = -0.9132054f;
            result[ 82] = -0.4843646f;
            result[ 83] = -0.1894053f;
            result[ 84] = -0.3440191f;
            result[ 85] = -0.6825505f;
            result[ 86] = -0.5099477f;
            result[ 87] = -0.6399667f;
            result[ 88] =  0.8558155f;
            result[ 89] =  0.6572168f;
            result[ 90] =  0.2881659f;
            result[ 91] = -0.7311356f;
            result[ 92] =  0.4437925f;
            result[ 93] = -0.8542361f;
            result[ 94] =  0.7399030f;
            result[ 95] = -0.9593382f;
            result[ 96] = -0.9314684f;
            result[ 97] =  0.9343539f;
            result[ 98] =  0.5593319f;
            result[ 99] =  0.1035558f;
            result[100] =  0.3055168f;
            result[101] = -0.1482812f;
            result[102] = -0.2209879f;
            result[103] =  0.9739876f;
            result[104] =  0.5750147f;
            result[105] = -0.8991756f;
            result[106] = -0.2768787f;
            result[107] = -0.3232290f;
            result[108] = -0.1201541f;
            result[109] =  0.9556328f;
            result[110] =  0.6078084f;
            result[111] =  0.9912442f;
            result[112] =  0.4004109f;
            result[113] = -0.2509406f;
            result[114] = -0.3991503f;
            result[115] =  0.2632519f;
            result[116] =  0.0868843f;
            result[117] =  0.4771416f;
            result[118] = -0.5718501f;
            result[119] = -0.2060447f;
            result[120] = -0.5452394f;
            result[121] = -0.6642181f;
            result[122] =  0.1188804f;
            result[123] =  0.2487698f;
            result[124] = -0.4675366f;
            result[125] = -0.4260437f;
            result[126] = -0.1622242f;
            result[127] =  0.7250726f;
        }
        break;
        case 256:
        {
            result.resize(256);
            result[  0] =  0.1724815f;
            result[  1] =  0.3001164f;
            result[  2] = -0.4945241f;
            result[  3] =  0.6187243f;
            result[  4] =  0.2016302f;
            result[  5] =  0.5331817f;
            result[  6] =  0.4884628f;
            result[  7] = -0.7850481f;
            result[  8] = -0.4327598f;
            result[  9] =  0.9632941f;
            result[ 10] =  0.2574111f;
            result[ 11] =  0.5149909f;
            result[ 12] = -0.9240320f;
            result[ 13] =  0.7469863f;
            result[ 14] = -0.0730252f;
            result[ 15] = -0.8456559f;
            result[ 16] =  0.7675261f;
            result[ 17] =  0.7227569f;
            result[ 18] = -0.9913587f;
            result[ 19] =  0.8059530f;
            result[ 20] =  0.9220514f;
            result[ 21] = -0.2432517f;
            result[ 22] = -0.6038472f;
            result[ 23] =  0.5425174f;
            result[ 24] = -0.3826038f;
            result[ 25] = -0.1344538f;
            result[ 26] =  0.3856680f;
            result[ 27] =  0.7324618f;
            result[ 28] =  0.6743915f;
            result[ 29] = -0.7548424f;
            result[ 30] = -0.2203750f;
            result[ 31] =  0.0437452f;
            result[ 32] = -0.6264998f;
            result[ 33] =  0.8124905f;
            result[ 34] =  0.2357123f;
            result[ 35] =  0.5989594f;
            result[ 36] =  0.1159110f;
            result[ 37] =  0.8691272f;
            result[ 38] =  0.0033753f;
            result[ 39] =  0.1319526f;
            result[ 40] =  0.0696659f;
            result[ 41] = -0.3118165f;
            result[ 42] =  0.1102904f;
            result[ 43] = -0.8274336f;
            result[ 44] =  0.7053456f;
            result[ 45] =  0.1672305f;
            result[ 46] =  0.7127522f;
            result[ 47] =  0.3241469f;
            result[ 48] =  0.9989573f;
            result[ 49] = -0.0536863f;
            result[ 50] =  0.1902937f;
            result[ 51] =  0.1956038f;
            result[ 52] = -0.4535789f;
            result[ 53] =  0.8810308f;
            result[ 54] = -0.7415822f;
            result[ 55] =  0.8315059f;
            result[ 56] =  0.9142821f;
            result[ 57] = -0.4145505f;
            result[ 58] = -0.1185819f;
            result[ 59] = -0.1827442f;
            result[ 60] = -0.2918612f;
            result[ 61] = -0.4779132f;
            result[ 62] =  0.4008591f;
            result[ 63] = -0.9111017f;
            result[ 64] =  0.4817274f;
            result[ 65] = -0.0262120f;
            result[ 66] = -0.5553268f;
            result[ 67] = -0.8819825f;
            result[ 68] = -0.8095141f;
            result[ 69] = -0.3240580f;
            result[ 70] = -0.7998749f;
            result[ 71] =  0.4637429f;
            result[ 72] =  0.4172124f;
            result[ 73] =  0.3335814f;
            result[ 74] =  0.9695841f;
            result[ 75] = -0.1688415f;
            result[ 76] =  0.9934963f;
            result[ 77] = -0.2581500f;
            result[ 78] =  0.1814436f;
            result[ 79] =  0.3410231f;
            result[ 80] =  0.8750987f;
            result[ 81] =  0.3911141f;
            result[ 82] =  0.8970877f;
            result[ 83] = -0.0674353f;
            result[ 84] =  0.1594192f;
            result[ 85] = -0.3403596f;
            result[ 86] =  0.1535060f;
            result[ 87] =  0.7535266f;
            result[ 88] =  0.6428274f;
            result[ 89] = -0.9761821f;
            result[ 90] =  0.0165269f;
            result[ 91] = -0.3457100f;
            result[ 92] =  0.4478909f;
            result[ 93] =  0.4105464f;
            result[ 94] =  0.3591712f;
            result[ 95] =  0.1041162f;
            result[ 96] = -0.7923720f;
            result[ 97] =  0.2189758f;
            result[ 98] =  0.4725598f;
            result[ 99] = -0.9331274f;
            result[100] =  0.1218858f;
            result[101] = -0.0910746f;
            result[102] =  0.6134243f;
            result[103] = -0.5369939f;
            result[104] = -0.1006149f;
            result[105] = -0.8172627f;
            result[106] = -0.4463862f;
            result[107] =  0.0940322f;
            result[108] =  0.2419500f;
            result[109] = -0.6600218f;
            result[110] = -0.9008843f;
            result[111] = -0.0161788f;
            result[112] = -0.7622043f;
            result[113] =  0.7404199f;
            result[114] = -0.1096160f;
            result[115] = -0.2047839f;
            result[116] = -0.9845876f;
            result[117] =  0.4328594f;
            result[118] = -0.1560562f;
            result[119] = -0.2735211f;
            result[120] = -0.3184100f;
            result[121] =  0.1450825f;
            result[122] = -0.6173826f;
            result[123] =  0.9781982f;
            result[124] = -0.1772757f;
            result[125] =  0.9476815f;
            result[126] =  0.6905800f;
            result[127] = -0.3016547f;
            result[128] =  0.0853776f;
            result[129] =  0.7611421f;
            result[130] = -0.4392941f;
            result[131] = -0.7215222f;
            result[132] = -0.4056931f;
            result[133] =  0.2473807f;
            result[134] = -0.8628697f;
            result[135] = -0.9609125f;
            result[136] = -0.0599501f;
            result[137] =  0.4398772f;
            result[138] = -0.4239621f;
            result[139] = -0.5946702f;
            result[140] = -0.0788916f;
            result[141] =  0.3781347f;
            result[142] =  0.4252163f;
            result[143] = -0.5470865f;
            result[144] =  0.5678430f;
            result[145] = -0.7774085f;
            result[146] =  0.5246257f;
            result[147] = -0.7149231f;
            result[148] = -0.4696134f;
            result[149] =  0.1376069f;
            result[150] =  0.6972932f;
            result[151] = -0.5308180f;
            result[152] =  0.0602391f;
            result[153] =  0.0244004f;
            result[154] =  0.5065264f;
            result[155] =  0.2914866f;
            result[156] = -0.9164776f;
            result[157] = -0.6875161f;
            result[158] =  0.8218166f;
            result[159] =  0.5500075f;
            result[160] =  0.0346323f;
            result[161] =  0.9317662f;
            result[162] = -0.7718916f;
            result[163] = -0.0449945f;
            result[164] = -0.9507866f;
            result[165] = -0.6354916f;
            result[166] =  0.5780544f;
            result[167] = -0.1420344f;
            result[168] =  0.8536661f;
            result[169] =  0.6077371f;
            result[170] =  0.5848329f;
            result[171] =  0.7909262f;
            result[172] = -0.5613953f;
            result[173] = -0.1629441f;
            result[174] = -0.1508553f;
            result[175] =  0.2745539f;
            result[176] =  0.7821230f;
            result[177] = -0.7048253f;
            result[178] =  0.0530516f;
            result[179] =  0.5583800f;
            result[180] = -0.5863752f;
            result[181] = -0.4619096f;
            result[182] = -0.0020776f;
            result[183] =  0.2660172f;
            result[184] = -0.5236485f;
            result[185] = -0.7483581f;
            result[186] =  0.3506536f;
            result[187] = -0.1885203f;
            result[188] = -0.6440103f;
            result[189] = -0.6689652f;
            result[190] = -0.2364153f;
            result[191] =  0.6648490f;
            result[192] = -0.6965976f;
            result[193] = -0.3312479f;
            result[194] =  0.9574656f;
            result[195] = -0.8729816f;
            result[196] = -0.2638044f;
            result[197] = -0.2821084f;
            result[198] = -0.3968079f;
            result[199] =  0.9840709f;
            result[200] =  0.6256388f;
            result[201] = -0.1952358f;
            result[202] =  0.0105755f;
            result[203] = -0.3592573f;
            result[204] = -0.5701948f;
            result[205] =  0.4564787f;
            result[206] = -0.7343952f;
            result[207] = -0.5012622f;
            result[208] = -0.2291303f;
            result[209] =  0.4969338f;
            result[210] =  0.7766922f;
            result[211] = -0.5108198f;
            result[212] =  0.0797336f;
            result[213] = -0.7275518f;
            result[214] =  0.6570876f;
            result[215] = -0.4881278f;
            result[216] = -0.8355647f;
            result[217] = -0.2117350f;
            result[218] =  0.6341393f;
            result[219] =  0.9379970f;
            result[220] = -0.9705037f;
            result[221] = -0.8908026f;
            result[222] =  0.3649991f;
            result[223] = -0.5772947f;
            result[224] = -0.3902451f;
            result[225] = -0.0387289f;
            result[226] =  0.2831842f;
            result[227] =  0.3160689f;
            result[228] = -0.1271231f;
            result[229] = -0.2517443f;
            result[230] = -0.0326176f;
            result[231] = -0.6786560f;
            result[232] = -0.3665535f;
            result[233] =  0.6847368f;
            result[234] =  0.7984314f;
            result[235] = -0.9981199f;
            result[236] =  0.6491785f;
            result[237] =  0.2280624f;
            result[238] = -0.0083124f;
            result[239] =  0.2092477f;
            result[240] = -0.9417108f;
            result[241] = -0.6542230f;
            result[242] =  0.8893991f;
            result[243] = -0.3518287f;
            result[244] = -0.5174632f;
            result[245] = -0.8558957f;
            result[246] =  0.8612667f;
            result[247] =  0.8440928f;
            result[248] = -0.6113498f;
            result[249] =  0.8374422f;
            result[250] =  0.9054911f;
            result[251] = -0.3754297f;
            result[252] =  0.5911598f;
            result[253] =  0.3090384f;
            result[254] = -0.0855895f;
            result[255] =  0.3715355f;
        }
        break;
    }
    
    return result;
}

OSG_SYSTEM_DLLMAPPING std::vector<Vec2f> getPoissonDisk(UInt32 size)
{
    std::vector<Vec2f> result;

    switch (size)
    {
        case  9:
        {
            result.resize(9);
            result[  0] = Vec2f( 0.1352401f, 0.2216032f);
            result[  1] = Vec2f(-0.8545103f,-0.4572518f);
            result[  2] = Vec2f( 0.5856745f, 0.6626827f);
            result[  3] = Vec2f( 0.9782205f,-0.0110201f);
            result[  4] = Vec2f( 0.5192298f,-0.2921064f);
            result[  5] = Vec2f(-0.2337459f, 0.8528743f);
            result[  6] = Vec2f(-0.6073725f, 0.1131358f);
            result[  7] = Vec2f(-0.2561858f,-0.4427317f);
            result[  8] = Vec2f( 0.0733981f,-0.9472286f);
        }
        break;
        case 16:
        {
            result.resize(16);
            result[  0] = Vec2f(-0.1231781f,-0.1792133f);
            result[  1] = Vec2f(-0.3803298f, 0.3354410f);
            result[  2] = Vec2f( 0.2253020f,-0.7393359f);
            result[  3] = Vec2f( 0.4142494f, 0.9059868f);
            result[  4] = Vec2f( 0.2689788f, 0.4212370f);
            result[  5] = Vec2f( 0.7607553f, 0.6241947f);
            result[  6] = Vec2f(-0.9100587f,-0.4102688f);
            result[  7] = Vec2f(-0.5658886f,-0.1063365f);
            result[  8] = Vec2f( 0.3000245f,-0.2786088f);
            result[  9] = Vec2f(-0.9649884f, 0.1653993f);
            result[ 10] = Vec2f(-0.4818619f, 0.8360126f);
            result[ 11] = Vec2f( 0.6371646f, 0.0988400f);
            result[ 12] = Vec2f( 0.8522859f,-0.3376682f);
            result[ 13] = Vec2f(-0.5537201f,-0.7204525f);
            result[ 14] = Vec2f(-0.0501305f, 0.7609186f);
            result[ 15] = Vec2f(-0.1641327f,-0.9659021f);
        }
        break;
        case 25:
        {
            result.resize(25);
            result[  0] = Vec2f(-0.1173731f, 0.7822462f);
            result[  1] = Vec2f( 0.4446226f, 0.3824062f);
            result[  2] = Vec2f( 0.6044956f,-0.2136807f);
            result[  3] = Vec2f(-0.8128385f, 0.0190134f);
            result[  4] = Vec2f( 0.0982834f,-0.5857462f);
            result[  5] = Vec2f(-0.9281102f,-0.3592809f);
            result[  6] = Vec2f( 0.3258387f,-0.3626084f);
            result[  7] = Vec2f(-0.4242690f, 0.6351391f);
            result[  8] = Vec2f( 0.6020226f,-0.7168623f);
            result[  9] = Vec2f(-0.1895790f,-0.9047863f);
            result[ 10] = Vec2f(-0.3432781f,-0.5263912f);
            result[ 11] = Vec2f(-0.2849647f, 0.3048477f);
            result[ 12] = Vec2f(-0.9051442f, 0.3558149f);
            result[ 13] = Vec2f( 0.2988238f,-0.8936564f);
            result[ 14] = Vec2f( 0.7208881f, 0.1064829f);
            result[ 15] = Vec2f(-0.2155677f,-0.2039018f);
            result[ 16] = Vec2f( 0.9328820f, 0.3492278f);
            result[ 17] = Vec2f(-0.6245845f,-0.2730294f);
            result[ 18] = Vec2f( 0.4515171f, 0.7146864f);
            result[ 19] = Vec2f( 0.2104273f, 0.9385742f);
            result[ 20] = Vec2f( 0.8871855f,-0.3539439f);
            result[ 21] = Vec2f(-0.5647935f,-0.7697409f);
            result[ 22] = Vec2f(-0.4894872f, 0.0261891f);
            result[ 23] = Vec2f( 0.0994301f, 0.4971559f);
            result[ 24] = Vec2f( 0.1836078f, 0.1467776f);
        }
        break;
        case 32:
        {
            result.resize(32);
            result[  0] = Vec2f( 0.3158960f,-0.9215328f);
            result[  1] = Vec2f(-0.4464570f,-0.3152097f);
            result[  2] = Vec2f(-0.6507450f,-0.1082346f);
            result[  3] = Vec2f( 0.2803440f, 0.4457366f);
            result[  4] = Vec2f(-0.1233718f,-0.0760604f);
            result[  5] = Vec2f( 0.4446204f, 0.7488220f);
            result[  6] = Vec2f( 0.0870118f, 0.6760999f);
            result[  7] = Vec2f( 0.4911748f,-0.0037385f);
            result[  8] = Vec2f( 0.4782519f,-0.3550036f);
            result[  9] = Vec2f(-0.7439865f,-0.4420812f);
            result[ 10] = Vec2f( 0.1777456f, 0.9628344f);
            result[ 11] = Vec2f(-0.4324769f, 0.5124969f);
            result[ 12] = Vec2f( 0.4249492f,-0.6628892f);
            result[ 13] = Vec2f(-0.5202396f,-0.6931750f);
            result[ 14] = Vec2f( 0.2081639f,-0.4762477f);
            result[ 15] = Vec2f( 0.2200260f,-0.1891373f);
            result[ 16] = Vec2f(-0.8722556f, 0.3340226f);
            result[ 17] = Vec2f(-0.1415857f,-0.8461879f);
            result[ 18] = Vec2f( 0.5520806f, 0.3089725f);
            result[ 19] = Vec2f( 0.8672607f,-0.3697065f);
            result[ 20] = Vec2f(-0.1299604f, 0.9883857f);
            result[ 21] = Vec2f(-0.1600019f,-0.3994551f);
            result[ 22] = Vec2f(-0.1485880f, 0.4550762f);
            result[ 23] = Vec2f( 0.7168827f,-0.6566594f);
            result[ 24] = Vec2f( 0.7866176f, 0.5053647f);
            result[ 25] = Vec2f(-0.3829228f, 0.2268766f);
            result[ 26] = Vec2f(-0.9619211f,-0.1829884f);
            result[ 27] = Vec2f(-0.6881316f, 0.6567527f);
            result[ 28] = Vec2f( 0.8957045f,-0.0326846f);
            result[ 29] = Vec2f( 0.9156921f, 0.2589695f);
            result[ 30] = Vec2f(-0.3391240f, 0.7752155f);
            result[ 31] = Vec2f( 0.1343074f, 0.1644976f);
        }
        break;
        case 64:
        {
            result.resize(64);
            result[  0] = Vec2f( 0.3159249f,-0.6256344f);
            result[  1] = Vec2f(-0.5489367f,-0.0846282f);
            result[  2] = Vec2f( 0.3725057f, 0.7546169f);
            result[  3] = Vec2f(-0.8362801f,-0.3766779f);
            result[  4] = Vec2f(-0.9493377f, 0.1513424f);
            result[  5] = Vec2f( 0.5649692f,-0.0748296f);
            result[  6] = Vec2f( 0.1618174f, 0.7142949f);
            result[  7] = Vec2f(-0.0275619f, 0.5589527f);
            result[  8] = Vec2f( 0.9483961f,-0.0778806f);
            result[  9] = Vec2f(-0.2933905f,-0.4503433f);
            result[ 10] = Vec2f(-0.8521829f, 0.5151993f);
            result[ 11] = Vec2f(-0.3506594f,-0.8244902f);
            result[ 12] = Vec2f(-0.7882840f, 0.3204186f);
            result[ 13] = Vec2f( 0.5822343f,-0.7525322f);
            result[ 14] = Vec2f( 0.9613329f, 0.1802706f);
            result[ 15] = Vec2f(-0.4275004f, 0.0712700f);
            result[ 16] = Vec2f( 0.1739452f, 0.4204996f);
            result[ 17] = Vec2f(-0.2622792f, 0.3503826f);
            result[ 18] = Vec2f(-0.2430724f, 0.1328177f);
            result[ 19] = Vec2f( 0.8488919f, 0.4028556f);
            result[ 20] = Vec2f( 0.7522465f,-0.5127447f);
            result[ 21] = Vec2f(-0.0398384f,-0.3871368f);
            result[ 22] = Vec2f(-0.6581377f, 0.5307279f);
            result[ 23] = Vec2f( 0.0379202f,-0.9693972f);
            result[ 24] = Vec2f(-0.3166471f,-0.1739604f);
            result[ 25] = Vec2f( 0.3039000f,-0.1683287f);
            result[ 26] = Vec2f( 0.1209967f, 0.0002915f);
            result[ 27] = Vec2f(-0.0628464f,-0.0756901f);
            result[ 28] = Vec2f( 0.2122829f, 0.9594055f);
            result[ 29] = Vec2f(-0.1310065f,-0.8516991f);
            result[ 30] = Vec2f( 0.1455743f,-0.2808273f);
            result[ 31] = Vec2f( 0.6443700f,-0.3511960f);
            result[ 32] = Vec2f(-0.1032084f,-0.5731086f);
            result[ 33] = Vec2f( 0.2387210f,-0.8808631f);
            result[ 34] = Vec2f( 0.1718353f,-0.4880974f);
            result[ 35] = Vec2f(-0.0360128f, 0.8275380f);
            result[ 36] = Vec2f( 0.5341847f, 0.1828818f);
            result[ 37] = Vec2f(-0.9977674f,-0.0645626f);
            result[ 38] = Vec2f( 0.4744296f,-0.2627314f);
            result[ 39] = Vec2f(-0.6283710f,-0.2610060f);
            result[ 40] = Vec2f( 0.7939084f,-0.2195404f);
            result[ 41] = Vec2f( 0.4697374f, 0.4142215f);
            result[ 42] = Vec2f( 0.7430627f, 0.0267377f);
            result[ 43] = Vec2f(-0.1975849f, 0.7218834f);
            result[ 44] = Vec2f(-0.6233911f,-0.7428396f);
            result[ 45] = Vec2f(-0.7446748f,-0.5910950f);
            result[ 46] = Vec2f(-0.4034941f,-0.6279461f);
            result[ 47] = Vec2f( 0.4341342f,-0.8811681f);
            result[ 48] = Vec2f( 0.0089591f, 0.2818522f);
            result[ 49] = Vec2f(-0.7606370f, 0.1186333f);
            result[ 50] = Vec2f( 0.4094346f,-0.4502383f);
            result[ 51] = Vec2f(-0.7450054f,-0.0892212f);
            result[ 52] = Vec2f(-0.5272653f,-0.4276148f);
            result[ 53] = Vec2f( 0.3356494f, 0.1066933f);
            result[ 54] = Vec2f(-0.4868964f, 0.4274127f);
            result[ 55] = Vec2f( 0.8981071f,-0.3793197f);
            result[ 56] = Vec2f( 0.0799813f,-0.7287418f);
            result[ 57] = Vec2f(-0.3398367f, 0.5664982f);
            result[ 58] = Vec2f( 0.6783590f, 0.7001967f);
            result[ 59] = Vec2f(-0.3255016f, 0.9388465f);
            result[ 60] = Vec2f(-0.5816338f, 0.7856910f);
            result[ 61] = Vec2f( 0.6664871f, 0.3381162f);
            result[ 62] = Vec2f(-0.5432284f, 0.2229125f);
            result[ 63] = Vec2f( 0.3120862f, 0.5645704f);
        }
        break;
        case 100:
        {
            result.resize(100);
            result[  0] = Vec2f(-0.2334328f,-0.3910202f);
            result[  1] = Vec2f(-0.5336983f, 0.3881326f);
            result[  2] = Vec2f( 0.0550007f,-0.5189380f);
            result[  3] = Vec2f(-0.6388845f, 0.0645306f);
            result[  4] = Vec2f( 0.2143342f, 0.2708611f);
            result[  5] = Vec2f(-0.0372658f, 0.4482222f);
            result[  6] = Vec2f( 0.8204639f, 0.3092834f);
            result[  7] = Vec2f(-0.0453742f, 0.0436698f);
            result[  8] = Vec2f(-0.9272219f, 0.0690085f);
            result[  9] = Vec2f(-0.5861238f,-0.4347652f);
            result[ 10] = Vec2f( 0.9838127f, 0.0367379f);
            result[ 11] = Vec2f( 0.1649063f, 0.5871502f);
            result[ 12] = Vec2f( 0.8186411f, 0.4848934f);
            result[ 13] = Vec2f( 0.6084919f, 0.2349324f);
            result[ 14] = Vec2f( 0.9675119f, 0.2309351f);
            result[ 15] = Vec2f( 0.5448980f, 0.5639963f);
            result[ 16] = Vec2f( 0.7594124f,-0.5998687f);
            result[ 17] = Vec2f( 0.5269107f, 0.7136331f);
            result[ 18] = Vec2f(-0.4356353f, 0.8287870f);
            result[ 19] = Vec2f(-0.7505497f, 0.5671571f);
            result[ 20] = Vec2f( 0.0940166f,-0.0883316f);
            result[ 21] = Vec2f(-0.2780855f,-0.2195318f);
            result[ 22] = Vec2f(-0.3281339f, 0.5257638f);
            result[ 23] = Vec2f(-0.9602946f, 0.2707007f);
            result[ 24] = Vec2f( 0.3093452f,-0.9392706f);
            result[ 25] = Vec2f( 0.6433299f,-0.2644231f);
            result[ 26] = Vec2f( 0.2208997f, 0.7656574f);
            result[ 27] = Vec2f( 0.1980968f, 0.9283324f);
            result[ 28] = Vec2f( 0.0972722f,-0.2774833f);
            result[ 29] = Vec2f(-0.4249593f, 0.1265825f);
            result[ 30] = Vec2f( 0.1298392f, 0.4364119f);
            result[ 31] = Vec2f( 0.1293144f,-0.9779825f);
            result[ 32] = Vec2f( 0.3477604f, 0.6032573f);
            result[ 33] = Vec2f(-0.5890944f, 0.7637706f);
            result[ 34] = Vec2f( 0.9840028f,-0.1332766f);
            result[ 35] = Vec2f( 0.6428027f, 0.4228548f);
            result[ 36] = Vec2f( 0.8398460f,-0.0424625f);
            result[ 37] = Vec2f(-0.1460860f,-0.1289014f);
            result[ 38] = Vec2f( 0.5768528f,-0.8051900f);
            result[ 39] = Vec2f( 0.1777811f,-0.4204908f);
            result[ 40] = Vec2f(-0.2418083f,-0.7244869f);
            result[ 41] = Vec2f(-0.7410043f, 0.3613971f);
            result[ 42] = Vec2f( 0.2714298f,-0.6536949f);
            result[ 43] = Vec2f( 0.6769977f,-0.1069798f);
            result[ 44] = Vec2f(-0.2314163f, 0.3639393f);
            result[ 45] = Vec2f(-0.0830660f,-0.3616878f);
            result[ 46] = Vec2f( 0.2788768f, 0.4690994f);
            result[ 47] = Vec2f(-0.0030232f, 0.7439678f);
            result[ 48] = Vec2f(-0.1618754f,-0.8526429f);
            result[ 49] = Vec2f(-0.3818946f, 0.3738894f);
            result[ 50] = Vec2f(-0.5679302f, 0.2297134f);
            result[ 51] = Vec2f( 0.8634174f,-0.4882675f);
            result[ 52] = Vec2f( 0.4675055f, 0.4286852f);
            result[ 53] = Vec2f( 0.8487434f, 0.1238062f);
            result[ 54] = Vec2f(-0.8304414f,-0.5348642f);
            result[ 55] = Vec2f(-0.6847335f,-0.6163261f);
            result[ 56] = Vec2f( 0.4382063f,-0.1180393f);
            result[ 57] = Vec2f(-0.1453420f,-0.5806811f);
            result[ 58] = Vec2f( 0.7109237f, 0.6166135f);
            result[ 59] = Vec2f(-0.4081240f, 0.6777102f);
            result[ 60] = Vec2f( 0.4390087f, 0.8694390f);
            result[ 61] = Vec2f(-0.3975613f,-0.0631523f);
            result[ 62] = Vec2f(-0.5495973f,-0.0636752f);
            result[ 63] = Vec2f( 0.4192492f,-0.5972158f);
            result[ 64] = Vec2f(-0.5735832f,-0.7299238f);
            result[ 65] = Vec2f( 0.0547104f, 0.3032167f);
            result[ 66] = Vec2f(-0.1173095f, 0.5938561f);
            result[ 67] = Vec2f(-0.4338316f,-0.6580555f);
            result[ 68] = Vec2f(-0.8795874f, 0.4436061f);
            result[ 69] = Vec2f(-0.2801820f,-0.9570199f);
            result[ 70] = Vec2f(-0.2744038f, 0.2011783f);
            result[ 71] = Vec2f( 0.8458008f,-0.3344938f);
            result[ 72] = Vec2f(-0.0605315f,-0.9791890f);
            result[ 73] = Vec2f(-0.7851517f,-0.3085149f);
            result[ 74] = Vec2f(-0.8079908f,-0.1159261f);
            result[ 75] = Vec2f(-0.7550069f, 0.2100410f);
            result[ 76] = Vec2f( 0.5714439f,-0.6472839f);
            result[ 77] = Vec2f(-0.5197292f, 0.5568894f);
            result[ 78] = Vec2f( 0.4442910f,-0.4091573f);
            result[ 79] = Vec2f(-0.4065752f,-0.8332210f);
            result[ 80] = Vec2f( 0.2153113f, 0.0013063f);
            result[ 81] = Vec2f( 0.6511338f,-0.4261963f);
            result[ 82] = Vec2f( 0.3299360f, 0.1573807f);
            result[ 83] = Vec2f( 0.1751958f,-0.8346355f);
            result[ 84] = Vec2f( 0.0159093f,-0.7904001f);
            result[ 85] = Vec2f( 0.4151734f, 0.2888650f);
            result[ 86] = Vec2f(-0.9503192f,-0.1906677f);
            result[ 87] = Vec2f( 0.3945383f,-0.7751359f);
            result[ 88] = Vec2f(-0.6461394f,-0.1832678f);
            result[ 89] = Vec2f(-0.2106478f, 0.0227078f);
            result[ 90] = Vec2f(-0.2930324f, 0.7853358f);
            result[ 91] = Vec2f( 0.5874143f, 0.0830709f);
            result[ 92] = Vec2f( 0.0891551f, 0.1128361f);
            result[ 93] = Vec2f(-0.2099428f, 0.9477583f);
            result[ 94] = Vec2f(-0.0100227f, 0.9195217f);
            result[ 95] = Vec2f(-0.3898844f,-0.4908124f);
            result[ 96] = Vec2f(-0.9187867f,-0.3845811f);
            result[ 97] = Vec2f(-0.0582492f, 0.2053640f);
            result[ 98] = Vec2f( 0.3100981f,-0.2134551f);
            result[ 99] = Vec2f(-0.4128714f,-0.3010148f);
        }
        break;
        case 128:
        {
            result.resize(128);
            result[  0] = Vec2f(-0.5100209f, 0.2827512f);
            result[  1] = Vec2f(-0.2398890f,-0.3280737f);
            result[  2] = Vec2f( 0.8048412f, 0.4770068f);
            result[  3] = Vec2f( 0.7531213f, 0.3418040f);
            result[  4] = Vec2f(-0.0657640f, 0.8087333f);
            result[  5] = Vec2f(-0.5424771f, 0.1446817f);
            result[  6] = Vec2f(-0.8368671f,-0.1602424f);
            result[  7] = Vec2f(-0.1543732f, 0.2608304f);
            result[  8] = Vec2f( 0.2488267f,-0.2450605f);
            result[  9] = Vec2f(-0.2581684f, 0.7851061f);
            result[ 10] = Vec2f(-0.3017695f, 0.9272554f);
            result[ 11] = Vec2f(-0.9092886f,-0.0206692f);
            result[ 12] = Vec2f(-0.5737385f,-0.6381226f);
            result[ 13] = Vec2f( 0.3740838f,-0.7902877f);
            result[ 14] = Vec2f( 0.2455381f, 0.0876225f);
            result[ 15] = Vec2f(-0.2315532f, 0.0352073f);
            result[ 16] = Vec2f( 0.0793480f,-0.7397187f);
            result[ 17] = Vec2f(-0.1739990f,-0.5788706f);
            result[ 18] = Vec2f(-0.2766832f,-0.7191472f);
            result[ 19] = Vec2f(-0.4024699f,-0.5480365f);
            result[ 20] = Vec2f( 0.2845576f,-0.0695930f);
            result[ 21] = Vec2f( 0.0610982f,-0.5484891f);
            result[ 22] = Vec2f(-0.3499732f, 0.2134279f);
            result[ 23] = Vec2f(-0.5080345f,-0.7862911f);
            result[ 24] = Vec2f(-0.0808611f, 0.6707176f);
            result[ 25] = Vec2f(-0.9902173f,-0.1297870f);
            result[ 26] = Vec2f(-0.8272324f, 0.3934687f);
            result[ 27] = Vec2f( 0.6582102f,-0.2437022f);
            result[ 28] = Vec2f(-0.1081116f, 0.4069136f);
            result[ 29] = Vec2f( 0.2390152f, 0.4852147f);
            result[ 30] = Vec2f( 0.6132948f, 0.3867215f);
            result[ 31] = Vec2f(-0.8073227f, 0.2562267f);
            result[ 32] = Vec2f(-0.0877731f, 0.1372790f);
            result[ 33] = Vec2f(-0.7068511f, 0.0188577f);
            result[ 34] = Vec2f(-0.5863841f,-0.3577761f);
            result[ 35] = Vec2f( 0.9938517f, 0.0735192f);
            result[ 36] = Vec2f( 0.5003965f, 0.8089279f);
            result[ 37] = Vec2f(-0.9554938f,-0.2595502f);
            result[ 38] = Vec2f( 0.5656512f,-0.0951860f);
            result[ 39] = Vec2f(-0.4617966f,-0.4262882f);
            result[ 40] = Vec2f( 0.3795642f, 0.0749857f);
            result[ 41] = Vec2f( 0.3603169f, 0.8859296f);
            result[ 42] = Vec2f(-0.7100998f, 0.1647744f);
            result[ 43] = Vec2f( 0.8579998f,-0.3946407f);
            result[ 44] = Vec2f( 0.1983681f,-0.5946711f);
            result[ 45] = Vec2f(-0.0677955f,-0.0082370f);
            result[ 46] = Vec2f( 0.7193086f,-0.5468385f);
            result[ 47] = Vec2f(-0.7058167f, 0.6475085f);
            result[ 48] = Vec2f( 0.6433681f, 0.5799611f);
            result[ 49] = Vec2f( 0.2114540f, 0.8645396f);
            result[ 50] = Vec2f( 0.4786723f,-0.4391382f);
            result[ 51] = Vec2f(-0.4463258f, 0.4024497f);
            result[ 52] = Vec2f(-0.1306214f,-0.9521112f);
            result[ 53] = Vec2f(-0.8297464f, 0.1024526f);
            result[ 54] = Vec2f(-0.5324392f, 0.6428875f);
            result[ 55] = Vec2f(-0.3826777f,-0.3139729f);
            result[ 56] = Vec2f( 0.4085412f,-0.1735018f);
            result[ 57] = Vec2f(-0.5974731f, 0.7847365f);
            result[ 58] = Vec2f(-0.0796074f,-0.3594195f);
            result[ 59] = Vec2f( 0.1626610f,-0.9735964f);
            result[ 60] = Vec2f( 0.7969043f,-0.0643570f);
            result[ 61] = Vec2f(-0.9441192f, 0.2984797f);
            result[ 62] = Vec2f(-0.4206437f, 0.7611625f);
            result[ 63] = Vec2f( 0.1144596f, 0.1160001f);
            result[ 64] = Vec2f(-0.2790539f, 0.3993899f);
            result[ 65] = Vec2f(-0.3896471f, 0.6139387f);
            result[ 66] = Vec2f(-0.0775158f,-0.6839314f);
            result[ 67] = Vec2f( 0.4675748f, 0.6426128f);
            result[ 68] = Vec2f( 0.8363013f, 0.1271434f);
            result[ 69] = Vec2f(-0.3021886f,-0.9138032f);
            result[ 70] = Vec2f( 0.0039445f, 0.3270036f);
            result[ 71] = Vec2f( 0.1817887f, 0.2801877f);
            result[ 72] = Vec2f(-0.4947163f,-0.1905652f);
            result[ 73] = Vec2f( 0.9464989f,-0.0637910f);
            result[ 74] = Vec2f( 0.0010102f, 0.4853985f);
            result[ 75] = Vec2f(-0.4965384f, 0.0118405f);
            result[ 76] = Vec2f(-0.7326189f,-0.3446047f);
            result[ 77] = Vec2f( 0.8036495f,-0.2607304f);
            result[ 78] = Vec2f(-0.8802255f,-0.3771194f);
            result[ 79] = Vec2f( 0.1229968f,-0.4272476f);
            result[ 80] = Vec2f( 0.3959055f,-0.5989475f);
            result[ 81] = Vec2f( 0.7670896f, 0.6370147f);
            result[ 82] = Vec2f( 0.0538698f, 0.7354094f);
            result[ 83] = Vec2f(-0.7258399f,-0.6147825f);
            result[ 84] = Vec2f(-0.8007996f,-0.5042173f);
            result[ 85] = Vec2f(-0.7884435f, 0.5231727f);
            result[ 86] = Vec2f(-0.1652032f, 0.9008547f);
            result[ 87] = Vec2f( 0.2220401f, 0.7280650f);
            result[ 88] = Vec2f(-0.6056754f, 0.5137193f);
            result[ 89] = Vec2f(-0.4212795f,-0.6806591f);
            result[ 90] = Vec2f( 0.1242921f, 0.4037466f);
            result[ 91] = Vec2f( 0.3235483f, 0.2487466f);
            result[ 92] = Vec2f( 0.6185910f,-0.4255581f);
            result[ 93] = Vec2f(-0.9921292f, 0.1195123f);
            result[ 94] = Vec2f(-0.2587891f, 0.5858073f);
            result[ 95] = Vec2f( 0.3261027f,-0.4300863f);
            result[ 96] = Vec2f( 0.0479674f,-0.2875305f);
            result[ 97] = Vec2f(-0.6881825f,-0.1623296f);
            result[ 98] = Vec2f( 0.9638191f,-0.2349226f);
            result[ 99] = Vec2f(-0.6651574f,-0.7465115f);
            result[100] = Vec2f( 0.5146055f, 0.5067307f);
            result[101] = Vec2f( 0.6911660f, 0.1062514f);
            result[102] = Vec2f(-0.6830599f, 0.4051682f);
            result[103] = Vec2f( 0.6235275f,-0.6576239f);
            result[104] = Vec2f(-0.1325164f,-0.8135149f);
            result[105] = Vec2f( 0.6080853f, 0.7110277f);
            result[106] = Vec2f( 0.4823112f,-0.7094020f);
            result[107] = Vec2f(-0.3679625f,-0.0796929f);
            result[108] = Vec2f( 0.5473175f, 0.0870155f);
            result[109] = Vec2f( 0.1413382f, 0.6052825f);
            result[110] = Vec2f(-0.0186634f, 0.9466382f);
            result[111] = Vec2f( 0.2398407f,-0.7276645f);
            result[112] = Vec2f( 0.4252796f, 0.4074485f);
            result[113] = Vec2f( 0.2651311f,-0.8696506f);
            result[114] = Vec2f(-0.6376885f,-0.4843019f);
            result[115] = Vec2f( 0.3172017f, 0.6335183f);
            result[116] = Vec2f(-0.2570805f,-0.4724309f);
            result[117] = Vec2f(-0.1515849f,-0.2212974f);
            result[118] = Vec2f(-0.3656216f, 0.0638707f);
            result[119] = Vec2f(-0.2840514f,-0.1863133f);
            result[120] = Vec2f( 0.1308062f, 0.9708366f);
            result[121] = Vec2f( 0.5028393f,-0.8417178f);
            result[122] = Vec2f(-0.0291423f,-0.1551506f);
            result[123] = Vec2f( 0.5237542f, 0.2225828f);
            result[124] = Vec2f( 0.4130996f,-0.3069293f);
            result[125] = Vec2f( 0.0462606f,-0.9089898f);
            result[126] = Vec2f( 0.1611652f,-0.1241900f);
            result[127] = Vec2f( 0.9570345f, 0.2630224f);
        }
        break;
        case 256:
        {
            result.resize(256);
            result[  0] = Vec2f( 0.4715699f, 0.4571655f);
            result[  1] = Vec2f( 0.3590889f, 0.9201994f);
            result[  2] = Vec2f(-0.4518692f,-0.0718746f);
            result[  3] = Vec2f(-0.5331094f, 0.3269825f);
            result[  4] = Vec2f( 0.6778224f,-0.4228106f);
            result[  5] = Vec2f( 0.0979197f, 0.4413359f);
            result[  6] = Vec2f( 0.7260270f, 0.6867529f);
            result[  7] = Vec2f( 0.6945124f, 0.3253323f);
            result[  8] = Vec2f(-0.1497743f,-0.2351105f);
            result[  9] = Vec2f(-0.1432879f,-0.9845687f);
            result[ 10] = Vec2f(-0.6817619f, 0.7212509f);
            result[ 11] = Vec2f( 0.9773315f,-0.1788465f);
            result[ 12] = Vec2f(-0.7179987f,-0.3882750f);
            result[ 13] = Vec2f( 0.3501302f, 0.2619256f);
            result[ 14] = Vec2f(-0.5669193f, 0.0751048f);
            result[ 15] = Vec2f(-0.7642547f, 0.1144366f);
            result[ 16] = Vec2f( 0.0300846f,-0.6229676f);
            result[ 17] = Vec2f(-0.3492184f, 0.7246443f);
            result[ 18] = Vec2f(-0.5131892f, 0.4309027f);
            result[ 19] = Vec2f( 0.8338200f, 0.4863092f);
            result[ 20] = Vec2f(-0.0167139f, 0.2090348f);
            result[ 21] = Vec2f( 0.2209656f,-0.8295765f);
            result[ 22] = Vec2f(-0.1598265f, 0.3294444f);
            result[ 23] = Vec2f(-0.9424604f,-0.1799425f);
            result[ 24] = Vec2f(-0.0877493f,-0.8999488f);
            result[ 25] = Vec2f(-0.7814875f,-0.6198449f);
            result[ 26] = Vec2f( 0.6284997f,-0.1107032f);
            result[ 27] = Vec2f(-0.4335827f, 0.8961933f);
            result[ 28] = Vec2f(-0.6057810f, 0.2442155f);
            result[ 29] = Vec2f(-0.7180372f,-0.1095650f);
            result[ 30] = Vec2f(-0.9585745f,-0.0479081f);
            result[ 31] = Vec2f( 0.0598642f,-0.5330622f);
            result[ 32] = Vec2f(-0.1944456f, 0.4562850f);
            result[ 33] = Vec2f( 0.0313646f, 0.5168833f);
            result[ 34] = Vec2f( 0.7165918f,-0.6247835f);
            result[ 35] = Vec2f( 0.8857721f,-0.4033214f);
            result[ 36] = Vec2f(-0.0800425f,-0.1107968f);
            result[ 37] = Vec2f( 0.7033937f,-0.5218148f);
            result[ 38] = Vec2f(-0.2584668f, 0.1184238f);
            result[ 39] = Vec2f( 0.1558268f,-0.4182693f);
            result[ 40] = Vec2f( 0.6200305f, 0.6772834f);
            result[ 41] = Vec2f(-0.4634125f,-0.4379900f);
            result[ 42] = Vec2f(-0.4212110f,-0.6915097f);
            result[ 43] = Vec2f( 0.5950811f,-0.4802930f);
            result[ 44] = Vec2f(-0.0156904f, 0.6429234f);
            result[ 45] = Vec2f( 0.3482748f, 0.1687506f);
            result[ 46] = Vec2f( 0.7377779f, 0.4191611f);
            result[ 47] = Vec2f(-0.1009855f, 0.6012619f);
            result[ 48] = Vec2f( 0.0603895f, 0.9970402f);
            result[ 49] = Vec2f( 0.1586711f,-0.0151662f);
            result[ 50] = Vec2f( 0.7759391f, 0.1325525f);
            result[ 51] = Vec2f( 0.3458380f,-0.4492794f);
            result[ 52] = Vec2f(-0.9939626f, 0.0385580f);
            result[ 53] = Vec2f( 0.4001868f, 0.3682061f);
            result[ 54] = Vec2f(-0.7727840f,-0.5234371f);
            result[ 55] = Vec2f(-0.2555792f, 0.3303034f);
            result[ 56] = Vec2f( 0.4557577f, 0.2409841f);
            result[ 57] = Vec2f(-0.5806949f, 0.6926744f);
            result[ 58] = Vec2f(-0.0020717f,-0.2486418f);
            result[ 59] = Vec2f( 0.0158165f,-0.9076511f);
            result[ 60] = Vec2f( 0.4421102f, 0.8589296f);
            result[ 61] = Vec2f( 0.4414439f,-0.4399930f);
            result[ 62] = Vec2f( 0.0266554f,-0.0984197f);
            result[ 63] = Vec2f(-0.5191892f, 0.8315132f);
            result[ 64] = Vec2f( 0.1624647f, 0.3283877f);
            result[ 65] = Vec2f( 0.3865517f,-0.0097384f);
            result[ 66] = Vec2f(-0.2977483f,-0.5020629f);
            result[ 67] = Vec2f( 0.2470311f, 0.1325077f);
            result[ 68] = Vec2f( 0.9703888f, 0.1105175f);
            result[ 69] = Vec2f( 0.4090183f, 0.0925504f);
            result[ 70] = Vec2f(-0.8028294f,-0.1482733f);
            result[ 71] = Vec2f( 0.1665866f,-0.5851103f);
            result[ 72] = Vec2f( 0.6094476f, 0.3869199f);
            result[ 73] = Vec2f( 0.3518999f, 0.7884170f);
            result[ 74] = Vec2f( 0.1263669f, 0.9273195f);
            result[ 75] = Vec2f( 0.6081367f, 0.2619390f);
            result[ 76] = Vec2f( 0.2495492f, 0.5715667f);
            result[ 77] = Vec2f( 0.1212010f,-0.7003400f);
            result[ 78] = Vec2f(-0.1888173f,-0.4279464f);
            result[ 79] = Vec2f(-0.4171501f,-0.5534253f);
            result[ 80] = Vec2f(-0.6066649f, 0.7901601f);
            result[ 81] = Vec2f( 0.3140153f,-0.3275810f);
            result[ 82] = Vec2f( 0.1549515f, 0.5455064f);
            result[ 83] = Vec2f(-0.5584347f,-0.4641879f);
            result[ 84] = Vec2f(-0.2595644f,-0.3380910f);
            result[ 85] = Vec2f( 0.3852571f,-0.5424530f);
            result[ 86] = Vec2f( 0.8006883f,-0.5396930f);
            result[ 87] = Vec2f(-0.2718564f,-0.2169380f);
            result[ 88] = Vec2f( 0.9404898f, 0.0058762f);
            result[ 89] = Vec2f(-0.1352138f, 0.9200681f);
            result[ 90] = Vec2f(-0.9862669f, 0.1353054f);
            result[ 91] = Vec2f(-0.3146080f, 0.4082236f);
            result[ 92] = Vec2f( 0.7940844f, 0.2907424f);
            result[ 93] = Vec2f( 0.8286042f, 0.0466802f);
            result[ 94] = Vec2f( 0.5108656f,-0.6688035f);
            result[ 95] = Vec2f(-0.1759855f,-0.7438451f);
            result[ 96] = Vec2f(-0.1322207f, 0.8054290f);
            result[ 97] = Vec2f(-0.0051484f,-0.7963835f);
            result[ 98] = Vec2f(-0.7880949f,-0.2413236f);
            result[ 99] = Vec2f( 0.9255302f, 0.3028197f);
            result[100] = Vec2f( 0.0814066f,-0.3434824f);
            result[101] = Vec2f(-0.0412369f, 0.9750304f);
            result[102] = Vec2f( 0.2628719f,-0.4058964f);
            result[103] = Vec2f(-0.2281176f, 0.2393179f);
            result[104] = Vec2f( 0.5739869f, 0.1719819f);
            result[105] = Vec2f( 0.6824381f,-0.2228419f);
            result[106] = Vec2f( 0.4986081f, 0.3443960f);
            result[107] = Vec2f( 0.2196391f,-0.3128432f);
            result[108] = Vec2f(-0.0348008f,-0.0055487f);
            result[109] = Vec2f( 0.4653542f, 0.5508914f);
            result[110] = Vec2f(-0.3395878f,-0.9288309f);
            result[111] = Vec2f( 0.2617443f,-0.9623922f);
            result[112] = Vec2f( 0.5982728f,-0.5734630f);
            result[113] = Vec2f(-0.7320421f, 0.3441476f);
            result[114] = Vec2f( 0.3298435f,-0.8557597f);
            result[115] = Vec2f( 0.2414989f, 0.9700682f);
            result[116] = Vec2f( 0.7229561f,-0.0647247f);
            result[117] = Vec2f(-0.5473622f,-0.0366468f);
            result[118] = Vec2f(-0.9500914f, 0.2510533f);
            result[119] = Vec2f(-0.4978774f, 0.2062324f);
            result[120] = Vec2f(-0.0370948f,-0.9974731f);
            result[121] = Vec2f(-0.3248271f,-0.4098083f);
            result[122] = Vec2f( 0.2463639f, 0.0230325f);
            result[123] = Vec2f( 0.4562857f,-0.3088211f);
            result[124] = Vec2f(-0.4146432f, 0.8024352f);
            result[125] = Vec2f( 0.3002483f, 0.3412520f);
            result[126] = Vec2f(-0.4441081f,-0.8096184f);
            result[127] = Vec2f(-0.6494846f, 0.1469729f);
            result[128] = Vec2f(-0.1970180f,-0.5340305f);
            result[129] = Vec2f( 0.1582975f, 0.6692669f);
            result[130] = Vec2f( 0.2856060f,-0.0624381f);
            result[131] = Vec2f(-0.2978147f,-0.1100380f);
            result[132] = Vec2f( 0.2178177f, 0.4435161f);
            result[133] = Vec2f( 0.0306351f,-0.4407189f);
            result[134] = Vec2f(-0.8917545f, 0.1370921f);
            result[135] = Vec2f( 0.6298158f,-0.0125732f);
            result[136] = Vec2f(-0.3761199f, 0.1844667f);
            result[137] = Vec2f(-0.5164821f,-0.7465257f);
            result[138] = Vec2f( 0.9278548f,-0.0963264f);
            result[139] = Vec2f(-0.3675304f,-0.1728693f);
            result[140] = Vec2f(-0.4661275f,-0.3449219f);
            result[141] = Vec2f( 0.5235238f, 0.0851079f);
            result[142] = Vec2f( 0.4606154f,-0.8763652f);
            result[143] = Vec2f(-0.1937581f,-0.0974519f);
            result[144] = Vec2f(-0.7954490f, 0.4542460f);
            result[145] = Vec2f( 0.5859044f,-0.3529334f);
            result[146] = Vec2f(-0.5361705f,-0.2654960f);
            result[147] = Vec2f( 0.0658128f, 0.0188782f);
            result[148] = Vec2f(-0.6233899f,-0.1567689f);
            result[149] = Vec2f(-0.3784298f,-0.2865617f);
            result[150] = Vec2f( 0.8649573f,-0.1736228f);
            result[151] = Vec2f( 0.4966753f,-0.7849858f);
            result[152] = Vec2f( 0.7035520f,-0.3303345f);
            result[153] = Vec2f( 0.4392782f, 0.7090372f);
            result[154] = Vec2f(-0.0309376f,-0.3696007f);
            result[155] = Vec2f(-0.6802588f, 0.6268561f);
            result[156] = Vec2f(-0.3337726f,-0.8162601f);
            result[157] = Vec2f( 0.5364978f, 0.7191328f);
            result[158] = Vec2f(-0.2884920f, 0.5899489f);
            result[159] = Vec2f( 0.4345884f,-0.2151185f);
            result[160] = Vec2f( 0.3026493f, 0.4828470f);
            result[161] = Vec2f( 0.5941237f, 0.8032219f);
            result[162] = Vec2f(-0.3236088f, 0.2614498f);
            result[163] = Vec2f( 0.8892323f, 0.1763880f);
            result[164] = Vec2f(-0.4675735f, 0.0307096f);
            result[165] = Vec2f( 0.1602554f,-0.9276950f);
            result[166] = Vec2f( 0.6673058f, 0.1325836f);
            result[167] = Vec2f( 0.2959106f,-0.1803396f);
            result[168] = Vec2f( 0.2704381f, 0.8758754f);
            result[169] = Vec2f( 0.7220190f, 0.0454448f);
            result[170] = Vec2f( 0.4892442f,-0.5512637f);
            result[171] = Vec2f(-0.7821032f, 0.6079491f);
            result[172] = Vec2f( 0.5458181f, 0.6019267f);
            result[173] = Vec2f(-0.5519007f,-0.5722814f);
            result[174] = Vec2f( 0.2057768f,-0.1169270f);
            result[175] = Vec2f(-0.8713264f,-0.4536122f);
            result[176] = Vec2f( 0.2637047f,-0.6276751f);
            result[177] = Vec2f( 0.3432649f, 0.6909411f);
            result[178] = Vec2f(-0.6857793f, 0.4357483f);
            result[179] = Vec2f(-0.8001932f, 0.2552736f);
            result[180] = Vec2f(-0.6845875f,-0.6382553f);
            result[181] = Vec2f( 0.0838565f, 0.2088083f);
            result[182] = Vec2f( 0.6326663f, 0.5437722f);
            result[183] = Vec2f( 0.4608655f,-0.1171504f);
            result[184] = Vec2f(-0.0597350f, 0.3366162f);
            result[185] = Vec2f( 0.7485286f, 0.5292861f);
            result[186] = Vec2f(-0.0777932f, 0.4943697f);
            result[187] = Vec2f(-0.1808678f, 0.7090276f);
            result[188] = Vec2f(-0.6188119f,-0.7591207f);
            result[189] = Vec2f( 0.0376530f, 0.3651378f);
            result[190] = Vec2f(-0.1992897f, 0.0149752f);
            result[191] = Vec2f(-0.6775165f,-0.2517154f);
            result[192] = Vec2f( 0.2467005f,-0.5350434f);
            result[193] = Vec2f( 0.7186043f, 0.2183112f);
            result[194] = Vec2f(-0.8674996f, 0.3855878f);
            result[195] = Vec2f(-0.8475598f,-0.0464608f);
            result[196] = Vec2f(-0.1832868f, 0.5532165f);
            result[197] = Vec2f(-0.0139309f, 0.1059862f);
            result[198] = Vec2f( 0.7648560f,-0.1782805f);
            result[199] = Vec2f( 0.0757701f, 0.6076030f);
            result[200] = Vec2f( 0.8605040f,-0.3084160f);
            result[201] = Vec2f(-0.4132268f, 0.4521863f);
            result[202] = Vec2f(-0.6420689f,-0.0462519f);
            result[203] = Vec2f(-0.7303301f, 0.5299214f);
            result[204] = Vec2f(-0.3715519f, 0.0752146f);
            result[205] = Vec2f(-0.6192346f, 0.3701663f);
            result[206] = Vec2f( 0.7733930f,-0.4150966f);
            result[207] = Vec2f(-0.6851625f, 0.0597378f);
            result[208] = Vec2f(-0.2509425f,-0.6205519f);
            result[209] = Vec2f( 0.0751619f, 0.7601056f);
            result[210] = Vec2f(-0.2706618f, 0.7762617f);
            result[211] = Vec2f( 0.6286446f,-0.6635349f);
            result[212] = Vec2f( 0.3670291f,-0.6430801f);
            result[213] = Vec2f(-0.1608000f,-0.3315299f);
            result[214] = Vec2f( 0.1888249f, 0.2374382f);
            result[215] = Vec2f(-0.4164849f, 0.2999979f);
            result[216] = Vec2f( 0.1206746f,-0.2269065f);
            result[217] = Vec2f(-0.0232911f, 0.7367150f);
            result[218] = Vec2f(-0.1103567f, 0.0489811f);
            result[219] = Vec2f(-0.2718951f, 0.9527328f);
            result[220] = Vec2f(-0.3488507f,-0.6253702f);
            result[221] = Vec2f(-0.6315920f, 0.5177325f);
            result[222] = Vec2f(-0.7654315f, 0.0123545f);
            result[223] = Vec2f(-0.3346117f, 0.8652196f);
            result[224] = Vec2f( 0.8911998f, 0.4121280f);
            result[225] = Vec2f(-0.9567933f,-0.2756309f);
            result[226] = Vec2f(-0.0710823f,-0.6537905f);
            result[227] = Vec2f( 0.2199686f, 0.7962707f);
            result[228] = Vec2f( 0.2915965f,-0.7457029f);
            result[229] = Vec2f(-0.5465652f, 0.5746363f);
            result[230] = Vec2f(-0.2947631f,-0.7235715f);
            result[231] = Vec2f( 0.0939426f,-0.9944397f);
            result[232] = Vec2f(-0.0982852f,-0.4788018f);
            result[233] = Vec2f( 0.3730073f, 0.5947105f);
            result[234] = Vec2f( 0.0900487f,-0.8321360f);
            result[235] = Vec2f(-0.5803509f,-0.6731107f);
            result[236] = Vec2f( 0.5297930f,-0.0411580f);
            result[237] = Vec2f(-0.5000741f,-0.1644035f);
            result[238] = Vec2f( 0.1443491f, 0.0788471f);
            result[239] = Vec2f(-0.4908286f, 0.7415285f);
            result[240] = Vec2f(-0.8633562f,-0.3107704f);
            result[241] = Vec2f(-0.6565002f,-0.5149921f);
            result[242] = Vec2f( 0.6411871f,-0.7666851f);
            result[243] = Vec2f(-0.2262291f,-0.8879169f);
            result[244] = Vec2f( 0.8241976f,-0.0843996f);
            result[245] = Vec2f(-0.3303545f,-0.0131280f);
            result[246] = Vec2f(-0.6194428f,-0.3522120f);
            result[247] = Vec2f( 0.5789659f,-0.1928011f);
            result[248] = Vec2f(-0.0085083f, 0.8873807f);
            result[249] = Vec2f(-0.7058736f, 0.2414945f);
            result[250] = Vec2f(-0.0931899f, 0.1548269f);
            result[251] = Vec2f(-0.2329511f, 0.8640153f);
            result[252] = Vec2f(-0.4133889f, 0.5820367f);
            result[253] = Vec2f(-0.8961660f, 0.0344605f);
            result[254] = Vec2f(-0.8432744f, 0.5357863f);
            result[255] = Vec2f( 0.3869305f,-0.7539107f);
        }
        break;
    }

    return result;
}

OSG_SYSTEM_DLLMAPPING std::vector<Vec2f> getPoissonQuad(UInt32 size)
{
    std::vector<Vec2f> result;

    switch (size)
    {
        case  9:
        {
            result.resize(9);
            result[  0] = Vec2f(-0.9797890f, 0.2216778f);
            result[  1] = Vec2f(-0.8503724f,-0.9348822f);
            result[  2] = Vec2f(-0.9436040f, 0.8756473f);
            result[  3] = Vec2f(-0.2576077f, 0.8520150f);
            result[  4] = Vec2f( 0.0653803f,-0.9750062f);
            result[  5] = Vec2f( 0.1035379f, 0.1764668f);
            result[  6] = Vec2f(-0.4919435f,-0.3361163f);
            result[  7] = Vec2f( 0.6739537f, 0.5038955f);
            result[  8] = Vec2f( 0.4669335f,-0.4275637f);
        }
        break;
        case 16:
        {
            result.resize(16);
            result[  0] = Vec2f(-0.5664003f, 0.0285754f);
            result[  1] = Vec2f( 0.8351059f,-0.8718475f);
            result[  2] = Vec2f( 0.3178899f,-0.9425222f);
            result[  3] = Vec2f(-0.0217807f, 0.7176927f);
            result[  4] = Vec2f( 0.7352630f,-0.3650730f);
            result[  5] = Vec2f(-0.6119728f, 0.5303607f);
            result[  6] = Vec2f( 0.9509487f, 0.9375250f);
            result[  7] = Vec2f(-0.0977933f, 0.2196479f);
            result[  8] = Vec2f(-0.4778661f, 0.9845697f);
            result[  9] = Vec2f(-0.5284349f,-0.8601943f);
            result[ 10] = Vec2f(-0.8427849f,-0.4373165f);
            result[ 11] = Vec2f( 0.5215144f, 0.7421589f);
            result[ 12] = Vec2f(-0.9769735f, 0.9769144f);
            result[ 13] = Vec2f( 0.0410836f,-0.5527254f);
            result[ 14] = Vec2f( 0.4374580f, 0.0601779f);
            result[ 15] = Vec2f( 0.9131285f, 0.4657326f);
        }
        break;
        case 25:
        {
            result.resize(25);
            result[  0] = Vec2f( 0.4053059f,-0.9350870f);
            result[  1] = Vec2f( 0.7206881f,-0.2211166f);
            result[  2] = Vec2f( 0.1132565f,-0.2921960f);
            result[  3] = Vec2f(-0.6410999f,-0.9295320f);
            result[  4] = Vec2f( 0.4206409f,-0.5362394f);
            result[  5] = Vec2f(-0.3915016f, 0.0576766f);
            result[  6] = Vec2f( 0.5615214f, 0.8009390f);
            result[  7] = Vec2f(-0.2144535f, 0.8092217f);
            result[  8] = Vec2f(-0.6478752f, 0.9856064f);
            result[  9] = Vec2f(-0.0247034f,-0.9889123f);
            result[ 10] = Vec2f(-0.2327027f,-0.6810077f);
            result[ 11] = Vec2f(-0.0211462f, 0.0710866f);
            result[ 12] = Vec2f( 0.3258822f, 0.4309196f);
            result[ 13] = Vec2f( 0.3590981f, 0.0374473f);
            result[ 14] = Vec2f(-0.4993685f, 0.5502989f);
            result[ 15] = Vec2f( 0.1807501f, 0.7889049f);
            result[ 16] = Vec2f( 0.9331986f, 0.8017976f);
            result[ 17] = Vec2f(-0.8247542f, 0.3331810f);
            result[ 18] = Vec2f(-0.3996222f,-0.3138513f);
            result[ 19] = Vec2f(-0.7828161f,-0.0435919f);
            result[ 20] = Vec2f( 0.8052127f, 0.2169384f);
            result[ 21] = Vec2f(-0.7718477f,-0.5416758f);
            result[ 22] = Vec2f(-0.9992298f, 0.6603050f);
            result[ 23] = Vec2f( 0.8726931f,-0.6793380f);
            result[ 24] = Vec2f(-0.0568725f, 0.4373543f);
        }
        break;
        case 32:
        {
            result.resize(32);
            result[  0] = Vec2f( 0.9858162f,-0.6019916f);
            result[  1] = Vec2f( 0.2122632f,-0.0924957f);
            result[  2] = Vec2f(-0.9608110f, 0.1949184f);
            result[  3] = Vec2f(-0.4118671f, 0.6334320f);
            result[  4] = Vec2f(-0.5586072f,-0.9453603f);
            result[  5] = Vec2f(-0.7137406f,-0.0961602f);
            result[  6] = Vec2f(-0.3518618f,-0.3616422f);
            result[  7] = Vec2f(-0.9213435f,-0.3745058f);
            result[  8] = Vec2f( 0.2861202f,-0.8880737f);
            result[  9] = Vec2f(-0.1316128f,-0.0853707f);
            result[ 10] = Vec2f( 0.6512817f,-0.5370959f);
            result[ 11] = Vec2f( 0.6741676f, 0.8900490f);
            result[ 12] = Vec2f( 0.3451080f,-0.3995177f);
            result[ 13] = Vec2f(-0.9705759f,-0.8000549f);
            result[ 14] = Vec2f(-0.0859581f, 0.3359647f);
            result[ 15] = Vec2f(-0.2007535f, 0.9237018f);
            result[ 16] = Vec2f( 0.9473318f, 0.5186697f);
            result[ 17] = Vec2f( 0.9099543f,-0.9389284f);
            result[ 18] = Vec2f(-0.9884782f, 0.9925935f);
            result[ 19] = Vec2f( 0.7586811f,-0.1742557f);
            result[ 20] = Vec2f( 0.1724362f, 0.8769046f);
            result[ 21] = Vec2f(-0.6500093f,-0.5743183f);
            result[ 22] = Vec2f( 0.0232916f,-0.5159860f);
            result[ 23] = Vec2f(-0.7132776f, 0.7859734f);
            result[ 24] = Vec2f( 0.9963361f, 0.8534011f);
            result[ 25] = Vec2f(-0.0789868f,-0.9638681f);
            result[ 26] = Vec2f( 0.3856691f, 0.4655716f);
            result[ 27] = Vec2f(-0.7574412f, 0.4606253f);
            result[ 28] = Vec2f(-0.3230068f,-0.7164395f);
            result[ 29] = Vec2f( 0.5228937f, 0.1312406f);
            result[ 30] = Vec2f(-0.4243749f, 0.1136265f);
            result[ 31] = Vec2f( 0.8525591f, 0.2003653f);
        }
        break;
        case 64:
        {
            result.resize(64);
            result[  0] = Vec2f(-0.5307409f,-0.5790783f);
            result[  1] = Vec2f( 0.1946661f, 0.9638687f);
            result[  2] = Vec2f(-0.7769496f, 0.7976676f);
            result[  3] = Vec2f(-0.3539636f, 0.3284692f);
            result[  4] = Vec2f( 0.5716084f,-0.9759686f);
            result[  5] = Vec2f( 0.8281707f, 0.0187370f);
            result[  6] = Vec2f( 0.0400383f,-0.9556962f);
            result[  7] = Vec2f(-0.9607916f, 0.5617123f);
            result[  8] = Vec2f( 0.9568460f,-0.1835579f);
            result[  9] = Vec2f( 0.9894568f,-0.6950046f);
            result[ 10] = Vec2f( 0.5675648f, 0.6555637f);
            result[ 11] = Vec2f(-0.8561316f, 0.3282501f);
            result[ 12] = Vec2f(-0.0280987f, 0.0452619f);
            result[ 13] = Vec2f(-0.0237736f, 0.3115819f);
            result[ 14] = Vec2f( 0.8982167f, 0.9166547f);
            result[ 15] = Vec2f(-0.0575796f, 0.9466469f);
            result[ 16] = Vec2f(-0.0343168f,-0.2189085f);
            result[ 17] = Vec2f(-0.4238211f,-0.1399252f);
            result[ 18] = Vec2f( 0.1409190f, 0.6601793f);
            result[ 19] = Vec2f( 0.8049694f,-0.8166356f);
            result[ 20] = Vec2f(-0.7535638f,-0.6083595f);
            result[ 21] = Vec2f( 0.9970877f, 0.4031465f);
            result[ 22] = Vec2f(-0.2924875f,-0.3349634f);
            result[ 23] = Vec2f(-0.9750010f,-0.1169176f);
            result[ 24] = Vec2f( 0.5540730f, 0.2510178f);
            result[ 25] = Vec2f(-0.5774678f, 0.9008918f);
            result[ 26] = Vec2f(-0.7268184f,-0.9191710f);
            result[ 27] = Vec2f( 0.9963512f,-0.9757406f);
            result[ 28] = Vec2f(-0.1820680f, 0.7600851f);
            result[ 29] = Vec2f(-0.0805717f,-0.7407347f);
            result[ 30] = Vec2f( 0.6889493f, 0.4353350f);
            result[ 31] = Vec2f(-0.3621897f, 0.9972538f);
            result[ 32] = Vec2f(-0.0954734f, 0.5296423f);
            result[ 33] = Vec2f( 0.3802184f,-0.8073934f);
            result[ 34] = Vec2f(-0.9918940f, 0.1482493f);
            result[ 35] = Vec2f( 0.6340168f, 0.9005778f);
            result[ 36] = Vec2f(-0.7390260f, 0.5423402f);
            result[ 37] = Vec2f( 0.8255001f, 0.2405185f);
            result[ 38] = Vec2f( 0.6181517f,-0.6531740f);
            result[ 39] = Vec2f( 0.3096519f,-0.3977243f);
            result[ 40] = Vec2f(-0.5548699f,-0.3307939f);
            result[ 41] = Vec2f(-0.5218133f, 0.4990178f);
            result[ 42] = Vec2f(-0.4092394f, 0.6949356f);
            result[ 43] = Vec2f( 0.6399696f,-0.4204135f);
            result[ 44] = Vec2f( 0.3545241f, 0.8077438f);
            result[ 45] = Vec2f( 0.0739039f,-0.4423719f);
            result[ 46] = Vec2f( 0.2002909f, 0.1420058f);
            result[ 47] = Vec2f( 0.5186307f,-0.2111670f);
            result[ 48] = Vec2f( 0.5358897f, 0.0273190f);
            result[ 49] = Vec2f(-0.6006353f, 0.1042111f);
            result[ 50] = Vec2f(-0.5002611f,-0.9372303f);
            result[ 51] = Vec2f(-0.2252204f,-0.9569741f);
            result[ 52] = Vec2f(-0.2641637f,-0.5817966f);
            result[ 53] = Vec2f( 0.8776017f,-0.4938586f);
            result[ 54] = Vec2f(-0.9820411f,-0.8500301f);
            result[ 55] = Vec2f(-0.9364319f,-0.4177348f);
            result[ 56] = Vec2f(-0.7654191f,-0.2159873f);
            result[ 57] = Vec2f(-0.9592258f, 0.9308888f);
            result[ 58] = Vec2f( 0.9384105f, 0.6449528f);
            result[ 59] = Vec2f( 0.4668852f, 0.4569547f);
            result[ 60] = Vec2f(-0.3170303f, 0.0809567f);
            result[ 61] = Vec2f( 0.1444356f,-0.7392364f);
            result[ 62] = Vec2f( 0.3000630f,-0.1444242f);
            result[ 63] = Vec2f( 0.2263786f, 0.3979774f);
        }
        break;
        case 100:
        {
            result.resize(100);
            result[  0] = Vec2f(-0.4050590f, 0.7914536f);
            result[  1] = Vec2f( 0.9988179f, 0.0216820f);
            result[  2] = Vec2f(-0.4269943f,-0.9573712f);
            result[  3] = Vec2f( 0.1467483f, 0.0322970f);
            result[  4] = Vec2f( 0.1128204f, 0.4806126f);
            result[  5] = Vec2f(-0.9245501f, 0.3169078f);
            result[  6] = Vec2f( 0.9958661f,-0.6544352f);
            result[  7] = Vec2f( 0.7904785f, 0.4046330f);
            result[  8] = Vec2f( 0.6543471f,-0.5227774f);
            result[  9] = Vec2f( 0.4490080f,-0.7769365f);
            result[ 10] = Vec2f(-0.5179431f, 0.1651996f);
            result[ 11] = Vec2f(-0.1096064f,-0.5880840f);
            result[ 12] = Vec2f( 0.9983535f,-0.3692169f);
            result[ 13] = Vec2f(-0.9425268f,-0.4928927f);
            result[ 14] = Vec2f(-0.1823394f, 0.9455966f);
            result[ 15] = Vec2f( 0.4202166f, 0.5775105f);
            result[ 16] = Vec2f( 0.5624274f, 0.7017738f);
            result[ 17] = Vec2f( 0.1822432f,-0.6191882f);
            result[ 18] = Vec2f( 0.7245033f,-0.9927095f);
            result[ 19] = Vec2f(-0.9344053f,-0.0623844f);
            result[ 20] = Vec2f( 0.2039266f,-0.1730622f);
            result[ 21] = Vec2f( 0.6776744f, 0.5669584f);
            result[ 22] = Vec2f(-0.2203826f, 0.7433670f);
            result[ 23] = Vec2f( 0.8287152f,-0.7033370f);
            result[ 24] = Vec2f( 0.3549248f,-0.0380669f);
            result[ 25] = Vec2f( 0.1980730f, 0.7821236f);
            result[ 26] = Vec2f( 0.2017269f,-0.9312707f);
            result[ 27] = Vec2f( 0.0117822f,-0.3796696f);
            result[ 28] = Vec2f(-0.1163118f, 0.1044214f);
            result[ 29] = Vec2f( 0.7790922f, 0.7358897f);
            result[ 30] = Vec2f(-0.6061865f, 0.9121418f);
            result[ 31] = Vec2f( 0.3257132f, 0.3276961f);
            result[ 32] = Vec2f(-0.5123040f, 0.3692186f);
            result[ 33] = Vec2f( 0.5835873f,-0.2477248f);
            result[ 34] = Vec2f( 0.1724156f, 0.9596539f);
            result[ 35] = Vec2f( 0.2431762f, 0.6126806f);
            result[ 36] = Vec2f(-0.5019544f,-0.0428760f);
            result[ 37] = Vec2f( 0.6607895f,-0.0730232f);
            result[ 38] = Vec2f(-0.4331419f,-0.6343936f);
            result[ 39] = Vec2f( 0.7089980f, 0.2468104f);
            result[ 40] = Vec2f(-0.6744659f,-0.6377324f);
            result[ 41] = Vec2f(-0.7094527f, 0.3439063f);
            result[ 42] = Vec2f( 0.0359726f, 0.8520045f);
            result[ 43] = Vec2f( 0.8629243f,-0.2678249f);
            result[ 44] = Vec2f(-0.8498759f,-0.6485726f);
            result[ 45] = Vec2f(-0.7253227f,-0.9263160f);
            result[ 46] = Vec2f( 0.8672776f,-0.0890815f);
            result[ 47] = Vec2f( 0.9620225f, 0.8210813f);
            result[ 48] = Vec2f(-0.9632835f,-0.8956956f);
            result[ 49] = Vec2f(-0.9355956f,-0.2403665f);
            result[ 50] = Vec2f( 0.0085835f,-0.7526634f);
            result[ 51] = Vec2f( 0.3737726f,-0.2204019f);
            result[ 52] = Vec2f(-0.2880997f,-0.1282658f);
            result[ 53] = Vec2f(-0.7476304f, 0.7798917f);
            result[ 54] = Vec2f(-0.7862653f,-0.3594363f);
            result[ 55] = Vec2f( 0.9187030f, 0.6338222f);
            result[ 56] = Vec2f( 0.5854955f, 0.9290534f);
            result[ 57] = Vec2f(-0.7080588f,-0.0051981f);
            result[ 58] = Vec2f( 0.1931218f,-0.3895342f);
            result[ 59] = Vec2f(-0.2414259f,-0.8806247f);
            result[ 60] = Vec2f( 0.3695450f, 0.7413322f);
            result[ 61] = Vec2f( 0.5349766f, 0.2487162f);
            result[ 62] = Vec2f( 0.3505578f, 0.9600435f);
            result[ 63] = Vec2f( 0.2650452f,-0.7712985f);
            result[ 64] = Vec2f( 0.4295698f,-0.9790596f);
            result[ 65] = Vec2f( 0.7724074f, 0.0858946f);
            result[ 66] = Vec2f(-0.0719633f,-0.9227122f);
            result[ 67] = Vec2f(-0.3513883f, 0.6229635f);
            result[ 68] = Vec2f(-0.9155261f, 0.4997702f);
            result[ 69] = Vec2f(-0.2760967f, 0.1613288f);
            result[ 70] = Vec2f( 0.5199109f, 0.4338303f);
            result[ 71] = Vec2f(-0.9045007f, 0.6837285f);
            result[ 72] = Vec2f( 0.9551370f,-0.9103554f);
            result[ 73] = Vec2f(-0.3601432f, 0.9936060f);
            result[ 74] = Vec2f(-0.0286745f, 0.2849908f);
            result[ 75] = Vec2f( 0.1543667f, 0.2904525f);
            result[ 76] = Vec2f(-0.9864629f, 0.1556194f);
            result[ 77] = Vec2f( 0.9968252f, 0.3732604f);
            result[ 78] = Vec2f(-0.2337749f, 0.4147080f);
            result[ 79] = Vec2f(-0.0373064f, 0.5859237f);
            result[ 80] = Vec2f( 0.8617958f, 0.9654735f);
            result[ 81] = Vec2f( 0.6565024f,-0.8114790f);
            result[ 82] = Vec2f(-0.2411914f,-0.7080820f);
            result[ 83] = Vec2f(-0.6583539f,-0.2008510f);
            result[ 84] = Vec2f(-0.4221036f,-0.2969011f);
            result[ 85] = Vec2f( 0.4588631f,-0.6009108f);
            result[ 86] = Vec2f( 0.9357275f, 0.2014469f);
            result[ 87] = Vec2f( 0.3731456f,-0.4367957f);
            result[ 88] = Vec2f( 0.8420354f,-0.4650097f);
            result[ 89] = Vec2f( 0.5849522f, 0.0852689f);
            result[ 90] = Vec2f(-0.2098370f,-0.4441822f);
            result[ 91] = Vec2f(-0.7912103f, 0.1463839f);
            result[ 92] = Vec2f(-0.5625450f,-0.4399536f);
            result[ 93] = Vec2f(-0.6126533f, 0.6413081f);
            result[ 94] = Vec2f( 0.3471342f, 0.1392738f);
            result[ 95] = Vec2f(-0.8992310f, 0.9804879f);
            result[ 96] = Vec2f(-0.1229029f,-0.1826305f);
            result[ 97] = Vec2f(-0.7369919f, 0.5178242f);
            result[ 98] = Vec2f( 0.0345314f,-0.1008392f);
            result[ 99] = Vec2f(-0.5875375f,-0.8088377f);
        }
        break;
        case 128:
        {
            result.resize(128);
            result[  0] = Vec2f( 0.3207452f, 0.6525286f);
            result[  1] = Vec2f(-0.0520768f,-0.9526348f);
            result[  2] = Vec2f( 0.8050054f,-0.7933589f);
            result[  3] = Vec2f(-0.7036996f,-0.5885752f);
            result[  4] = Vec2f(-0.1766388f, 0.2094835f);
            result[  5] = Vec2f(-0.5684239f,-0.9940206f);
            result[  6] = Vec2f(-0.3945379f,-0.5661786f);
            result[  7] = Vec2f(-0.7752694f, 0.3192722f);
            result[  8] = Vec2f( 0.7824433f, 0.6234294f);
            result[  9] = Vec2f( 0.9699429f,-0.3284537f);
            result[ 10] = Vec2f(-0.4684039f, 0.7741308f);
            result[ 11] = Vec2f( 0.8974981f,-0.6127071f);
            result[ 12] = Vec2f( 0.6409712f, 0.6930043f);
            result[ 13] = Vec2f(-0.8310968f, 0.4851447f);
            result[ 14] = Vec2f( 0.2084745f,-0.9583836f);
            result[ 15] = Vec2f( 0.5247774f,-0.1556487f);
            result[ 16] = Vec2f( 0.9852269f, 0.4921081f);
            result[ 17] = Vec2f( 0.3665501f,-0.6756146f);
            result[ 18] = Vec2f( 0.5040013f,-0.7403913f);
            result[ 19] = Vec2f(-0.0214744f,-0.2475811f);
            result[ 20] = Vec2f( 0.5382572f, 0.3778937f);
            result[ 21] = Vec2f(-0.9534776f,-0.1940419f);
            result[ 22] = Vec2f(-0.3316877f, 0.7098404f);
            result[ 23] = Vec2f( 0.7326025f,-0.6541333f);
            result[ 24] = Vec2f(-0.7597629f,-0.4458371f);
            result[ 25] = Vec2f( 0.1359320f, 0.6420968f);
            result[ 26] = Vec2f( 0.9816263f, 0.0953417f);
            result[ 27] = Vec2f(-0.9890044f, 0.5523193f);
            result[ 28] = Vec2f( 0.9860042f,-0.0708575f);
            result[ 29] = Vec2f( 0.8869053f,-0.4545650f);
            result[ 30] = Vec2f(-0.0207205f, 0.3271880f);
            result[ 31] = Vec2f( 0.9866219f, 0.6890364f);
            result[ 32] = Vec2f( 0.7089791f, 0.2047805f);
            result[ 33] = Vec2f(-0.5897774f,-0.2072414f);
            result[ 34] = Vec2f(-0.7796162f,-0.0766515f);
            result[ 35] = Vec2f(-0.1148849f, 0.8359712f);
            result[ 36] = Vec2f(-0.3596486f, 0.0535471f);
            result[ 37] = Vec2f( 0.3349077f, 0.4260693f);
            result[ 38] = Vec2f( 0.3200041f,-0.8202316f);
            result[ 39] = Vec2f(-0.1102946f,-0.4975176f);
            result[ 40] = Vec2f( 0.0305758f, 0.9487194f);
            result[ 41] = Vec2f( 0.2556005f,-0.1756324f);
            result[ 42] = Vec2f(-0.9593028f, 0.1138331f);
            result[ 43] = Vec2f( 0.8222411f, 0.0917941f);
            result[ 44] = Vec2f(-0.3886561f, 0.3437221f);
            result[ 45] = Vec2f(-0.9732282f, 0.9878789f);
            result[ 46] = Vec2f(-0.9237224f,-0.4780353f);
            result[ 47] = Vec2f( 0.8546716f, 0.2924825f);
            result[ 48] = Vec2f(-0.0365831f, 0.0911609f);
            result[ 49] = Vec2f(-0.2738246f,-0.6755689f);
            result[ 50] = Vec2f( 0.9884769f,-0.7515427f);
            result[ 51] = Vec2f(-0.8626425f,-0.9324710f);
            result[ 52] = Vec2f(-0.9677519f,-0.0390408f);
            result[ 53] = Vec2f( 0.4114367f,-0.0515610f);
            result[ 54] = Vec2f(-0.7199115f,-0.2896693f);
            result[ 55] = Vec2f( 0.9235539f,-0.9309583f);
            result[ 56] = Vec2f( 0.8030541f, 0.4539361f);
            result[ 57] = Vec2f(-0.5998722f,-0.7935287f);
            result[ 58] = Vec2f( 0.1753042f,-0.4433743f);
            result[ 59] = Vec2f( 0.6532888f,-0.0088687f);
            result[ 60] = Vec2f( 0.4979885f, 0.8641518f);
            result[ 61] = Vec2f(-0.1444410f,-0.1544323f);
            result[ 62] = Vec2f(-0.3290126f, 0.5272213f);
            result[ 63] = Vec2f(-0.6915693f, 0.7730160f);
            result[ 64] = Vec2f( 0.6973562f,-0.9910282f);
            result[ 65] = Vec2f( 0.7950284f, 0.7983170f);
            result[ 66] = Vec2f(-0.8627261f, 0.8630475f);
            result[ 67] = Vec2f(-0.5386585f, 0.2639904f);
            result[ 68] = Vec2f(-0.1159495f, 0.9898649f);
            result[ 69] = Vec2f(-0.9744255f,-0.7501242f);
            result[ 70] = Vec2f(-0.3448256f,-0.2013278f);
            result[ 71] = Vec2f(-0.7357750f, 0.1279944f);
            result[ 72] = Vec2f(-0.0825210f, 0.6178721f);
            result[ 73] = Vec2f(-0.9648637f, 0.3653246f);
            result[ 74] = Vec2f(-0.1883697f, 0.0159963f);
            result[ 75] = Vec2f(-0.2696508f, 0.9451947f);
            result[ 76] = Vec2f( 0.0757419f,-0.1156694f);
            result[ 77] = Vec2f( 0.3866746f, 0.9784714f);
            result[ 78] = Vec2f( 0.8533744f,-0.1495055f);
            result[ 79] = Vec2f( 0.5289172f,-0.3651562f);
            result[ 80] = Vec2f( 0.5554345f,-0.9179306f);
            result[ 81] = Vec2f(-0.5265525f, 0.0718156f);
            result[ 82] = Vec2f( 0.4846790f, 0.1133820f);
            result[ 83] = Vec2f(-0.0703638f,-0.6681863f);
            result[ 84] = Vec2f( 0.0934038f, 0.2059690f);
            result[ 85] = Vec2f( 0.0432334f,-0.5603397f);
            result[ 86] = Vec2f(-0.4741786f,-0.0918003f);
            result[ 87] = Vec2f( 0.2509317f, 0.2970318f);
            result[ 88] = Vec2f(-0.5931227f, 0.6440322f);
            result[ 89] = Vec2f( 0.6709980f, 0.8988718f);
            result[ 90] = Vec2f( 0.6781317f,-0.1612773f);
            result[ 91] = Vec2f( 0.4049320f,-0.2522179f);
            result[ 92] = Vec2f(-0.7190260f,-0.9857425f);
            result[ 93] = Vec2f(-0.1834716f,-0.8642455f);
            result[ 94] = Vec2f( 0.5056568f, 0.5278858f);
            result[ 95] = Vec2f( 0.2210071f, 0.0770850f);
            result[ 96] = Vec2f( 0.6524035f,-0.5026854f);
            result[ 97] = Vec2f( 0.4713753f, 0.6925542f);
            result[ 98] = Vec2f( 0.1423502f, 0.4894907f);
            result[ 99] = Vec2f(-0.2355148f,-0.3481616f);
            result[100] = Vec2f( 0.1031215f,-0.7992734f);
            result[101] = Vec2f(-0.5528386f,-0.6427330f);
            result[102] = Vec2f(-0.4569792f,-0.8454791f);
            result[103] = Vec2f( 0.3008870f, 0.8524250f);
            result[104] = Vec2f( 0.6722407f,-0.3157374f);
            result[105] = Vec2f(-0.7448186f, 0.6094567f);
            result[106] = Vec2f(-0.6117806f, 0.9034828f);
            result[107] = Vec2f(-0.5068295f,-0.4372454f);
            result[108] = Vec2f(-0.8351765f,-0.6834898f);
            result[109] = Vec2f( 0.9128705f, 0.8954235f);
            result[110] = Vec2f(-0.7343383f, 0.9990046f);
            result[111] = Vec2f(-0.7539407f,-0.8171229f);
            result[112] = Vec2f( 0.2191217f,-0.6221620f);
            result[113] = Vec2f( 0.0041059f,-0.3995290f);
            result[114] = Vec2f( 0.4056121f, 0.2889991f);
            result[115] = Vec2f(-0.1621891f, 0.4480554f);
            result[116] = Vec2f( 0.4711231f,-0.5088985f);
            result[117] = Vec2f(-0.6404666f, 0.3867359f);
            result[118] = Vec2f(-0.9350023f, 0.7269351f);
            result[119] = Vec2f( 0.1451346f,-0.2828999f);
            result[120] = Vec2f(-0.4669564f, 0.9896045f);
            result[121] = Vec2f( 0.2278314f, 0.9938099f);
            result[122] = Vec2f(-0.3409534f,-0.9727388f);
            result[123] = Vec2f(-0.5151496f, 0.5100142f);
            result[124] = Vec2f( 0.3373435f,-0.3869886f);
            result[125] = Vec2f( 0.4169725f,-0.9870197f);
            result[126] = Vec2f( 0.6539112f,-0.8033284f);
            result[127] = Vec2f( 0.1339984f, 0.8251487f);
        }
        break;
        case 256:
        {
            result.resize(256);
            result[  0] = Vec2f( 0.5967965f,-0.5918460f);
            result[  1] = Vec2f( 0.8178675f, 0.7143202f);
            result[  2] = Vec2f(-0.5770552f, 0.7222437f);
            result[  3] = Vec2f( 0.3057660f, 0.7222697f);
            result[  4] = Vec2f(-0.5562170f, 0.5595734f);
            result[  5] = Vec2f(-0.5699719f, 0.0359718f);
            result[  6] = Vec2f(-0.6632971f, 0.8380513f);
            result[  7] = Vec2f(-0.2747971f,-0.0708444f);
            result[  8] = Vec2f(-0.4024369f, 0.0662310f);
            result[  9] = Vec2f(-0.6515043f,-0.7983566f);
            result[ 10] = Vec2f(-0.5296037f,-0.7772065f);
            result[ 11] = Vec2f( 0.8424127f, 0.4789654f);
            result[ 12] = Vec2f( 0.1018565f, 0.0078630f);
            result[ 13] = Vec2f(-0.7648734f,-0.6300445f);
            result[ 14] = Vec2f(-0.9926641f, 0.6197802f);
            result[ 15] = Vec2f( 0.6289324f, 0.3303956f);
            result[ 16] = Vec2f( 0.0998298f,-0.7965266f);
            result[ 17] = Vec2f( 0.3542883f, 0.6092484f);
            result[ 18] = Vec2f(-0.7482342f, 0.5540065f);
            result[ 19] = Vec2f(-0.7435118f,-0.7326694f);
            result[ 20] = Vec2f(-0.6824155f, 0.9633834f);
            result[ 21] = Vec2f( 0.1039952f, 0.2692708f);
            result[ 22] = Vec2f(-0.4880664f, 0.8286576f);
            result[ 23] = Vec2f( 0.3692317f, 0.1087921f);
            result[ 24] = Vec2f( 0.2338228f,-0.5656389f);
            result[ 25] = Vec2f(-0.9698452f,-0.9981006f);
            result[ 26] = Vec2f( 0.4603935f,-0.2295656f);
            result[ 27] = Vec2f( 0.5009331f,-0.4766361f);
            result[ 28] = Vec2f( 0.1428590f, 0.8735874f);
            result[ 29] = Vec2f(-0.4724162f, 0.3962147f);
            result[ 30] = Vec2f( 0.2164228f, 0.6666446f);
            result[ 31] = Vec2f( 0.9540119f, 0.4407744f);
            result[ 32] = Vec2f(-0.0068718f,-0.8308588f);
            result[ 33] = Vec2f( 0.3944349f, 0.8203551f);
            result[ 34] = Vec2f(-0.0360160f,-0.6543511f);
            result[ 35] = Vec2f(-0.9483243f, 0.7390741f);
            result[ 36] = Vec2f(-0.5524197f,-0.3441184f);
            result[ 37] = Vec2f(-0.9823250f,-0.2285770f);
            result[ 38] = Vec2f(-0.9106586f, 0.2102156f);
            result[ 39] = Vec2f(-0.5186691f,-0.4593276f);
            result[ 40] = Vec2f( 0.8551310f, 0.8840563f);
            result[ 41] = Vec2f(-0.9923820f, 0.3993504f);
            result[ 42] = Vec2f(-0.0749876f, 0.0368611f);
            result[ 43] = Vec2f(-0.1922564f,-0.2029763f);
            result[ 44] = Vec2f(-0.6875724f, 0.2723216f);
            result[ 45] = Vec2f(-0.5161979f,-0.9313812f);
            result[ 46] = Vec2f( 0.1144570f,-0.3747648f);
            result[ 47] = Vec2f( 0.5048983f, 0.6065245f);
            result[ 48] = Vec2f( 0.5691162f, 0.1079087f);
            result[ 49] = Vec2f(-0.2111801f,-0.5503558f);
            result[ 50] = Vec2f(-0.1316119f,-0.0701171f);
            result[ 51] = Vec2f( 0.8451359f,-0.2317137f);
            result[ 52] = Vec2f(-0.2301022f, 0.8060448f);
            result[ 53] = Vec2f( 0.4869527f,-0.6187925f);
            result[ 54] = Vec2f(-0.0098425f, 0.3808484f);
            result[ 55] = Vec2f(-0.6922423f,-0.0983449f);
            result[ 56] = Vec2f(-0.5663266f, 0.1417260f);
            result[ 57] = Vec2f( 0.7314808f,-0.4215528f);
            result[ 58] = Vec2f( 0.5677220f, 0.8954293f);
            result[ 59] = Vec2f( 0.0715890f,-0.6886643f);
            result[ 60] = Vec2f( 0.2758832f,-0.4577746f);
            result[ 61] = Vec2f( 0.9969851f,-0.9966446f);
            result[ 62] = Vec2f( 0.7738535f,-0.9971246f);
            result[ 63] = Vec2f(-0.7583245f,-0.8686762f);
            result[ 64] = Vec2f(-0.6316463f, 0.4342344f);
            result[ 65] = Vec2f( 0.9062047f,-0.9241026f);
            result[ 66] = Vec2f( 0.2242501f,-0.2059872f);
            result[ 67] = Vec2f(-0.8457742f,-0.7946991f);
            result[ 68] = Vec2f(-0.3486677f,-0.9516944f);
            result[ 69] = Vec2f(-0.1472721f,-0.6358739f);
            result[ 70] = Vec2f(-0.9955188f,-0.3518823f);
            result[ 71] = Vec2f(-0.6768975f, 0.0395436f);
            result[ 72] = Vec2f( 0.4849756f,-0.8459987f);
            result[ 73] = Vec2f(-0.4743153f,-0.2694919f);
            result[ 74] = Vec2f( 0.7664750f, 0.6071497f);
            result[ 75] = Vec2f(-0.7470764f,-0.3759552f);
            result[ 76] = Vec2f( 0.4556274f,-0.9815691f);
            result[ 77] = Vec2f( 0.8765635f, 0.3532829f);
            result[ 78] = Vec2f(-0.5025133f, 0.9331875f);
            result[ 79] = Vec2f( 0.3507833f,-0.9275302f);
            result[ 80] = Vec2f( 0.3768814f,-0.8252943f);
            result[ 81] = Vec2f( 0.5620000f,-0.3410295f);
            result[ 82] = Vec2f( 0.6400291f, 0.0298792f);
            result[ 83] = Vec2f(-0.0724495f, 0.5673144f);
            result[ 84] = Vec2f( 0.9285374f,-0.5794789f);
            result[ 85] = Vec2f(-0.3703654f,-0.7170991f);
            result[ 86] = Vec2f( 0.4270953f, 0.9221495f);
            result[ 87] = Vec2f( 0.9776132f, 0.6076735f);
            result[ 88] = Vec2f( 0.2537438f,-0.9674143f);
            result[ 89] = Vec2f( 0.7836590f, 0.3017983f);
            result[ 90] = Vec2f( 0.6690431f,-0.2610875f);
            result[ 91] = Vec2f(-0.1938036f,-0.8505827f);
            result[ 92] = Vec2f(-0.7402742f, 0.3776811f);
            result[ 93] = Vec2f( 0.6485471f, 0.1929059f);
            result[ 94] = Vec2f( 0.2576835f, 0.8172885f);
            result[ 95] = Vec2f( 0.8959374f, 0.2362843f);
            result[ 96] = Vec2f( 0.2346380f, 0.0624417f);
            result[ 97] = Vec2f(-0.0165635f,-0.0825828f);
            result[ 98] = Vec2f( 0.8532969f,-0.4017092f);
            result[ 99] = Vec2f(-0.8970073f,-0.4062821f);
            result[100] = Vec2f( 0.7081144f, 0.8722301f);
            result[101] = Vec2f(-0.9061505f,-0.6631093f);
            result[102] = Vec2f(-0.8071790f,-0.4847341f);
            result[103] = Vec2f(-0.4421519f, 0.5373440f);
            result[104] = Vec2f( 0.2533380f,-0.0969523f);
            result[105] = Vec2f( 0.9335556f,-0.3182806f);
            result[106] = Vec2f( 0.0709637f, 0.9545047f);
            result[107] = Vec2f( 0.1744395f,-0.8946812f);
            result[108] = Vec2f( 0.1168026f, 0.3999912f);
            result[109] = Vec2f(-0.9375596f,-0.8975059f);
            result[110] = Vec2f(-0.0604832f,-0.9366500f);
            result[111] = Vec2f(-0.4164284f,-0.0507935f);
            result[112] = Vec2f( 0.9808134f, 0.9235301f);
            result[113] = Vec2f( 0.2273824f, 0.2609011f);
            result[114] = Vec2f(-0.6370041f, 0.6331114f);
            result[115] = Vec2f(-0.9987234f,-0.7504221f);
            result[116] = Vec2f( 0.2412475f, 0.4159633f);
            result[117] = Vec2f(-0.1181360f,-0.4765247f);
            result[118] = Vec2f( 0.7155836f,-0.5818020f);
            result[119] = Vec2f( 0.9958642f,-0.7726275f);
            result[120] = Vec2f( 0.1857738f,-0.6657456f);
            result[121] = Vec2f( 0.6572024f,-0.1557823f);
            result[122] = Vec2f(-0.6921411f, 0.1491563f);
            result[123] = Vec2f( 0.9019058f,-0.0015494f);
            result[124] = Vec2f( 0.7879798f, 0.1930441f);
            result[125] = Vec2f(-0.9469897f, 0.5018073f);
            result[126] = Vec2f( 0.4898111f, 0.2969931f);
            result[127] = Vec2f( 0.3177221f, 0.2064071f);
            result[128] = Vec2f( 0.6361841f, 0.9854115f);
            result[129] = Vec2f(-0.2932387f, 0.1709073f);
            result[130] = Vec2f(-0.9669525f, 0.0566721f);
            result[131] = Vec2f( 0.3457177f,-0.2628668f);
            result[132] = Vec2f(-0.5589384f,-0.0757295f);
            result[133] = Vec2f( 0.8033371f,-0.5193424f);
            result[134] = Vec2f(-0.1114863f, 0.4703227f);
            result[135] = Vec2f( 0.0927356f, 0.7466599f);
            result[136] = Vec2f( 0.6553330f, 0.4363822f);
            result[137] = Vec2f( 0.9981749f,-0.6581354f);
            result[138] = Vec2f( 0.1235297f,-0.1111394f);
            result[139] = Vec2f( 0.7229073f, 0.1101532f);
            result[140] = Vec2f( 0.1458254f,-0.4878944f);
            result[141] = Vec2f( 0.3801476f,-0.0953482f);
            result[142] = Vec2f(-0.0824646f,-0.2157699f);
            result[143] = Vec2f(-0.9952090f, 0.9291421f);
            result[144] = Vec2f( 0.2187251f,-0.3120081f);
            result[145] = Vec2f(-0.0095385f, 0.1498274f);
            result[146] = Vec2f(-0.7346037f,-0.2678048f);
            result[147] = Vec2f( 0.8741405f, 0.5859358f);
            result[148] = Vec2f(-0.2595847f, 0.0599236f);
            result[149] = Vec2f( 0.7582557f, 0.4142097f);
            result[150] = Vec2f( 0.3404472f,-0.5457048f);
            result[151] = Vec2f( 0.7621664f,-0.3192839f);
            result[152] = Vec2f( 0.7154508f, 0.7551583f);
            result[153] = Vec2f(-0.0007998f, 0.4869033f);
            result[154] = Vec2f( 0.6094235f,-0.4404778f);
            result[155] = Vec2f(-0.1043147f, 0.9993412f);
            result[156] = Vec2f( 0.0306664f,-0.2214172f);
            result[157] = Vec2f(-0.1412541f, 0.8647487f);
            result[158] = Vec2f( 0.4858493f, 0.7397380f);
            result[159] = Vec2f(-0.8257871f, 0.9243704f);
            result[160] = Vec2f( 0.7935212f,-0.7432057f);
            result[161] = Vec2f( 0.2576818f, 0.5244519f);
            result[162] = Vec2f(-0.6895955f,-0.5575747f);
            result[163] = Vec2f(-0.9058148f, 0.9914680f);
            result[164] = Vec2f( 0.7679338f,-0.1171606f);
            result[165] = Vec2f( 0.5869114f,-0.0755630f);
            result[166] = Vec2f(-0.2864898f,-0.7947167f);
            result[167] = Vec2f(-0.2263494f,-0.3925938f);
            result[168] = Vec2f(-0.1039110f,-0.3244938f);
            result[169] = Vec2f(-0.2156796f,-0.9595469f);
            result[170] = Vec2f( 0.1322924f,-0.9999176f);
            result[171] = Vec2f(-0.2356321f, 0.6638767f);
            result[172] = Vec2f( 0.4110610f,-0.4167099f);
            result[173] = Vec2f(-0.3535615f, 0.7552127f);
            result[174] = Vec2f( 0.0472103f,-0.9241366f);
            result[175] = Vec2f(-0.2214561f, 0.4774109f);
            result[176] = Vec2f( 0.0495361f, 0.5797404f);
            result[177] = Vec2f( 0.7422273f, 0.0034235f);
            result[178] = Vec2f(-0.7999847f, 0.1670084f);
            result[179] = Vec2f(-0.3674167f, 0.3939545f);
            result[180] = Vec2f(-0.2935510f, 0.2904660f);
            result[181] = Vec2f( 0.6582850f,-0.7657145f);
            result[182] = Vec2f(-0.4006772f, 0.2117702f);
            result[183] = Vec2f( 0.3628340f,-0.7000432f);
            result[184] = Vec2f(-0.2613286f,-0.6707823f);
            result[185] = Vec2f(-0.9188517f, 0.8513510f);
            result[186] = Vec2f(-0.1374003f, 0.7090124f);
            result[187] = Vec2f( 0.3761212f, 0.3411529f);
            result[188] = Vec2f( 0.2674236f, 0.9459136f);
            result[189] = Vec2f( 0.7065496f,-0.8739459f);
            result[190] = Vec2f(-0.6430181f,-0.4609393f);
            result[191] = Vec2f( 0.6350024f, 0.5441839f);
            result[192] = Vec2f( 0.5106504f, 0.9966428f);
            result[193] = Vec2f( 0.6169267f, 0.6712238f);
            result[194] = Vec2f( 0.5132232f, 0.4149231f);
            result[195] = Vec2f(-0.4500664f,-0.5459928f);
            result[196] = Vec2f(-0.9011751f,-0.2980802f);
            result[197] = Vec2f(-0.8621784f, 0.6280239f);
            result[198] = Vec2f(-0.8072605f,-0.9860339f);
            result[199] = Vec2f(-0.3405154f,-0.2892914f);
            result[200] = Vec2f( 0.2657046f,-0.7666253f);
            result[201] = Vec2f(-0.8281394f, 0.0455068f);
            result[202] = Vec2f( 0.9826880f, 0.3157597f);
            result[203] = Vec2f( 0.4601587f, 0.1883742f);
            result[204] = Vec2f(-0.4157161f,-0.3777019f);
            result[205] = Vec2f( 0.5537654f,-0.7359555f);
            result[206] = Vec2f(-0.4918276f, 0.6517087f);
            result[207] = Vec2f(-0.1284081f, 0.2092682f);
            result[208] = Vec2f(-0.8745393f, 0.3397857f);
            result[209] = Vec2f(-0.0450802f, 0.9087442f);
            result[210] = Vec2f(-0.3730206f, 0.9267514f);
            result[211] = Vec2f(-0.1516512f, 0.3680699f);
            result[212] = Vec2f(-0.0186499f, 0.2603939f);
            result[213] = Vec2f( 0.1708747f, 0.9919446f);
            result[214] = Vec2f(-0.5302494f,-0.1772408f);
            result[215] = Vec2f(-0.7856429f, 0.7424290f);
            result[216] = Vec2f(-0.1598014f, 0.1030499f);
            result[217] = Vec2f( 0.8930557f,-0.6878951f);
            result[218] = Vec2f(-0.9938396f, 0.2921662f);
            result[219] = Vec2f( 0.9613435f,-0.1379938f);
            result[220] = Vec2f(-0.2148511f, 0.9700285f);
            result[221] = Vec2f( 0.0112175f, 0.6799566f);
            result[222] = Vec2f(-0.2963480f,-0.4811865f);
            result[223] = Vec2f( 0.8246523f, 0.0711806f);
            result[224] = Vec2f(-0.5440875f,-0.6212012f);
            result[225] = Vec2f( 0.4058247f, 0.5076065f);
            result[226] = Vec2f( 0.0707641f,-0.5652899f);
            result[227] = Vec2f(-0.8217213f, 0.4696834f);
            result[228] = Vec2f(-0.0276494f,-0.4236882f);
            result[229] = Vec2f(-0.6492741f,-0.9319471f);
            result[230] = Vec2f(-0.9985343f,-0.4614705f);
            result[231] = Vec2f(-0.3355785f, 0.5504321f);
            result[232] = Vec2f(-0.8289224f,-0.2167880f);
            result[233] = Vec2f(-0.8479844f,-0.0749034f);
            result[234] = Vec2f(-0.3598893f,-0.6128111f);
            result[235] = Vec2f(-0.3928360f,-0.1949041f);
            result[236] = Vec2f( 0.6056707f, 0.7776905f);
            result[237] = Vec2f(-0.9450225f,-0.5544428f);
            result[238] = Vec2f( 0.8236455f,-0.8482678f);
            result[239] = Vec2f(-0.6251223f,-0.2420724f);
            result[240] = Vec2f( 0.9768686f,-0.4820965f);
            result[241] = Vec2f(-0.5650983f, 0.3009155f);
            result[242] = Vec2f( 0.9651824f, 0.1005720f);
            result[243] = Vec2f(-0.1648347f,-0.7390298f);
            result[244] = Vec2f( 0.3282350f, 0.0061055f);
            result[245] = Vec2f( 0.4677500f, 0.0307726f);
            result[246] = Vec2f(-0.4207494f,-0.8117563f);
            result[247] = Vec2f( 0.7933364f, 0.9712857f);
            result[248] = Vec2f(-0.6443409f,-0.6897114f);
            result[249] = Vec2f( 0.1421379f, 0.5314653f);
            result[250] = Vec2f(-0.9952386f,-0.0716109f);
            result[251] = Vec2f( 0.6230385f,-0.9456325f);
            result[252] = Vec2f( 0.1463827f, 0.1634301f);
            result[253] = Vec2f(-0.1779800f, 0.5723271f);
            result[254] = Vec2f( 0.9184637f, 0.7696924f);
            result[255] = Vec2f(-0.0172576f, 0.7878885f);
        }
        break;
    }
    
    return result;
}

OSG_SYSTEM_DLLMAPPING std::vector<Vec3f> getPoissonSphere(UInt32 size)
{
    std::vector<Vec3f> result;

    switch (size)
    {
        case  9:
        {
            result.resize(9);
            result[  0] = Vec3f(-0.2997894f, 0.3658447f,-0.7783957f);
            result[  1] = Vec3f(-0.4212942f, 0.4244998f, 0.7451055f);
            result[  2] = Vec3f(-0.0111042f, 0.8223417f, 0.0338421f);
            result[  3] = Vec3f( 0.3863010f,-0.1936648f, 0.5366848f);
            result[  4] = Vec3f( 0.0251915f,-0.9313267f, 0.3022467f);
            result[  5] = Vec3f(-0.3129666f,-0.4328218f,-0.6105143f);
            result[  6] = Vec3f( 0.7853624f, 0.5454825f, 0.2524261f);
            result[  7] = Vec3f( 0.5742402f, 0.0922021f,-0.4654194f);
            result[  8] = Vec3f(-0.7025644f,-0.0845082f, 0.1103923f);
        }
        break;
        case 16:
        {
            result.resize(16);
            result[  0] = Vec3f( 0.3307405f,-0.5997091f, 0.1086566f);
            result[  1] = Vec3f( 0.4565175f, 0.6136081f, 0.4557650f);
            result[  2] = Vec3f(-0.5273117f, 0.5549206f, 0.6097919f);
            result[  3] = Vec3f(-0.2379528f,-0.5441094f, 0.5946561f);
            result[  4] = Vec3f( 0.8553271f, 0.1060690f,-0.0096647f);
            result[  5] = Vec3f( 0.4319175f, 0.7687331f,-0.2451535f);
            result[  6] = Vec3f(-0.5120273f,-0.1681580f,-0.8221165f);
            result[  7] = Vec3f( 0.0689009f, 0.0547601f, 0.4515302f);
            result[  8] = Vec3f( 0.5386875f,-0.1932411f,-0.7125721f);
            result[  9] = Vec3f(-0.2213290f, 0.8659228f,-0.4323594f);
            result[ 10] = Vec3f( 0.7783265f,-0.0200663f, 0.6254674f);
            result[ 11] = Vec3f(-0.1575490f, 0.9579737f, 0.2247126f);
            result[ 12] = Vec3f(-0.7574698f,-0.1944156f, 0.0992531f);
            result[ 13] = Vec3f( 0.0366952f, 0.2986690f,-0.6737213f);
            result[ 14] = Vec3f(-0.1845390f,-0.6472869f,-0.5307689f);
            result[ 15] = Vec3f(-0.5061721f, 0.2962868f,-0.3028651f);
        }
        break;
        case 25:
        {
            result.resize(25);
            result[  0] = Vec3f(-0.3666624f,-0.2956966f,-0.8383597f);
            result[  1] = Vec3f(-0.8620715f,-0.2228673f,-0.0003141f);
            result[  2] = Vec3f(-0.4088029f, 0.8517172f, 0.2680010f);
            result[  3] = Vec3f( 0.1510261f, 0.7912995f, 0.0894094f);
            result[  4] = Vec3f( 0.6300682f, 0.4173945f,-0.0956136f);
            result[  5] = Vec3f( 0.3469684f,-0.1672739f,-0.0263568f);
            result[  6] = Vec3f(-0.1690888f,-0.3001042f,-0.2605057f);
            result[  7] = Vec3f(-0.2483518f, 0.2388858f, 0.6831138f);
            result[  8] = Vec3f(-0.0049533f,-0.8735417f, 0.3641897f);
            result[  9] = Vec3f( 0.1563098f, 0.6412787f, 0.6500190f);
            result[ 10] = Vec3f( 0.5510955f,-0.7491827f,-0.0592989f);
            result[ 11] = Vec3f( 0.3234915f,-0.5672899f,-0.5713836f);
            result[ 12] = Vec3f( 0.0306065f, 0.6209575f,-0.7740467f);
            result[ 13] = Vec3f(-0.5014381f, 0.5291281f,-0.1802068f);
            result[ 14] = Vec3f( 0.2302747f,-0.0378593f,-0.8892535f);
            result[ 15] = Vec3f( 0.5672432f, 0.1343141f, 0.5963175f);
            result[ 16] = Vec3f(-0.7068210f, 0.2876335f, 0.2739447f);
            result[ 17] = Vec3f(-0.1816870f, 0.1132145f, 0.1115425f);
            result[ 18] = Vec3f(-0.6478149f,-0.6755251f,-0.2841651f);
            result[ 19] = Vec3f( 0.0358624f,-0.2389482f, 0.5322082f);
            result[ 20] = Vec3f( 0.6676657f, 0.0608968f,-0.5566205f);
            result[ 21] = Vec3f(-0.5938736f, 0.2220936f,-0.7166679f);
            result[ 22] = Vec3f(-0.6617773f,-0.3605012f, 0.5610604f);
            result[ 23] = Vec3f(-0.0054534f,-0.8561311f,-0.2181856f);
            result[ 24] = Vec3f( 0.8479866f,-0.3185240f, 0.1850882f);
        }
        break;
        case 32:
        {
            result.resize(32);
            result[  0] = Vec3f( 0.4090183f,-0.8677807f,-0.1546086f);
            result[  1] = Vec3f( 0.2293127f, 0.0338534f,-0.7683904f);
            result[  2] = Vec3f( 0.8679687f, 0.0663462f,-0.1310406f);
            result[  3] = Vec3f(-0.9856808f, 0.0256373f, 0.0250696f);
            result[  4] = Vec3f(-0.0556619f,-0.8151625f, 0.1468914f);
            result[  5] = Vec3f(-0.1760567f, 0.6300292f,-0.2867625f);
            result[  6] = Vec3f( 0.5203483f,-0.5323094f, 0.6333389f);
            result[  7] = Vec3f(-0.0193029f,-0.8298541f,-0.4820858f);
            result[  8] = Vec3f( 0.6322392f,-0.5174796f, 0.1329948f);
            result[  9] = Vec3f( 0.3734641f, 0.5442268f,-0.7264485f);
            result[ 10] = Vec3f(-0.1785964f,-0.4712024f,-0.7899271f);
            result[ 11] = Vec3f(-0.1078357f,-0.1660352f,-0.2592781f);
            result[ 12] = Vec3f(-0.7626584f, 0.2990788f,-0.3532635f);
            result[ 13] = Vec3f( 0.0028905f,-0.4876135f, 0.6378820f);
            result[ 14] = Vec3f(-0.3769348f, 0.5251791f,-0.7431056f);
            result[ 15] = Vec3f(-0.3505915f, 0.0192291f,-0.6820812f);
            result[ 16] = Vec3f(-0.2489459f, 0.4037162f, 0.8769615f);
            result[ 17] = Vec3f(-0.6383895f, 0.7588358f,-0.0409167f);
            result[ 18] = Vec3f(-0.2409654f, 0.2404503f, 0.0897270f);
            result[ 19] = Vec3f(-0.5911058f, 0.2662200f, 0.4584603f);
            result[ 20] = Vec3f( 0.3685287f, 0.0883462f,-0.1801487f);
            result[ 21] = Vec3f( 0.6216199f,-0.3584099f,-0.4169245f);
            result[ 22] = Vec3f(-0.5290120f,-0.6330529f, 0.2554054f);
            result[ 23] = Vec3f( 0.0550210f,-0.1159483f, 0.2842686f);
            result[ 24] = Vec3f( 0.5926481f, 0.0515981f, 0.3224722f);
            result[ 25] = Vec3f( 0.4208111f, 0.6380694f, 0.5535686f);
            result[ 26] = Vec3f( 0.6916966f, 0.1620193f,-0.5975146f);
            result[ 27] = Vec3f(-0.0834001f, 0.8085744f, 0.3557179f);
            result[ 28] = Vec3f( 0.2145407f, 0.1996782f, 0.7475648f);
            result[ 29] = Vec3f( 0.3175064f, 0.6165199f,-0.0282183f);
            result[ 30] = Vec3f(-0.7102835f,-0.5205408f,-0.2533619f);
            result[ 31] = Vec3f(-0.4769318f,-0.2876011f, 0.6439545f);
        }
        break;
        case 64:
        {
            result.resize(64);
            result[  0] = Vec3f( 0.6173450f, 0.2344486f, 0.6592574f);
            result[  1] = Vec3f(-0.3719741f, 0.8504249f, 0.0427926f);
            result[  2] = Vec3f( 0.0403227f, 0.3937986f, 0.1554803f);
            result[  3] = Vec3f(-0.0509572f, 0.7391343f, 0.3223995f);
            result[  4] = Vec3f( 0.6958857f, 0.4562190f,-0.4877199f);
            result[  5] = Vec3f(-0.2252692f, 0.7971376f,-0.3426219f);
            result[  6] = Vec3f(-0.7910440f, 0.1578263f, 0.5250360f);
            result[  7] = Vec3f( 0.2835935f, 0.2211879f,-0.4218034f);
            result[  8] = Vec3f( 0.0785831f,-0.3412430f, 0.3404326f);
            result[  9] = Vec3f(-0.3362423f,-0.2739637f, 0.6557033f);
            result[ 10] = Vec3f(-0.7009929f,-0.0314348f,-0.1909382f);
            result[ 11] = Vec3f( 0.0107499f,-0.3868070f,-0.7699366f);
            result[ 12] = Vec3f( 0.9004612f,-0.2139195f, 0.0740788f);
            result[ 13] = Vec3f(-0.1406411f,-0.5448427f,-0.1870838f);
            result[ 14] = Vec3f(-0.6079508f,-0.6768126f,-0.4119002f);
            result[ 15] = Vec3f( 0.4877850f,-0.2706907f,-0.6927043f);
            result[ 16] = Vec3f(-0.9312373f, 0.1800545f, 0.1389844f);
            result[ 17] = Vec3f( 0.6465573f,-0.6078396f, 0.0498164f);
            result[ 18] = Vec3f(-0.1673228f,-0.0476570f,-0.4495574f);
            result[ 19] = Vec3f( 0.0687170f, 0.0956116f, 0.4429839f);
            result[ 20] = Vec3f(-0.8634448f,-0.3790779f,-0.2789450f);
            result[ 21] = Vec3f(-0.5945755f, 0.4561448f,-0.1620995f);
            result[ 22] = Vec3f( 0.5134887f, 0.0747037f, 0.2821544f);
            result[ 23] = Vec3f(-0.3442746f, 0.1628613f,-0.0164845f);
            result[ 24] = Vec3f(-0.2672212f,-0.6809093f, 0.6727068f);
            result[ 25] = Vec3f(-0.2768458f, 0.5778737f, 0.7590990f);
            result[ 26] = Vec3f(-0.5517049f,-0.2547934f,-0.6496073f);
            result[ 27] = Vec3f(-0.3493027f, 0.3793660f,-0.4628308f);
            result[ 28] = Vec3f( 0.7120495f,-0.1188682f,-0.3157300f);
            result[ 29] = Vec3f( 0.3518162f,-0.8529555f, 0.1713870f);
            result[ 30] = Vec3f( 0.0701042f,-0.8979779f,-0.1136259f);
            result[ 31] = Vec3f(-0.2591028f,-0.6440755f,-0.6586869f);
            result[ 32] = Vec3f(-0.4899647f,-0.8140614f,-0.0537706f);
            result[ 33] = Vec3f(-0.0261663f, 0.0577527f, 0.8326730f);
            result[ 34] = Vec3f(-0.4579374f, 0.1467327f, 0.7292072f);
            result[ 35] = Vec3f( 0.8110173f,-0.1319826f, 0.4826752f);
            result[ 36] = Vec3f( 0.0412679f,-0.4109982f, 0.7591105f);
            result[ 37] = Vec3f(-0.0114368f, 0.4756029f,-0.6271186f);
            result[ 38] = Vec3f( 0.1296008f, 0.6713142f,-0.2044638f);
            result[ 39] = Vec3f(-0.0999628f,-0.1578153f,-0.0199250f);
            result[ 40] = Vec3f(-0.3429537f, 0.4775685f, 0.3404644f);
            result[ 41] = Vec3f( 0.4223536f,-0.2961848f, 0.5762295f);
            result[ 42] = Vec3f( 0.3166121f,-0.1571956f, 0.0210173f);
            result[ 43] = Vec3f(-0.4597757f,-0.3310515f,-0.1284034f);
            result[ 44] = Vec3f(-0.6131530f, 0.1618844f,-0.7203369f);
            result[ 45] = Vec3f(-0.3110694f,-0.5298375f, 0.2617934f);
            result[ 46] = Vec3f(-0.1454407f, 0.1340451f,-0.8212321f);
            result[ 47] = Vec3f( 0.5597670f, 0.3945016f, 0.0462121f);
            result[ 48] = Vec3f( 0.8830807f, 0.2339358f, 0.3328353f);
            result[ 49] = Vec3f( 0.6413776f,-0.4981836f,-0.3602820f);
            result[ 50] = Vec3f(-0.8434096f, 0.2765089f,-0.4299440f);
            result[ 51] = Vec3f(-0.6559711f,-0.1006943f, 0.1948289f);
            result[ 52] = Vec3f( 0.4352653f, 0.8290665f, 0.1739408f);
            result[ 53] = Vec3f( 0.5258256f, 0.7503129f,-0.2634918f);
            result[ 54] = Vec3f( 0.2233677f, 0.0277442f,-0.9007685f);
            result[ 55] = Vec3f( 0.4548386f, 0.5083539f, 0.4200779f);
            result[ 56] = Vec3f( 0.2637035f,-0.2856552f,-0.3428850f);
            result[ 57] = Vec3f( 0.0198877f,-0.8886827f, 0.3722448f);
            result[ 58] = Vec3f( 0.2145003f, 0.4002945f, 0.7814665f);
            result[ 59] = Vec3f( 0.9270840f, 0.2697845f,-0.1114231f);
            result[ 60] = Vec3f(-0.7094480f,-0.3822064f, 0.5278672f);
            result[ 61] = Vec3f( 0.3115621f,-0.6672162f,-0.6162971f);
            result[ 62] = Vec3f(-0.7449781f,-0.5412383f, 0.0702935f);
            result[ 63] = Vec3f( 0.5827307f, 0.1115794f,-0.7069787f);
        }
        break;
        case 100:
        {
            result.resize(100);
            result[  0] = Vec3f( 0.1017110f, 0.8121974f,-0.0935796f);
            result[  1] = Vec3f(-0.2468916f, 0.4712216f,-0.2078730f);
            result[  2] = Vec3f(-0.3628901f, 0.1804944f, 0.8223565f);
            result[  3] = Vec3f( 0.2144052f, 0.5042224f, 0.2999862f);
            result[  4] = Vec3f( 0.0388713f,-0.1716401f, 0.8610028f);
            result[  5] = Vec3f( 0.6742916f,-0.4462851f,-0.0975943f);
            result[  6] = Vec3f( 0.3196907f,-0.3184335f,-0.0295469f);
            result[  7] = Vec3f(-0.6290628f,-0.3645706f, 0.3838394f);
            result[  8] = Vec3f(-0.3166823f,-0.9321638f, 0.1065438f);
            result[  9] = Vec3f(-0.9387295f, 0.3050106f, 0.0388874f);
            result[ 10] = Vec3f( 0.0625286f,-0.7878625f,-0.3468800f);
            result[ 11] = Vec3f(-0.2648928f,-0.6994710f, 0.5093321f);
            result[ 12] = Vec3f( 0.3813571f, 0.8950878f, 0.1078119f);
            result[ 13] = Vec3f( 0.2414688f,-0.2797667f,-0.7786734f);
            result[ 14] = Vec3f(-0.2896985f, 0.6130836f, 0.1366537f);
            result[ 15] = Vec3f(-0.2295823f, 0.9365840f, 0.1828358f);
            result[ 16] = Vec3f(-0.0174350f,-0.1031021f,-0.9381739f);
            result[ 17] = Vec3f( 0.4191837f, 0.1458080f, 0.8668853f);
            result[ 18] = Vec3f( 0.8408215f, 0.3889015f,-0.2697223f);
            result[ 19] = Vec3f( 0.5209844f, 0.1420994f, 0.5289911f);
            result[ 20] = Vec3f(-0.1388177f,-0.7733179f,-0.6138467f);
            result[ 21] = Vec3f( 0.4967299f,-0.8387590f, 0.1850723f);
            result[ 22] = Vec3f(-0.2466140f, 0.6773946f,-0.5053768f);
            result[ 23] = Vec3f(-0.0697783f,-0.4414218f,-0.8657057f);
            result[ 24] = Vec3f( 0.7676400f,-0.5800872f, 0.1922524f);
            result[ 25] = Vec3f(-0.0602621f, 0.8487639f, 0.4802356f);
            result[ 26] = Vec3f(-0.6459215f, 0.3549837f,-0.5739825f);
            result[ 27] = Vec3f( 0.3038851f, 0.1203024f,-0.4873328f);
            result[ 28] = Vec3f(-0.3549721f,-0.0365835f,-0.8689651f);
            result[ 29] = Vec3f(-0.0506173f, 0.3321102f,-0.6896597f);
            result[ 30] = Vec3f(-0.1092254f, 0.0661113f, 0.6443880f);
            result[ 31] = Vec3f(-0.6267571f, 0.3605621f, 0.5107951f);
            result[ 32] = Vec3f( 0.5349156f,-0.2967121f, 0.2693913f);
            result[ 33] = Vec3f(-0.3397275f,-0.2244334f, 0.6270556f);
            result[ 34] = Vec3f( 0.5689760f,-0.7135421f,-0.3407065f);
            result[ 35] = Vec3f(-0.0570812f, 0.1971081f, 0.9680653f);
            result[ 36] = Vec3f( 0.3679044f,-0.6294886f, 0.5687084f);
            result[ 37] = Vec3f( 0.0679928f, 0.8683387f,-0.4382206f);
            result[ 38] = Vec3f( 0.1451237f, 0.2993065f, 0.6936001f);
            result[ 39] = Vec3f( 0.2099000f, 0.3825058f,-0.0187980f);
            result[ 40] = Vec3f(-0.0289077f,-0.3788009f,-0.1422478f);
            result[ 41] = Vec3f( 0.6166242f, 0.0142541f,-0.7616215f);
            result[ 42] = Vec3f( 0.1130309f,-0.1521070f,-0.4389524f);
            result[ 43] = Vec3f(-0.1028653f, 0.5399811f, 0.7367980f);
            result[ 44] = Vec3f( 0.4174237f, 0.1565204f, 0.1366932f);
            result[ 45] = Vec3f(-0.2406698f, 0.1980969f, 0.1131474f);
            result[ 46] = Vec3f( 0.2401872f, 0.1520901f,-0.8699959f);
            result[ 47] = Vec3f( 0.3450733f,-0.3119189f, 0.7016855f);
            result[ 48] = Vec3f(-0.3348531f,-0.3654963f, 0.0395184f);
            result[ 49] = Vec3f(-0.0904716f,-0.2012898f, 0.3422366f);
            result[ 50] = Vec3f( 0.3729138f, 0.5388825f, 0.7219065f);
            result[ 51] = Vec3f( 0.4791678f, 0.7156434f, 0.4027566f);
            result[ 52] = Vec3f(-0.5634205f,-0.6896772f,-0.0385510f);
            result[ 53] = Vec3f(-0.7172451f,-0.3869933f,-0.1526005f);
            result[ 54] = Vec3f(-0.6079302f,-0.0712862f, 0.0274515f);
            result[ 55] = Vec3f(-0.0942731f,-0.5122438f, 0.8016317f);
            result[ 56] = Vec3f( 0.0659055f, 0.3513799f,-0.3127667f);
            result[ 57] = Vec3f(-0.4291913f, 0.6504219f, 0.5384539f);
            result[ 58] = Vec3f( 0.1780035f,-0.6394588f,-0.6726779f);
            result[ 59] = Vec3f( 0.3196348f,-0.8063340f,-0.1207008f);
            result[ 60] = Vec3f( 0.5761851f, 0.4383706f,-0.0290055f);
            result[ 61] = Vec3f(-0.6019153f, 0.3276095f,-0.1345090f);
            result[ 62] = Vec3f(-0.8793606f, 0.1679033f, 0.3635740f);
            result[ 63] = Vec3f(-0.5262894f,-0.4346746f,-0.6600581f);
            result[ 64] = Vec3f( 0.2138704f, 0.0188301f,-0.1090724f);
            result[ 65] = Vec3f( 0.5406580f, 0.7233382f,-0.2063859f);
            result[ 66] = Vec3f(-0.6239266f, 0.4960817f, 0.1731504f);
            result[ 67] = Vec3f(-0.3612474f,-0.5033234f,-0.3379494f);
            result[ 68] = Vec3f( 0.0577805f,-0.5139349f, 0.4392302f);
            result[ 69] = Vec3f( 0.3116702f,-0.5693306f, 0.2265517f);
            result[ 70] = Vec3f(-0.2860228f, 0.8326190f,-0.1477785f);
            result[ 71] = Vec3f( 0.7164462f,-0.3300993f,-0.6105968f);
            result[ 72] = Vec3f( 0.5027580f, 0.3845509f,-0.4358322f);
            result[ 73] = Vec3f( 0.2752844f, 0.5060871f,-0.7633582f);
            result[ 74] = Vec3f( 0.7121044f, 0.1267662f,-0.0645006f);
            result[ 75] = Vec3f( 0.1260458f, 0.1059771f, 0.3547649f);
            result[ 76] = Vec3f( 0.9324613f,-0.1252879f,-0.1627460f);
            result[ 77] = Vec3f(-0.2256867f, 0.3541989f, 0.4808007f);
            result[ 78] = Vec3f(-0.1379208f,-0.0551124f,-0.1597776f);
            result[ 79] = Vec3f(-0.5834922f, 0.6974857f,-0.3433079f);
            result[ 80] = Vec3f( 0.6339393f, 0.4072387f, 0.3137040f);
            result[ 81] = Vec3f(-0.9526346f,-0.1538891f, 0.2134384f);
            result[ 82] = Vec3f( 0.6872506f,-0.3625852f, 0.6109982f);
            result[ 83] = Vec3f(-0.4467336f, 0.0943859f,-0.5422331f);
            result[ 84] = Vec3f(-0.7202786f,-0.0216132f, 0.6515188f);
            result[ 85] = Vec3f(-0.2804285f,-0.9082640f,-0.2469288f);
            result[ 86] = Vec3f( 0.4018608f, 0.7444954f,-0.5064609f);
            result[ 87] = Vec3f(-0.5536909f,-0.7044058f, 0.3077819f);
            result[ 88] = Vec3f(-0.7476109f,-0.1925515f,-0.4672275f);
            result[ 89] = Vec3f(-0.8612233f,-0.4667878f, 0.1551782f);
            result[ 90] = Vec3f(-0.9486927f, 0.1124858f,-0.2809559f);
            result[ 91] = Vec3f( 0.8169954f,-0.0054486f, 0.5085359f);
            result[ 92] = Vec3f( 0.0924345f,-0.9177712f, 0.3509530f);
            result[ 93] = Vec3f( 0.8190047f, 0.0539196f,-0.4211797f);
            result[ 94] = Vec3f(-0.0225439f,-0.7673485f, 0.0354748f);
            result[ 95] = Vec3f( 0.4915439f,-0.0976757f,-0.2405146f);
            result[ 96] = Vec3f(-0.4837879f, 0.0429903f, 0.3136584f);
            result[ 97] = Vec3f( 0.3795717f,-0.4290544f,-0.3974062f);
            result[ 98] = Vec3f( 0.9606065f,-0.1474825f, 0.1725473f);
            result[ 99] = Vec3f(-0.2323633f,-0.2193724f,-0.5738742f);
        }
        break;
        case 128:
        {
            result.resize(128);
            result[  0] = Vec3f( 0.0025698f, 0.2916162f,-0.7065033f);
            result[  1] = Vec3f( 0.7071453f,-0.5559751f, 0.3079591f);
            result[  2] = Vec3f(-0.3081152f, 0.8610790f,-0.0645728f);
            result[  3] = Vec3f( 0.7483661f, 0.4204929f, 0.3295981f);
            result[  4] = Vec3f(-0.2543815f, 0.4555658f,-0.0768130f);
            result[  5] = Vec3f( 0.2585063f,-0.7303054f, 0.2154131f);
            result[  6] = Vec3f( 0.7360296f, 0.0620626f, 0.0579348f);
            result[  7] = Vec3f(-0.6827769f,-0.0595737f,-0.1768182f);
            result[  8] = Vec3f( 0.1978256f, 0.6211244f, 0.4031396f);
            result[  9] = Vec3f(-0.0238836f, 0.7806550f, 0.2749751f);
            result[ 10] = Vec3f( 0.2404659f,-0.9630405f,-0.0519935f);
            result[ 11] = Vec3f( 0.4081904f, 0.8771931f,-0.0668056f);
            result[ 12] = Vec3f( 0.4342909f, 0.6483812f, 0.2122921f);
            result[ 13] = Vec3f(-0.1462735f,-0.3631424f,-0.1353175f);
            result[ 14] = Vec3f(-0.2381387f,-0.1776533f, 0.8556153f);
            result[ 15] = Vec3f(-0.5337107f, 0.6528217f,-0.1453767f);
            result[ 16] = Vec3f( 0.0640389f,-0.3360437f,-0.6453232f);
            result[ 17] = Vec3f( 0.4992189f, 0.0942847f,-0.5002062f);
            result[ 18] = Vec3f(-0.5988922f, 0.0347121f,-0.7958654f);
            result[ 19] = Vec3f( 0.5263643f, 0.5611461f,-0.1167750f);
            result[ 20] = Vec3f(-0.3044591f,-0.6198656f,-0.0482712f);
            result[ 21] = Vec3f(-0.6000684f,-0.3551217f,-0.3246351f);
            result[ 22] = Vec3f(-0.0663337f,-0.5662969f, 0.7876313f);
            result[ 23] = Vec3f(-0.4078768f,-0.2047719f,-0.8332211f);
            result[ 24] = Vec3f( 0.3798810f, 0.6120479f, 0.6925739f);
            result[ 25] = Vec3f(-0.6023050f, 0.3543397f, 0.6403648f);
            result[ 26] = Vec3f(-0.1394568f, 0.6187572f,-0.4655079f);
            result[ 27] = Vec3f(-0.3914791f,-0.3708078f, 0.3348615f);
            result[ 28] = Vec3f( 0.1962885f,-0.1584334f, 0.8492492f);
            result[ 29] = Vec3f( 0.2542416f,-0.5264658f, 0.7166212f);
            result[ 30] = Vec3f(-0.0855205f,-0.1688321f, 0.0964392f);
            result[ 31] = Vec3f(-0.4514310f, 0.7172037f, 0.4795871f);
            result[ 32] = Vec3f( 0.1365440f, 0.0397178f,-0.1286937f);
            result[ 33] = Vec3f( 0.5520840f,-0.2288498f,-0.1994654f);
            result[ 34] = Vec3f(-0.1562026f,-0.0057725f,-0.5585809f);
            result[ 35] = Vec3f( 0.5077363f, 0.2620111f, 0.0870562f);
            result[ 36] = Vec3f( 0.0813761f, 0.3761091f,-0.4308140f);
            result[ 37] = Vec3f(-0.2867818f, 0.4552672f,-0.7998283f);
            result[ 38] = Vec3f(-0.4326783f,-0.3380891f,-0.0600792f);
            result[ 39] = Vec3f(-0.3415160f, 0.2315115f,-0.6071420f);
            result[ 40] = Vec3f(-0.0916865f, 0.6704463f, 0.6320728f);
            result[ 41] = Vec3f(-0.6286467f,-0.4311863f,-0.6433637f);
            result[ 42] = Vec3f( 0.3490180f, 0.5468390f,-0.7508757f);
            result[ 43] = Vec3f(-0.8038489f, 0.1519235f, 0.0058538f);
            result[ 44] = Vec3f(-0.5827511f,-0.6579437f,-0.4273657f);
            result[ 45] = Vec3f(-0.0882973f, 0.0612026f,-0.8983174f);
            result[ 46] = Vec3f( 0.6374002f,-0.2507641f,-0.6236210f);
            result[ 47] = Vec3f(-0.3724722f,-0.4493414f, 0.6655306f);
            result[ 48] = Vec3f( 0.4903287f,-0.0520172f, 0.4161549f);
            result[ 49] = Vec3f(-0.6358825f, 0.0992736f, 0.4582310f);
            result[ 50] = Vec3f(-0.7085638f,-0.0895826f,-0.4769167f);
            result[ 51] = Vec3f( 0.0999413f, 0.9326733f,-0.0639924f);
            result[ 52] = Vec3f(-0.1126891f,-0.7981684f, 0.2519152f);
            result[ 53] = Vec3f( 0.0568068f,-0.6415179f, 0.5064677f);
            result[ 54] = Vec3f( 0.8913801f, 0.1054842f,-0.3558033f);
            result[ 55] = Vec3f(-0.3038254f, 0.8581603f,-0.3885743f);
            result[ 56] = Vec3f(-0.6864922f,-0.4338503f, 0.5549091f);
            result[ 57] = Vec3f( 0.5637534f,-0.5122145f,-0.0396744f);
            result[ 58] = Vec3f(-0.2203665f, 0.2021083f, 0.7243873f);
            result[ 59] = Vec3f( 0.7086844f,-0.2738241f, 0.5141790f);
            result[ 60] = Vec3f( 0.1672050f,-0.3750124f, 0.0781536f);
            result[ 61] = Vec3f(-0.4517332f,-0.7612736f, 0.1780602f);
            result[ 62] = Vec3f( 0.0386227f,-0.7364413f,-0.0463111f);
            result[ 63] = Vec3f( 0.2978265f,-0.6495364f,-0.6748136f);
            result[ 64] = Vec3f( 0.9005734f,-0.2590356f,-0.3234545f);
            result[ 65] = Vec3f( 0.2080290f, 0.6118255f,-0.0985519f);
            result[ 66] = Vec3f( 0.2382631f,-0.0708057f, 0.2466657f);
            result[ 67] = Vec3f( 0.3741386f,-0.5150810f,-0.4103674f);
            result[ 68] = Vec3f( 0.7339321f, 0.0665587f, 0.5707030f);
            result[ 69] = Vec3f(-0.0240057f, 0.2572944f, 0.9464265f);
            result[ 70] = Vec3f(-0.5939214f, 0.7816937f, 0.1256101f);
            result[ 71] = Vec3f(-0.4620817f, 0.6085057f,-0.5094351f);
            result[ 72] = Vec3f(-0.2605817f, 0.4991133f, 0.3710856f);
            result[ 73] = Vec3f( 0.0564426f,-0.2122366f,-0.9446883f);
            result[ 74] = Vec3f( 0.3379135f,-0.7807679f, 0.5069431f);
            result[ 75] = Vec3f( 0.4721265f, 0.7448893f,-0.4173232f);
            result[ 76] = Vec3f(-0.0208458f, 0.0791997f, 0.2839179f);
            result[ 77] = Vec3f( 0.3929156f, 0.3870829f, 0.4581928f);
            result[ 78] = Vec3f( 0.1068482f, 0.8341542f,-0.4563937f);
            result[ 79] = Vec3f( 0.3929257f,-0.8428923f,-0.3481780f);
            result[ 80] = Vec3f(-0.9526638f, 0.0451723f,-0.2960604f);
            result[ 81] = Vec3f(-0.5893493f, 0.3562206f,-0.7217149f);
            result[ 82] = Vec3f( 0.5774181f,-0.2012902f, 0.1168158f);
            result[ 83] = Vec3f(-0.9180230f,-0.2275472f,-0.0744241f);
            result[ 84] = Vec3f( 0.0381070f,-0.3598562f, 0.3519956f);
            result[ 85] = Vec3f(-0.1344561f, 0.1618835f,-0.0723783f);
            result[ 86] = Vec3f( 0.4120163f,-0.3092203f, 0.5610325f);
            result[ 87] = Vec3f( 0.1049132f, 0.5223534f, 0.7990755f);
            result[ 88] = Vec3f(-0.6373079f, 0.4788115f, 0.0812891f);
            result[ 89] = Vec3f( 0.4259043f,-0.4135885f, 0.2688566f);
            result[ 90] = Vec3f( 0.6681575f,-0.5521327f,-0.3352602f);
            result[ 91] = Vec3f(-0.3297928f, 0.4915643f, 0.7613764f);
            result[ 92] = Vec3f( 0.1429821f, 0.3775138f, 0.0873069f);
            result[ 93] = Vec3f( 0.9332105f, 0.3051969f, 0.0986936f);
            result[ 94] = Vec3f( 0.3438132f, 0.1174374f,-0.7617865f);
            result[ 95] = Vec3f(-0.2131006f, 0.2933640f,-0.3329929f);
            result[ 96] = Vec3f( 0.0163192f,-0.6828200f,-0.3395078f);
            result[ 97] = Vec3f( 0.0772909f, 0.3539944f, 0.5230787f);
            result[ 98] = Vec3f( 0.5303168f, 0.4239249f,-0.4552642f);
            result[ 99] = Vec3f(-0.5156902f, 0.1119417f,-0.3667175f);
            result[100] = Vec3f( 0.1967721f,-0.1114564f,-0.3941151f);
            result[101] = Vec3f(-0.8035591f,-0.3724855f, 0.2810122f);
            result[102] = Vec3f(-0.2091482f,-0.7538882f, 0.6054844f);
            result[103] = Vec3f(-0.2807631f,-0.0551543f,-0.2923473f);
            result[104] = Vec3f(-0.6168886f,-0.6038707f,-0.1090790f);
            result[105] = Vec3f( 0.9238667f,-0.1241729f, 0.3248181f);
            result[106] = Vec3f( 0.2778618f, 0.2251310f, 0.9293628f);
            result[107] = Vec3f( 0.5861474f, 0.3041089f, 0.6979368f);
            result[108] = Vec3f(-0.8128459f, 0.3757356f, 0.3931952f);
            result[109] = Vec3f(-0.4296885f,-0.0171600f, 0.0147673f);
            result[110] = Vec3f(-0.3315814f, 0.1712548f, 0.2963110f);
            result[111] = Vec3f( 0.4262502f, 0.1589204f,-0.2190340f);
            result[112] = Vec3f( 0.4851519f,-0.0348535f, 0.8586056f);
            result[113] = Vec3f(-0.5234261f, 0.0203034f, 0.7828822f);
            result[114] = Vec3f( 0.3900932f,-0.2418671f,-0.8588524f);
            result[115] = Vec3f(-0.8931948f,-0.0056033f, 0.2516272f);
            result[116] = Vec3f( 0.5358912f,-0.8254192f, 0.0320385f);
            result[117] = Vec3f(-0.0577527f,-0.1624473f, 0.5960703f);
            result[118] = Vec3f(-0.6451855f, 0.3916461f,-0.3470498f);
            result[119] = Vec3f( 0.2507384f, 0.0069773f, 0.5909824f);
            result[120] = Vec3f( 0.1890037f,-0.3584051f,-0.2178284f);
            result[121] = Vec3f(-0.1943476f,-0.9650016f,-0.1262457f);
            result[122] = Vec3f(-0.3629270f,-0.0694342f, 0.5314623f);
            result[123] = Vec3f(-0.1211926f,-0.5747021f,-0.7153724f);
            result[124] = Vec3f( 0.7982564f, 0.4309708f,-0.1780920f);
            result[125] = Vec3f( 0.8945476f,-0.2606634f, 0.0339429f);
            result[126] = Vec3f(-0.2854214f,-0.3324469f,-0.5450997f);
            result[127] = Vec3f(-0.2861758f,-0.6153549f,-0.4483813f);
        }
        break;
        case 256:
        {
            result.resize(256);
            result[  0] = Vec3f(-0.5361692f, 0.2843071f, 0.3543516f);
            result[  1] = Vec3f( 0.1411453f, 0.8419645f, 0.3880097f);
            result[  2] = Vec3f(-0.2691135f,-0.2862430f,-0.2770393f);
            result[  3] = Vec3f( 0.1420423f,-0.8967900f,-0.1415908f);
            result[  4] = Vec3f( 0.1702614f,-0.8281848f,-0.3924124f);
            result[  5] = Vec3f( 0.1320149f, 0.4635745f, 0.3671132f);
            result[  6] = Vec3f(-0.0991090f,-0.2347070f, 0.8370397f);
            result[  7] = Vec3f(-0.0466263f,-0.4161720f,-0.0266481f);
            result[  8] = Vec3f(-0.3441370f,-0.2030771f, 0.7561288f);
            result[  9] = Vec3f( 0.1208894f,-0.6471922f,-0.1302707f);
            result[ 10] = Vec3f(-0.3443428f,-0.8764741f,-0.1846911f);
            result[ 11] = Vec3f(-0.2796091f, 0.6520424f, 0.0873098f);
            result[ 12] = Vec3f( 0.9372127f,-0.1392909f,-0.2894004f);
            result[ 13] = Vec3f(-0.9114066f, 0.2137427f,-0.2281142f);
            result[ 14] = Vec3f(-0.2478194f, 0.7187256f, 0.3065995f);
            result[ 15] = Vec3f(-0.2209280f, 0.0716740f, 0.6318936f);
            result[ 16] = Vec3f(-0.5390873f,-0.4579878f,-0.2012338f);
            result[ 17] = Vec3f(-0.1376601f, 0.9234656f, 0.3422283f);
            result[ 18] = Vec3f( 0.1228377f,-0.3317734f, 0.7516102f);
            result[ 19] = Vec3f( 0.4394261f, 0.1323779f,-0.8654100f);
            result[ 20] = Vec3f( 0.4268222f,-0.8220226f,-0.3227732f);
            result[ 21] = Vec3f(-0.7284833f, 0.1998198f, 0.1561887f);
            result[ 22] = Vec3f( 0.6977273f,-0.2233100f, 0.4242647f);
            result[ 23] = Vec3f(-0.4417369f, 0.2825595f,-0.6813370f);
            result[ 24] = Vec3f(-0.3203554f,-0.7066078f, 0.4805938f);
            result[ 25] = Vec3f( 0.8596519f, 0.3806709f, 0.3373638f);
            result[ 26] = Vec3f( 0.7645413f,-0.2862017f,-0.5398369f);
            result[ 27] = Vec3f(-0.2761891f,-0.7349905f, 0.1468153f);
            result[ 28] = Vec3f(-0.8492955f,-0.1789832f,-0.4260113f);
            result[ 29] = Vec3f(-0.2114412f, 0.3775872f,-0.1835822f);
            result[ 30] = Vec3f( 0.2263938f, 0.1649795f, 0.5022832f);
            result[ 31] = Vec3f(-0.0114226f,-0.5155932f,-0.5007674f);
            result[ 32] = Vec3f( 0.3888952f, 0.2374059f, 0.8233221f);
            result[ 33] = Vec3f(-0.2462714f,-0.2004398f, 0.4491678f);
            result[ 34] = Vec3f( 0.1977087f, 0.4082565f, 0.0975039f);
            result[ 35] = Vec3f( 0.3643963f,-0.2977310f, 0.5675673f);
            result[ 36] = Vec3f( 0.1495836f, 0.4493474f,-0.5397242f);
            result[ 37] = Vec3f( 0.4775662f, 0.0702370f,-0.4716364f);
            result[ 38] = Vec3f(-0.8062193f, 0.4951000f,-0.1590275f);
            result[ 39] = Vec3f(-0.0680999f, 0.2045237f,-0.4405209f);
            result[ 40] = Vec3f( 0.1913848f,-0.0767685f, 0.1948595f);
            result[ 41] = Vec3f( 0.3985504f,-0.0973513f,-0.3118546f);
            result[ 42] = Vec3f( 0.0143981f, 0.6089185f,-0.2863571f);
            result[ 43] = Vec3f( 0.7938211f, 0.1635078f,-0.5703422f);
            result[ 44] = Vec3f( 0.5226187f, 0.1494879f, 0.4828026f);
            result[ 45] = Vec3f(-0.2290244f,-0.3044930f,-0.9226625f);
            result[ 46] = Vec3f(-0.6038548f, 0.5243032f, 0.0454055f);
            result[ 47] = Vec3f( 0.4008347f, 0.3560036f, 0.5571866f);
            result[ 48] = Vec3f( 0.6204286f,-0.2585242f, 0.7239659f);
            result[ 49] = Vec3f( 0.1100595f,-0.4307045f, 0.4417275f);
            result[ 50] = Vec3f(-0.7614661f,-0.5365720f,-0.2053986f);
            result[ 51] = Vec3f( 0.0067266f, 0.2668284f,-0.7216832f);
            result[ 52] = Vec3f( 0.1364559f,-0.0996565f,-0.2248870f);
            result[ 53] = Vec3f( 0.8725226f,-0.1634237f, 0.1501600f);
            result[ 54] = Vec3f(-0.0779738f, 0.8206196f,-0.2305065f);
            result[ 55] = Vec3f( 0.1976048f,-0.6570785f,-0.6837479f);
            result[ 56] = Vec3f( 0.0791950f,-0.4319077f,-0.7692362f);
            result[ 57] = Vec3f( 0.8237038f,-0.3476356f,-0.2978404f);
            result[ 58] = Vec3f( 0.1845928f,-0.2160242f,-0.6947337f);
            result[ 59] = Vec3f(-0.2145002f, 0.3103623f, 0.5827537f);
            result[ 60] = Vec3f( 0.4391140f,-0.0919785f, 0.3042092f);
            result[ 61] = Vec3f( 0.4924220f,-0.5016099f, 0.6536742f);
            result[ 62] = Vec3f( 0.0355879f, 0.3256586f,-0.2524935f);
            result[ 63] = Vec3f(-0.1199756f,-0.5568917f, 0.2890941f);
            result[ 64] = Vec3f( 0.7901897f,-0.5953062f,-0.1035771f);
            result[ 65] = Vec3f(-0.7364721f,-0.6756517f,-0.0200949f);
            result[ 66] = Vec3f(-0.6817352f, 0.3441938f,-0.6242694f);
            result[ 67] = Vec3f(-0.2867401f, 0.6347286f,-0.5714371f);
            result[ 68] = Vec3f(-0.5179826f, 0.2021383f,-0.3043224f);
            result[ 69] = Vec3f(-0.1155593f,-0.8789148f,-0.0134100f);
            result[ 70] = Vec3f(-0.1165661f, 0.1673520f,-0.8930076f);
            result[ 71] = Vec3f( 0.0881855f, 0.9757676f,-0.0160755f);
            result[ 72] = Vec3f( 0.1693743f, 0.7291025f,-0.0494667f);
            result[ 73] = Vec3f(-0.1774595f, 0.5118732f, 0.6987765f);
            result[ 74] = Vec3f( 0.2560232f, 0.6479043f, 0.4849255f);
            result[ 75] = Vec3f(-0.2680012f,-0.2009731f,-0.6877235f);
            result[ 76] = Vec3f( 0.0171598f, 0.2966827f, 0.6772566f);
            result[ 77] = Vec3f( 0.2355769f, 0.8355079f,-0.3468146f);
            result[ 78] = Vec3f(-0.9350928f,-0.2086456f, 0.2619324f);
            result[ 79] = Vec3f(-0.2294970f, 0.2734238f, 0.1702362f);
            result[ 80] = Vec3f( 0.4045235f, 0.4233801f,-0.3252972f);
            result[ 81] = Vec3f( 0.4710342f, 0.6405942f,-0.0466508f);
            result[ 82] = Vec3f( 0.0766240f,-0.9814988f, 0.1075437f);
            result[ 83] = Vec3f(-0.7686106f, 0.4327083f, 0.2556733f);
            result[ 84] = Vec3f(-0.1567122f, 0.3417015f, 0.9096893f);
            result[ 85] = Vec3f(-0.6562085f,-0.4090360f, 0.0776150f);
            result[ 86] = Vec3f( 0.4954188f, 0.6151836f, 0.5631309f);
            result[ 87] = Vec3f( 0.5259359f,-0.1673377f,-0.7969365f);
            result[ 88] = Vec3f(-0.2680874f, 0.1028903f, 0.8949838f);
            result[ 89] = Vec3f(-0.9332916f,-0.0134333f,-0.1889859f);
            result[ 90] = Vec3f(-0.8289676f, 0.0496689f,-0.3924525f);
            result[ 91] = Vec3f(-0.2681274f, 0.7947288f,-0.3647341f);
            result[ 92] = Vec3f( 0.6262572f, 0.6262105f, 0.1475191f);
            result[ 93] = Vec3f( 0.3345548f, 0.9259109f,-0.0379711f);
            result[ 94] = Vec3f(-0.6896615f,-0.1107064f, 0.2630178f);
            result[ 95] = Vec3f( 0.6068242f, 0.3674074f, 0.1413785f);
            result[ 96] = Vec3f( 0.2677002f, 0.1081566f,-0.3074721f);
            result[ 97] = Vec3f(-0.0934059f, 0.1259699f,-0.2071432f);
            result[ 98] = Vec3f(-0.4733120f,-0.2246329f,-0.0673796f);
            result[ 99] = Vec3f(-0.1837809f,-0.6116580f,-0.1368595f);
            result[100] = Vec3f( 0.6522253f, 0.0874346f, 0.1441672f);
            result[101] = Vec3f(-0.5243769f,-0.5870067f, 0.5189629f);
            result[102] = Vec3f(-0.5816623f,-0.0431419f, 0.8012358f);
            result[103] = Vec3f( 0.2185557f, 0.7318279f, 0.1876081f);
            result[104] = Vec3f(-0.1505818f, 0.4461331f,-0.4353429f);
            result[105] = Vec3f(-0.3819353f, 0.8821084f, 0.1473684f);
            result[106] = Vec3f(-0.7169752f, 0.0001546f, 0.5854472f);
            result[107] = Vec3f( 0.6456800f, 0.5947372f, 0.3831763f);
            result[108] = Vec3f(-0.7042395f, 0.0801760f,-0.1837503f);
            result[109] = Vec3f(-0.6452639f,-0.2626729f,-0.3359202f);
            result[110] = Vec3f( 0.2364206f, 0.7332684f,-0.5671869f);
            result[111] = Vec3f(-0.0607240f,-0.0580481f,-0.6798853f);
            result[112] = Vec3f( 0.9289160f, 0.2677394f,-0.2356520f);
            result[113] = Vec3f(-0.0745723f,-0.7833173f, 0.5045567f);
            result[114] = Vec3f( 0.6031588f, 0.5347003f,-0.4234525f);
            result[115] = Vec3f(-0.3707869f,-0.5378152f,-0.0177752f);
            result[116] = Vec3f( 0.2453498f,-0.8120940f, 0.3610055f);
            result[117] = Vec3f( 0.8846734f, 0.1251425f, 0.2041681f);
            result[118] = Vec3f( 0.5835471f,-0.6287259f, 0.0260937f);
            result[119] = Vec3f(-0.3005741f, 0.2510612f,-0.4057729f);
            result[120] = Vec3f(-0.0777764f,-0.8282684f, 0.2408801f);
            result[121] = Vec3f( 0.0102224f, 0.6672033f, 0.7405074f);
            result[122] = Vec3f( 0.4142387f, 0.5689188f,-0.6363904f);
            result[123] = Vec3f( 0.0878385f, 0.0426636f,-0.0423284f);
            result[124] = Vec3f( 0.5932754f, 0.2177436f,-0.7139512f);
            result[125] = Vec3f(-0.2944925f, 0.6025529f,-0.2297478f);
            result[126] = Vec3f( 0.7045697f, 0.0050352f, 0.3705174f);
            result[127] = Vec3f(-0.2808509f, 0.8301636f,-0.0739601f);
            result[128] = Vec3f( 0.7638261f, 0.1380453f, 0.5513186f);
            result[129] = Vec3f(-0.0594222f,-0.6600467f, 0.0745821f);
            result[130] = Vec3f( 0.8392179f,-0.4464448f, 0.2614391f);
            result[131] = Vec3f( 0.1842555f,-0.0685654f, 0.5558558f);
            result[132] = Vec3f(-0.4031060f,-0.2655724f,-0.4834812f);
            result[133] = Vec3f( 0.3075486f,-0.6970890f, 0.1323977f);
            result[134] = Vec3f(-0.0104489f,-0.2301964f, 0.4421020f);
            result[135] = Vec3f( 0.1648688f, 0.4956880f,-0.1367007f);
            result[136] = Vec3f( 0.2462341f,-0.3442318f, 0.0741507f);
            result[137] = Vec3f( 0.5656863f,-0.3283011f,-0.3675560f);
            result[138] = Vec3f( 0.5976129f, 0.2082543f,-0.0490435f);
            result[139] = Vec3f( 0.2167703f, 0.4243448f, 0.7388376f);
            result[140] = Vec3f( 0.5521743f,-0.6097825f, 0.3929142f);
            result[141] = Vec3f(-0.4138954f, 0.4515697f,-0.0709132f);
            result[142] = Vec3f(-0.6388237f,-0.5048906f,-0.4160702f);
            result[143] = Vec3f(-0.6282694f,-0.2830063f, 0.5573626f);
            result[144] = Vec3f(-0.7310525f, 0.3992682f,-0.3798399f);
            result[145] = Vec3f(-0.8331032f,-0.1854764f, 0.4856069f);
            result[146] = Vec3f(-0.2066870f, 0.1923615f,-0.6453069f);
            result[147] = Vec3f(-0.9732527f, 0.1254067f, 0.0106925f);
            result[148] = Vec3f(-0.5617792f, 0.7724445f,-0.2719947f);
            result[149] = Vec3f( 0.3089700f,-0.7024215f, 0.6116149f);
            result[150] = Vec3f(-0.5961319f, 0.1275430f,-0.5801851f);
            result[151] = Vec3f(-0.0881492f, 0.5172901f, 0.0691823f);
            result[152] = Vec3f( 0.2957028f, 0.1255540f, 0.0512228f);
            result[153] = Vec3f( 0.0183496f, 0.6028275f,-0.7361864f);
            result[154] = Vec3f( 0.4090896f, 0.1548388f, 0.2707909f);
            result[155] = Vec3f( 0.6403118f, 0.1059922f, 0.7454633f);
            result[156] = Vec3f(-0.5126404f, 0.4968843f, 0.4902937f);
            result[157] = Vec3f(-0.5566969f,-0.7652758f,-0.1595054f);
            result[158] = Vec3f( 0.6790078f,-0.0171973f,-0.2557104f);
            result[159] = Vec3f(-0.0217189f,-0.0337131f, 0.2788001f);
            result[160] = Vec3f(-0.2078897f,-0.4420577f, 0.6661724f);
            result[161] = Vec3f( 0.0085870f, 0.6676458f, 0.3027616f);
            result[162] = Vec3f( 0.3475156f,-0.4116653f, 0.2712309f);
            result[163] = Vec3f(-0.1232059f,-0.0099947f, 0.0659384f);
            result[164] = Vec3f( 0.0812666f, 0.0234215f,-0.4894100f);
            result[165] = Vec3f(-0.1723859f,-0.3471915f,-0.5197949f);
            result[166] = Vec3f( 0.0387341f,-0.2284499f, 0.0807942f);
            result[167] = Vec3f( 0.2127515f, 0.2089572f,-0.6322702f);
            result[168] = Vec3f(-0.4187528f,-0.0129924f,-0.3057591f);
            result[169] = Vec3f( 0.6735307f,-0.0380989f,-0.5338606f);
            result[170] = Vec3f( 0.5526077f,-0.8167546f, 0.1653558f);
            result[171] = Vec3f( 0.5152931f, 0.7387152f,-0.3450136f);
            result[172] = Vec3f( 0.2527401f, 0.3601149f,-0.8589162f);
            result[173] = Vec3f(-0.0973562f, 0.7334394f, 0.5152498f);
            result[174] = Vec3f(-0.5166725f, 0.5715380f,-0.5600934f);
            result[175] = Vec3f(-0.4861811f,-0.4263557f,-0.7386742f);
            result[176] = Vec3f(-0.3498780f,-0.6383916f,-0.3322874f);
            result[177] = Vec3f(-0.0873768f, 0.1686413f, 0.4050045f);
            result[178] = Vec3f( 0.3950042f,-0.0442361f, 0.8020513f);
            result[179] = Vec3f(-0.0337051f,-0.6096866f, 0.7043535f);
            result[180] = Vec3f( 0.5821053f,-0.3869693f, 0.2290374f);
            result[181] = Vec3f(-0.8535346f, 0.0869377f, 0.3465743f);
            result[182] = Vec3f( 0.8371788f, 0.3531796f, 0.0585577f);
            result[183] = Vec3f(-0.1086743f,-0.0766887f,-0.9539877f);
            result[184] = Vec3f(-0.3946779f, 0.1517421f,-0.8760184f);
            result[185] = Vec3f( 0.4240805f, 0.2943671f,-0.5289611f);
            result[186] = Vec3f( 0.3524714f,-0.3153151f,-0.5334674f);
            result[187] = Vec3f(-0.7199612f, 0.3124833f, 0.5640687f);
            result[188] = Vec3f( 0.5913155f,-0.2104298f, 0.0008390f);
            result[189] = Vec3f(-0.6979742f,-0.1681726f,-0.1141171f);
            result[190] = Vec3f( 0.4287673f,-0.6274427f,-0.5803762f);
            result[191] = Vec3f(-0.2093815f,-0.5059626f,-0.7471858f);
            result[192] = Vec3f(-0.3635252f, 0.0301011f,-0.5489392f);
            result[193] = Vec3f( 0.0937355f,-0.2468108f,-0.9538631f);
            result[194] = Vec3f( 0.6815656f,-0.5417541f,-0.3154665f);
            result[195] = Vec3f(-0.2054507f,-0.1990389f,-0.0503950f);
            result[196] = Vec3f( 0.3606431f,-0.2990668f, 0.8723804f);
            result[197] = Vec3f( 0.2441500f,-0.0143594f,-0.8777866f);
            result[198] = Vec3f( 0.6960719f, 0.4108447f,-0.2055174f);
            result[199] = Vec3f(-0.2177045f, 0.3671827f,-0.8068795f);
            result[200] = Vec3f(-0.5257090f, 0.8057970f,-0.0370564f);
            result[201] = Vec3f( 0.4516159f, 0.7422265f, 0.2939711f);
            result[202] = Vec3f( 0.0998803f, 0.2614095f, 0.2489334f);
            result[203] = Vec3f(-0.3488516f,-0.2717333f, 0.1683573f);
            result[204] = Vec3f( 0.7118980f, 0.6566317f,-0.1640310f);
            result[205] = Vec3f(-0.3287638f, 0.0587575f, 0.1695813f);
            result[206] = Vec3f( 0.3797972f, 0.3475329f,-0.0994753f);
            result[207] = Vec3f(-0.5288731f, 0.5181215f,-0.3303311f);
            result[208] = Vec3f(-0.0240467f, 0.1513685f, 0.9449706f);
            result[209] = Vec3f(-0.5167707f, 0.6846569f, 0.2176129f);
            result[210] = Vec3f( 0.4833623f,-0.0019553f,-0.0206081f);
            result[211] = Vec3f(-0.5483347f,-0.0492393f, 0.0821596f);
            result[212] = Vec3f( 0.5690525f,-0.4304916f,-0.1221836f);
            result[213] = Vec3f( 0.9426613f, 0.0021269f,-0.0777860f);
            result[214] = Vec3f(-0.5407276f,-0.3897620f, 0.2879204f);
            result[215] = Vec3f(-0.4177009f, 0.4434764f, 0.1846712f);
            result[216] = Vec3f( 0.6487565f, 0.2078879f,-0.3229277f);
            result[217] = Vec3f(-0.1314492f,-0.0934088f,-0.4259087f);
            result[218] = Vec3f(-0.4671578f,-0.4231865f, 0.6843371f);
            result[219] = Vec3f( 0.3498297f,-0.3461454f,-0.1744752f);
            result[220] = Vec3f(-0.0525551f, 0.7781823f, 0.0810672f);
            result[221] = Vec3f( 0.2018031f,-0.4917137f,-0.2908047f);
            result[222] = Vec3f(-0.2162790f, 0.4558773f, 0.3408306f);
            result[223] = Vec3f(-0.3174717f,-0.4353992f, 0.4565957f);
            result[224] = Vec3f(-0.0490285f, 0.2908204f,-0.0020415f);
            result[225] = Vec3f( 0.6151259f,-0.4738553f,-0.5512379f);
            result[226] = Vec3f( 0.3271813f,-0.0142018f,-0.6485128f);
            result[227] = Vec3f(-0.4160099f,-0.6539212f,-0.6297379f);
            result[228] = Vec3f(-0.3682737f, 0.6317048f, 0.6162313f);
            result[229] = Vec3f( 0.4090712f,-0.4063612f,-0.7738290f);
            result[230] = Vec3f(-0.7704830f,-0.4806713f, 0.3023024f);
            result[231] = Vec3f(-0.0781627f, 0.8530747f,-0.5077757f);
            result[232] = Vec3f(-0.4728059f, 0.1257378f, 0.6839013f);
            result[233] = Vec3f(-0.5328178f,-0.6716297f, 0.1712443f);
            result[234] = Vec3f( 0.5323792f,-0.0849858f, 0.5892084f);
            result[235] = Vec3f(-0.4306889f,-0.0211505f, 0.3623887f);
            result[236] = Vec3f( 0.4139935f,-0.8289748f,-0.0297094f);
            result[237] = Vec3f(-0.0514293f,-0.7154256f,-0.6677052f);
            result[238] = Vec3f(-0.7854477f, 0.2922647f,-0.0487975f);
            result[239] = Vec3f( 0.0051596f, 0.0668511f, 0.7206367f);
            result[240] = Vec3f(-0.4007412f, 0.1105733f,-0.0638402f);
            result[241] = Vec3f( 0.2136354f, 0.1443695f, 0.9474117f);
            result[242] = Vec3f( 0.3835210f,-0.6043383f,-0.0954546f);
            result[243] = Vec3f( 0.0106859f,-0.3240539f,-0.2965518f);
            result[244] = Vec3f(-0.0869282f,-0.8820392f,-0.2649767f);
            result[245] = Vec3f( 0.3927368f, 0.4653437f, 0.2984380f);
            result[246] = Vec3f( 0.6366632f, 0.3162725f, 0.3667772f);
            result[247] = Vec3f( 0.0785644f,-0.0570094f, 0.9133692f);
            result[248] = Vec3f(-0.4565907f, 0.3894175f, 0.6967001f);
            result[249] = Vec3f(-0.6824756f,-0.2484380f,-0.5929036f);
            result[250] = Vec3f(-0.9001970f,-0.2400619f,-0.0022910f);
            result[251] = Vec3f( 0.8632655f,-0.3610650f,-0.0626982f);
            result[252] = Vec3f( 0.6915973f, 0.4004624f, 0.5864327f);
            result[253] = Vec3f( 0.0957664f,-0.6585172f, 0.2677844f);
            result[254] = Vec3f(-0.4881487f,-0.0867345f,-0.8031198f);
            result[255] = Vec3f(-0.2356353f,-0.7396353f,-0.5096377f);
        }
        break;
    }
    
    return result;
}

OSG_SYSTEM_DLLMAPPING std::vector<Vec3f> getPoissonBox(UInt32 size)
{
    std::vector<Vec3f> result;

    switch (size)
    {
        case  9:
        {
            result.resize(9);
            result[  0] = Vec3f( 0.6274527f,-0.9865187f,-0.8699583f);
            result[  1] = Vec3f(-0.3870090f,-0.9310783f,-0.2107579f);
            result[  2] = Vec3f( 0.9944651f, 0.9245090f, 0.3213326f);
            result[  3] = Vec3f( 0.9073114f, 0.5155056f,-0.9867926f);
            result[  4] = Vec3f( 0.7268384f,-0.1557336f,-0.0262586f);
            result[  5] = Vec3f(-0.2627842f,-0.0725827f, 0.6948247f);
            result[  6] = Vec3f(-0.2321776f, 0.1777674f,-0.9519169f);
            result[  7] = Vec3f( 0.6324795f,-0.9868465f, 0.8255490f);
            result[  8] = Vec3f(-0.9012675f, 0.7261583f,-0.0840451f);
        }
        break;
        case 16:
        {
            result.resize(16);
            result[  0] = Vec3f(-0.4054623f, 0.7655319f, 0.7170126f);
            result[  1] = Vec3f(-0.1306239f,-0.0494081f, 0.7163137f);
            result[  2] = Vec3f(-0.4905092f, 0.9805362f,-0.5722567f);
            result[  3] = Vec3f(-0.2288074f,-0.3548709f,-0.5028248f);
            result[  4] = Vec3f(-0.3945974f,-0.9940220f, 0.0805950f);
            result[  5] = Vec3f( 0.8359644f,-0.7549732f,-0.5770572f);
            result[  6] = Vec3f( 0.2670572f, 0.6061760f,-0.4078104f);
            result[  7] = Vec3f( 0.7427642f, 0.0275862f,-0.8587688f);
            result[  8] = Vec3f( 0.4918473f, 0.9657958f, 0.9004200f);
            result[  9] = Vec3f(-0.8035446f, 0.1449771f, 0.0251203f);
            result[ 10] = Vec3f( 0.8637545f, 0.1501834f, 0.0085456f);
            result[ 11] = Vec3f( 0.6806690f,-0.7306206f, 0.3491411f);
            result[ 12] = Vec3f(-0.8889602f,-0.8880918f,-0.6868559f);
            result[ 13] = Vec3f( 0.7146494f, 0.1137322f, 0.9030749f);
            result[ 14] = Vec3f(-0.9529921f, 0.0430483f,-0.7968082f);
            result[ 15] = Vec3f(-0.6499549f,-0.7234037f, 0.8385623f);
        }
        break;
        case 25:
        {
            result.resize(25);
            result[  0] = Vec3f(-0.5755055f,-0.0959753f,-0.6579492f);
            result[  1] = Vec3f( 0.8678026f, 0.6255460f,-0.1692539f);
            result[  2] = Vec3f( 0.9956965f,-0.0664675f, 0.3520257f);
            result[  3] = Vec3f(-0.4604086f,-0.9090916f,-0.0207846f);
            result[  4] = Vec3f(-0.9970980f, 0.7136365f,-0.7210932f);
            result[  5] = Vec3f(-0.3586596f, 0.8618225f,-0.9649522f);
            result[  6] = Vec3f(-0.9403112f, 0.8875835f, 0.0749533f);
            result[  7] = Vec3f( 0.8638470f,-0.5770763f, 0.8115571f);
            result[  8] = Vec3f( 0.1526233f,-0.0821426f, 0.5972891f);
            result[  9] = Vec3f(-0.4527587f,-0.7481588f,-0.9629607f);
            result[ 10] = Vec3f(-0.9094591f,-0.1396306f,-0.0448137f);
            result[ 11] = Vec3f(-0.6922002f,-0.4386947f, 0.5406458f);
            result[ 12] = Vec3f(-0.0255598f, 0.3160788f,-0.6719527f);
            result[ 13] = Vec3f( 0.3597217f,-0.2489537f,-0.8194479f);
            result[ 14] = Vec3f(-0.8450364f, 0.4793539f, 0.8591099f);
            result[ 15] = Vec3f( 0.2633610f,-0.7442982f,-0.0543389f);
            result[ 16] = Vec3f( 0.3932506f,-0.9510983f,-0.8573791f);
            result[ 17] = Vec3f(-0.0516826f, 0.7435789f, 0.5888978f);
            result[ 18] = Vec3f( 0.9955852f,-0.1324673f,-0.4794025f);
            result[ 19] = Vec3f( 0.0715322f,-0.8349760f, 0.9636198f);
            result[ 20] = Vec3f( 0.8353531f, 0.6946641f, 0.9177423f);
            result[ 21] = Vec3f(-0.1629601f, 0.9183588f,-0.3102774f);
            result[ 22] = Vec3f( 0.6711440f, 0.4319474f,-0.8263336f);
            result[ 23] = Vec3f(-0.1108133f,-0.0989534f,-0.0723164f);
            result[ 24] = Vec3f( 0.9817765f,-0.8099043f,-0.3417450f);
        }
        break;
        case 32:
        {
            result.resize(32);
            result[  0] = Vec3f( 0.8080977f, 0.0225971f,-0.3264980f);
            result[  1] = Vec3f(-0.0056362f, 0.0903994f, 0.4064928f);
            result[  2] = Vec3f( 0.6836398f, 0.4898908f,-0.8656038f);
            result[  3] = Vec3f(-0.5304975f, 0.0376520f, 0.8199712f);
            result[  4] = Vec3f( 0.9729226f,-0.5798528f,-0.3262900f);
            result[  5] = Vec3f( 0.4250423f, 0.4516336f, 0.0188483f);
            result[  6] = Vec3f( 0.2536236f,-0.1378217f,-0.8858357f);
            result[  7] = Vec3f(-0.9784319f, 0.8273749f, 0.9801639f);
            result[  8] = Vec3f(-0.5327431f,-0.4842952f, 0.4802819f);
            result[  9] = Vec3f(-0.9512833f, 0.7872527f, 0.1662925f);
            result[ 10] = Vec3f( 0.7653052f,-0.3180860f, 0.5446992f);
            result[ 11] = Vec3f( 0.0554739f,-0.9807317f,-0.6969021f);
            result[ 12] = Vec3f( 0.4565958f, 0.3167291f, 0.8462999f);
            result[ 13] = Vec3f(-0.0091168f, 0.7004176f, 0.6165659f);
            result[ 14] = Vec3f( 0.3338846f,-0.7424350f,-0.0231392f);
            result[ 15] = Vec3f( 0.9068851f,-0.1336867f,-0.9309000f);
            result[ 16] = Vec3f( 0.9170570f,-0.8524136f, 0.2775009f);
            result[ 17] = Vec3f(-0.7017688f,-0.2408344f,-0.7182218f);
            result[ 18] = Vec3f( 0.9350387f, 0.7725846f,-0.3592962f);
            result[ 19] = Vec3f(-0.8203412f,-0.8571391f, 0.9533620f);
            result[ 20] = Vec3f( 0.0207894f, 0.6031417f,-0.8989129f);
            result[ 21] = Vec3f( 0.9284396f, 0.6515491f, 0.6301163f);
            result[ 22] = Vec3f( 0.6450715f,-0.7241997f,-0.8566016f);
            result[ 23] = Vec3f(-0.3963715f, 0.3860939f,-0.4658015f);
            result[ 24] = Vec3f(-0.5542538f,-0.8658044f,-0.9866838f);
            result[ 25] = Vec3f(-0.8787816f,-0.8409455f, 0.0309358f);
            result[ 26] = Vec3f( 0.6587245f,-0.7877317f, 0.9496987f);
            result[ 27] = Vec3f(-0.9834127f, 0.7716012f,-0.7735739f);
            result[ 28] = Vec3f(-0.8976722f,-0.2239140f,-0.0086898f);
            result[ 29] = Vec3f( 0.0466969f,-0.6931322f, 0.8249314f);
            result[ 30] = Vec3f(-0.1728122f,-0.3279188f,-0.0382250f);
            result[ 31] = Vec3f( 0.0390739f, 0.8198999f,-0.3032544f);
        }
        break;
        case 64:
        {
            result.resize(64);
            result[  0] = Vec3f(-0.8978066f, 0.4949894f, 0.1823671f);
            result[  1] = Vec3f( 0.8017293f,-0.1206585f,-0.9314550f);
            result[  2] = Vec3f(-0.4309685f,-0.5555549f,-0.0184002f);
            result[  3] = Vec3f(-0.1789836f,-0.2625684f, 0.3266649f);
            result[  4] = Vec3f( 0.9130726f,-0.1141328f, 0.7471036f);
            result[  5] = Vec3f(-0.2914152f,-0.6460128f, 0.8972235f);
            result[  6] = Vec3f(-0.9273655f,-0.1850151f, 0.9813842f);
            result[  7] = Vec3f(-0.9974427f, 0.0746534f, 0.4301536f);
            result[  8] = Vec3f( 0.3482354f, 0.8843482f, 0.3163776f);
            result[  9] = Vec3f(-0.8804896f, 0.0262585f,-0.8164306f);
            result[ 10] = Vec3f(-0.7771560f,-0.8909618f, 0.2038808f);
            result[ 11] = Vec3f(-0.9671245f, 0.0789961f,-0.3299563f);
            result[ 12] = Vec3f(-0.9668305f,-0.6813467f, 0.9222863f);
            result[ 13] = Vec3f( 0.9375166f,-0.8921401f,-0.1932656f);
            result[ 14] = Vec3f( 0.8721074f, 0.4022393f, 0.2990770f);
            result[ 15] = Vec3f( 0.9422904f, 0.6918463f,-0.8260919f);
            result[ 16] = Vec3f( 0.9889318f, 0.8824615f, 0.4904978f);
            result[ 17] = Vec3f( 0.4535108f, 0.6129445f,-0.8735633f);
            result[ 18] = Vec3f(-0.1477463f,-0.9356915f, 0.2111808f);
            result[ 19] = Vec3f( 0.8729272f, 0.3923011f, 0.7978122f);
            result[ 20] = Vec3f(-0.9751423f, 0.9203528f, 0.6821789f);
            result[ 21] = Vec3f( 0.4082894f,-0.2645621f, 0.7241166f);
            result[ 22] = Vec3f(-0.6597024f, 0.2298937f, 0.9753842f);
            result[ 23] = Vec3f(-0.3159684f, 0.9998281f,-0.2700463f);
            result[ 24] = Vec3f( 0.2967110f,-0.2242535f,-0.9891094f);
            result[ 25] = Vec3f(-0.3244631f, 0.7500702f, 0.1536409f);
            result[ 26] = Vec3f(-0.4380355f, 0.5879958f,-0.9985288f);
            result[ 27] = Vec3f( 0.8055747f,-0.8019790f,-0.9322425f);
            result[ 28] = Vec3f(-0.6993551f,-0.3522246f, 0.5776733f);
            result[ 29] = Vec3f(-0.9558249f, 0.9926510f, 0.0885171f);
            result[ 30] = Vec3f( 0.8714099f,-0.8499169f, 0.3162169f);
            result[ 31] = Vec3f( 0.6085312f,-0.6222076f,-0.4332941f);
            result[ 32] = Vec3f( 0.4232149f,-0.7119319f, 0.0389524f);
            result[ 33] = Vec3f( 0.8926450f, 0.8906629f, 0.9836473f);
            result[ 34] = Vec3f(-0.1853584f,-0.2520736f,-0.7766142f);
            result[ 35] = Vec3f( 0.8798184f, 0.7013533f,-0.2825146f);
            result[ 36] = Vec3f(-0.1262244f,-0.9164961f,-0.4921554f);
            result[ 37] = Vec3f(-0.5380003f, 0.3653601f,-0.4196432f);
            result[ 38] = Vec3f(-0.7988007f,-0.5124320f,-0.4195044f);
            result[ 39] = Vec3f( 0.1693268f, 0.9294149f, 0.9659976f);
            result[ 40] = Vec3f( 0.3144034f,-0.2039683f, 0.2335055f);
            result[ 41] = Vec3f(-0.0419471f,-0.1074089f, 0.8548646f);
            result[ 42] = Vec3f(-0.9723189f,-0.5614400f,-0.9605723f);
            result[ 43] = Vec3f( 0.3392252f, 0.4823537f, 0.6867887f);
            result[ 44] = Vec3f( 0.8301994f,-0.1140667f, 0.0816646f);
            result[ 45] = Vec3f(-0.9810153f, 0.6717038f,-0.7638816f);
            result[ 46] = Vec3f(-0.3821172f, 0.3068758f, 0.4140694f);
            result[ 47] = Vec3f(-0.1122729f,-0.1301960f,-0.1470657f);
            result[ 48] = Vec3f( 0.0493343f, 0.5901320f,-0.3483872f);
            result[ 49] = Vec3f( 0.2340508f,-0.7860851f, 0.6105434f);
            result[ 50] = Vec3f( 0.1380488f,-0.8051771f,-0.9908859f);
            result[ 51] = Vec3f(-0.4403194f,-0.6657845f,-0.8840376f);
            result[ 52] = Vec3f( 0.2159640f,-0.2773896f,-0.4957928f);
            result[ 53] = Vec3f(-0.8039871f,-0.9747804f,-0.5917246f);
            result[ 54] = Vec3f(-0.9999755f,-0.2952988f, 0.0143995f);
            result[ 55] = Vec3f(-0.3450681f, 0.7494911f, 0.7350793f);
            result[ 56] = Vec3f( 0.4217657f, 0.9570687f,-0.3073061f);
            result[ 57] = Vec3f( 0.5362477f, 0.2617247f,-0.4213313f);
            result[ 58] = Vec3f( 0.9831991f,-0.0531875f,-0.4247996f);
            result[ 59] = Vec3f( 0.0528591f, 0.8829271f,-0.7435290f);
            result[ 60] = Vec3f(-0.9923633f, 0.9988081f,-0.4011673f);
            result[ 61] = Vec3f( 0.2634307f, 0.3674443f, 0.1178639f);
            result[ 62] = Vec3f(-0.0187744f, 0.3427446f,-0.7996293f);
            result[ 63] = Vec3f( 0.8515515f,-0.9926701f, 0.8255655f);
        }
        break;
        case 100:
        {
            result.resize(100);
            result[  0] = Vec3f( 0.1452889f, 0.7040393f, 0.5557537f);
            result[  1] = Vec3f( 0.3815144f,-0.9153113f,-0.2894945f);
            result[  2] = Vec3f(-0.6660402f, 0.9830604f,-0.9856279f);
            result[  3] = Vec3f(-0.0757414f, 0.3088270f, 0.3457230f);
            result[  4] = Vec3f( 0.9573375f, 0.1827514f, 0.7068305f);
            result[  5] = Vec3f(-0.9153389f,-0.2889807f, 0.2919302f);
            result[  6] = Vec3f(-0.7031375f, 0.1610603f, 0.3228378f);
            result[  7] = Vec3f( 0.3813146f, 0.0269417f,-0.6645830f);
            result[  8] = Vec3f( 0.4607921f,-0.2764371f,-0.9961321f);
            result[  9] = Vec3f(-0.7268599f,-0.7225149f, 0.3063705f);
            result[ 10] = Vec3f( 0.8996042f, 0.9269024f,-0.7729057f);
            result[ 11] = Vec3f( 0.3053312f, 0.3217434f,-0.3472310f);
            result[ 12] = Vec3f( 0.8030882f,-0.7841673f,-0.4324533f);
            result[ 13] = Vec3f(-0.0397362f,-0.0076455f, 0.0103465f);
            result[ 14] = Vec3f(-0.4805099f,-0.9876524f,-0.0308358f);
            result[ 15] = Vec3f(-0.8196609f,-0.3710957f,-0.5936130f);
            result[ 16] = Vec3f(-0.8547171f, 0.7103060f,-0.7331145f);
            result[ 17] = Vec3f(-0.5175224f,-0.7374811f, 0.9503844f);
            result[ 18] = Vec3f(-0.2373432f, 0.9346706f, 0.5743760f);
            result[ 19] = Vec3f( 0.8281749f,-0.3618917f,-0.6606272f);
            result[ 20] = Vec3f(-0.6614987f, 0.0607435f,-0.2506039f);
            result[ 21] = Vec3f( 0.8562406f,-0.0063708f,-0.9478514f);
            result[ 22] = Vec3f(-0.1520114f, 0.6579902f, 0.0286810f);
            result[ 23] = Vec3f( 0.6460456f,-0.8530672f, 0.8319145f);
            result[ 24] = Vec3f( 0.4126145f,-0.4657043f, 0.5982039f);
            result[ 25] = Vec3f( 0.2506132f, 0.9670172f,-0.3929151f);
            result[ 26] = Vec3f(-0.3417954f,-0.1190260f, 0.3546356f);
            result[ 27] = Vec3f(-0.4795192f,-0.9871903f, 0.5414664f);
            result[ 28] = Vec3f(-0.2390519f,-0.0771748f,-0.9904274f);
            result[ 29] = Vec3f( 0.3579775f, 0.4815605f, 0.2677424f);
            result[ 30] = Vec3f(-0.8963022f, 0.7419204f,-0.1769460f);
            result[ 31] = Vec3f( 0.0631363f,-0.3187479f, 0.3151064f);
            result[ 32] = Vec3f(-0.0967363f, 0.4427184f,-0.9831809f);
            result[ 33] = Vec3f( 0.7695831f, 0.5045704f,-0.8990989f);
            result[ 34] = Vec3f(-0.9922858f,-0.8800691f,-0.0992055f);
            result[ 35] = Vec3f(-0.3240219f,-0.4788079f, 0.5772885f);
            result[ 36] = Vec3f( 0.7173771f,-0.6436669f,-0.9650718f);
            result[ 37] = Vec3f(-0.6318929f, 0.9255847f, 0.9866816f);
            result[ 38] = Vec3f( 0.6681733f, 0.4713770f,-0.0500035f);
            result[ 39] = Vec3f( 0.4047945f, 0.2893775f, 0.9273783f);
            result[ 40] = Vec3f(-0.1399395f,-0.4799682f,-0.9007828f);
            result[ 41] = Vec3f(-0.3200451f,-0.8747418f,-0.9991872f);
            result[ 42] = Vec3f(-0.2378642f, 0.5594652f, 0.7850910f);
            result[ 43] = Vec3f( 0.6342133f,-0.1880181f, 0.2389731f);
            result[ 44] = Vec3f(-0.7828172f, 0.2024815f,-0.6372479f);
            result[ 45] = Vec3f( 0.8929163f,-0.9964671f, 0.1807449f);
            result[ 46] = Vec3f(-0.9858377f, 0.5171870f, 0.1683259f);
            result[ 47] = Vec3f(-0.9101654f,-0.3424940f,-0.1337963f);
            result[ 48] = Vec3f(-0.6617386f, 0.5871754f, 0.5134683f);
            result[ 49] = Vec3f(-0.8798283f,-0.8976215f, 0.8173044f);
            result[ 50] = Vec3f( 0.2918055f,-0.5528115f, 0.9885050f);
            result[ 51] = Vec3f(-0.1674696f,-0.9923199f,-0.5123540f);
            result[ 52] = Vec3f( 0.4423808f, 0.8912264f, 0.0121899f);
            result[ 53] = Vec3f(-0.5433958f, 0.9655131f,-0.1457278f);
            result[ 54] = Vec3f(-0.2788221f,-0.5715579f,-0.4649068f);
            result[ 55] = Vec3f( 0.5952018f,-0.0877783f, 0.8002729f);
            result[ 56] = Vec3f(-0.1670666f, 0.8375684f,-0.4311128f);
            result[ 57] = Vec3f(-0.8712134f,-0.2311964f,-0.9879584f);
            result[ 58] = Vec3f(-0.9360627f,-0.4688511f, 0.8730936f);
            result[ 59] = Vec3f( 0.1363990f,-0.3706986f,-0.5259529f);
            result[ 60] = Vec3f( 0.4704597f, 0.9510102f,-0.8286709f);
            result[ 61] = Vec3f(-0.0616427f, 0.9047288f, 0.9784849f);
            result[ 62] = Vec3f( 0.0914869f,-0.7763471f, 0.6570739f);
            result[ 63] = Vec3f(-0.0814525f, 0.1604756f, 0.7640771f);
            result[ 64] = Vec3f( 0.8913746f, 0.1672606f, 0.1952569f);
            result[ 65] = Vec3f(-0.5169281f, 0.4943711f,-0.2630547f);
            result[ 66] = Vec3f(-0.3912516f,-0.1412382f,-0.5897317f);
            result[ 67] = Vec3f( 0.8454783f,-0.9994158f,-0.7848240f);
            result[ 68] = Vec3f(-0.4953160f, 0.4769861f,-0.7900827f);
            result[ 69] = Vec3f(-0.6847253f,-0.1687199f, 0.7078021f);
            result[ 70] = Vec3f( 0.0897347f, 0.9840884f, 0.2279083f);
            result[ 71] = Vec3f(-0.9985921f, 0.4168440f, 0.9411569f);
            result[ 72] = Vec3f(-0.0347755f,-0.2441205f, 0.8547633f);
            result[ 73] = Vec3f( 0.8989301f,-0.4013802f, 0.5008681f);
            result[ 74] = Vec3f( 0.6524984f, 0.7753640f,-0.4033130f);
            result[ 75] = Vec3f( 0.3486359f,-0.3907952f,-0.0004175f);
            result[ 76] = Vec3f(-0.1708050f, 0.2180829f,-0.3601933f);
            result[ 77] = Vec3f( 0.5297930f, 0.8973752f, 0.8476092f);
            result[ 78] = Vec3f(-0.6214318f,-0.8161290f,-0.6149270f);
            result[ 79] = Vec3f( 0.0124025f,-0.8362063f,-0.1143489f);
            result[ 80] = Vec3f(-0.5474970f, 0.9606107f,-0.5682232f);
            result[ 81] = Vec3f( 0.9059783f,-0.5510794f, 0.9473442f);
            result[ 82] = Vec3f( 0.2579670f,-0.6389464f,-0.9094115f);
            result[ 83] = Vec3f( 0.3364189f, 0.4008212f,-0.9614724f);
            result[ 84] = Vec3f( 0.9733629f, 0.9699371f,-0.0125054f);
            result[ 85] = Vec3f( 0.7438893f, 0.7656486f, 0.4227836f);
            result[ 86] = Vec3f( 0.9550501f, 0.1594315f,-0.5407826f);
            result[ 87] = Vec3f( 0.8115555f,-0.3589352f,-0.1941500f);
            result[ 88] = Vec3f( 0.1348056f, 0.5994370f,-0.6099040f);
            result[ 89] = Vec3f(-0.1126730f,-0.9092616f, 0.2962335f);
            result[ 90] = Vec3f( 0.5789621f,-0.0015156f,-0.2505354f);
            result[ 91] = Vec3f(-0.8789864f,-0.6510956f,-0.9027173f);
            result[ 92] = Vec3f( 0.4597012f,-0.8415474f, 0.2437880f);
            result[ 93] = Vec3f(-0.7691616f, 0.9573522f, 0.3508015f);
            result[ 94] = Vec3f( 0.3426257f, 0.1064081f, 0.4539247f);
            result[ 95] = Vec3f(-0.9752848f,-0.0391900f, 0.9783094f);
            result[ 96] = Vec3f(-0.5564648f, 0.2362465f, 0.7735211f);
            result[ 97] = Vec3f(-0.3766352f,-0.4973222f, 0.0647349f);
            result[ 98] = Vec3f(-0.1855094f, 0.9556973f,-0.8309659f);
            result[ 99] = Vec3f( 0.9059697f, 0.6869450f, 0.8536255f);
        }
        break;
        case 128:
        {
            result.resize(128);
            result[  0] = Vec3f( 0.2578963f,-0.2941201f, 0.7180322f);
            result[  1] = Vec3f( 0.8027010f,-0.9722893f,-0.6968114f);
            result[  2] = Vec3f( 0.0303724f, 0.5652714f,-0.2420113f);
            result[  3] = Vec3f(-0.9783613f,-0.5342760f, 0.0674771f);
            result[  4] = Vec3f( 0.9056444f,-0.1398428f, 0.8719052f);
            result[  5] = Vec3f( 0.0780385f,-0.4664598f,-0.8710244f);
            result[  6] = Vec3f( 0.3805068f, 0.2611910f,-0.5181398f);
            result[  7] = Vec3f( 0.1891980f, 0.2757494f, 0.0545744f);
            result[  8] = Vec3f( 0.6968408f, 0.3434454f,-0.2436176f);
            result[  9] = Vec3f( 0.0466992f,-0.7624323f, 0.2033880f);
            result[ 10] = Vec3f( 0.9853526f,-0.6942070f, 0.1191026f);
            result[ 11] = Vec3f(-0.7119441f, 0.0275519f,-0.1748365f);
            result[ 12] = Vec3f( 0.5549333f,-0.5993676f, 0.9735098f);
            result[ 13] = Vec3f( 0.9911385f,-0.0397226f, 0.2625301f);
            result[ 14] = Vec3f(-0.6333883f, 0.9606556f,-0.8014611f);
            result[ 15] = Vec3f( 0.9505670f,-0.6676755f, 0.6445215f);
            result[ 16] = Vec3f(-0.2249405f, 0.9758574f,-0.7418171f);
            result[ 17] = Vec3f(-0.7895184f, 0.5796784f,-0.7215780f);
            result[ 18] = Vec3f(-0.5056019f,-0.9095546f,-0.5087193f);
            result[ 19] = Vec3f( 0.9313114f,-0.7053245f,-0.4231754f);
            result[ 20] = Vec3f( 0.4167430f,-0.9122363f,-0.9726211f);
            result[ 21] = Vec3f( 0.0818262f,-0.7095641f, 0.7682185f);
            result[ 22] = Vec3f( 0.1656148f, 0.9483311f, 0.9884511f);
            result[ 23] = Vec3f( 0.8583031f,-0.2187111f,-0.9153016f);
            result[ 24] = Vec3f( 0.2761772f, 0.1814284f, 0.6848886f);
            result[ 25] = Vec3f(-0.4632128f,-0.7982810f, 0.0681468f);
            result[ 26] = Vec3f(-0.1858643f,-0.4483538f, 0.4151784f);
            result[ 27] = Vec3f(-0.1014227f, 0.8747711f, 0.6395792f);
            result[ 28] = Vec3f( 0.1990106f, 0.8990055f, 0.1792871f);
            result[ 29] = Vec3f(-0.1663026f, 0.2306569f, 0.5392264f);
            result[ 30] = Vec3f(-0.9150137f,-0.0663472f, 0.2544374f);
            result[ 31] = Vec3f( 0.7939162f,-0.9827721f,-0.1183228f);
            result[ 32] = Vec3f( 0.7287576f, 0.2502911f, 0.8916562f);
            result[ 33] = Vec3f(-0.8244002f, 0.2770706f,-0.9767197f);
            result[ 34] = Vec3f(-0.4584184f, 0.7834728f, 0.8648472f);
            result[ 35] = Vec3f(-0.5926364f,-0.2834267f, 0.2964082f);
            result[ 36] = Vec3f(-0.8728207f, 0.9096577f, 0.7819424f);
            result[ 37] = Vec3f( 0.0715922f,-0.0447996f,-0.9996793f);
            result[ 38] = Vec3f(-0.2513503f,-0.1285956f, 0.7304801f);
            result[ 39] = Vec3f(-0.0574762f, 0.5593541f, 0.2334927f);
            result[ 40] = Vec3f(-0.4754133f,-0.3032629f,-0.9835386f);
            result[ 41] = Vec3f( 0.4405060f,-0.9453236f, 0.6541381f);
            result[ 42] = Vec3f(-0.9642428f,-0.0868950f,-0.9903595f);
            result[ 43] = Vec3f(-0.6857752f, 0.9786482f, 0.2512481f);
            result[ 44] = Vec3f( 0.3229116f, 0.6323372f,-0.7398367f);
            result[ 45] = Vec3f(-0.0066537f, 0.3091438f,-0.8070247f);
            result[ 46] = Vec3f( 0.8656639f, 0.8502986f, 0.9679228f);
            result[ 47] = Vec3f( 0.3937176f, 0.9868823f,-0.5842943f);
            result[ 48] = Vec3f(-0.1573695f,-0.8056356f,-0.3466496f);
            result[ 49] = Vec3f(-0.1024204f,-0.0859948f, 0.3346440f);
            result[ 50] = Vec3f( 0.5626810f,-0.6705670f,-0.5859716f);
            result[ 51] = Vec3f(-0.7003291f,-0.3804066f,-0.1619604f);
            result[ 52] = Vec3f(-0.5616625f, 0.0996572f, 0.4576962f);
            result[ 53] = Vec3f(-0.5825213f, 0.5305123f, 0.0053517f);
            result[ 54] = Vec3f( 0.5060630f,-0.4681139f,-0.9517754f);
            result[ 55] = Vec3f(-0.3246812f, 0.9317533f,-0.3487045f);
            result[ 56] = Vec3f( 0.2155292f,-0.4667829f,-0.4498044f);
            result[ 57] = Vec3f(-0.9899300f, 0.5761119f, 0.1991765f);
            result[ 58] = Vec3f(-0.9320178f, 0.5640645f, 0.6280301f);
            result[ 59] = Vec3f( 0.9719158f,-0.2287179f,-0.5436043f);
            result[ 60] = Vec3f( 0.0058854f,-0.0054569f, 0.9986649f);
            result[ 61] = Vec3f( 0.9667398f, 0.0405957f,-0.1122023f);
            result[ 62] = Vec3f( 0.2447177f,-0.8711010f,-0.2665787f);
            result[ 63] = Vec3f(-0.8266947f,-0.6215095f, 0.9765552f);
            result[ 64] = Vec3f(-0.9544675f,-0.7843641f,-0.7319971f);
            result[ 65] = Vec3f(-0.9279580f,-0.3912157f,-0.7370070f);
            result[ 66] = Vec3f(-0.2545562f,-0.9353859f, 0.9774556f);
            result[ 67] = Vec3f( 0.9386523f, 0.8558115f, 0.3351438f);
            result[ 68] = Vec3f( 0.4188302f,-0.2004445f, 0.0527561f);
            result[ 69] = Vec3f(-0.6105661f,-0.8330973f,-0.9753530f);
            result[ 70] = Vec3f(-0.3432407f, 0.0408505f, 0.0253952f);
            result[ 71] = Vec3f( 0.6652730f, 0.3524370f, 0.4919636f);
            result[ 72] = Vec3f(-0.4021096f, 0.3951821f,-0.3207862f);
            result[ 73] = Vec3f(-0.9927578f, 0.5990081f,-0.3239369f);
            result[ 74] = Vec3f(-0.2676198f,-0.3688262f, 0.0420790f);
            result[ 75] = Vec3f(-0.7177638f, 0.2017747f,-0.5768040f);
            result[ 76] = Vec3f( 0.1872203f, 0.9120876f,-0.9757494f);
            result[ 77] = Vec3f( 0.4234222f, 0.6113102f,-0.0068225f);
            result[ 78] = Vec3f( 0.5068375f, 0.9717242f, 0.6255516f);
            result[ 79] = Vec3f( 0.5577271f, 0.3240600f,-0.9933449f);
            result[ 80] = Vec3f( 0.6312232f,-0.1664043f,-0.3709297f);
            result[ 81] = Vec3f(-0.7090175f, 0.8302610f,-0.2098454f);
            result[ 82] = Vec3f( 0.7631981f, 0.9523249f,-0.3168352f);
            result[ 83] = Vec3f( 0.1600015f, 0.0219476f,-0.2680681f);
            result[ 84] = Vec3f(-0.5763167f, 0.5142061f, 0.4770901f);
            result[ 85] = Vec3f(-0.9926679f, 0.2828290f,-0.0573050f);
            result[ 86] = Vec3f( 0.7578551f,-0.4018489f, 0.2363296f);
            result[ 87] = Vec3f( 0.5255680f,-0.6182241f,-0.1572561f);
            result[ 88] = Vec3f(-0.4105612f, 0.5875767f,-0.6881695f);
            result[ 89] = Vec3f( 0.5190058f,-0.1383667f, 0.9649732f);
            result[ 90] = Vec3f( 0.5084171f, 0.6524621f,-0.3942335f);
            result[ 91] = Vec3f( 0.9245660f,-0.6381153f,-0.9403286f);
            result[ 92] = Vec3f(-0.9138956f, 0.2343543f, 0.9824698f);
            result[ 93] = Vec3f(-0.3539057f, 0.0348791f,-0.4432670f);
            result[ 94] = Vec3f(-0.1416316f,-0.9885481f, 0.6134977f);
            result[ 95] = Vec3f(-0.4596837f,-0.7539225f, 0.7053797f);
            result[ 96] = Vec3f(-0.8866091f,-0.9780804f, 0.8478091f);
            result[ 97] = Vec3f(-0.2357951f, 0.9952577f, 0.1086235f);
            result[ 98] = Vec3f( 0.2754512f,-0.0253303f, 0.3620794f);
            result[ 99] = Vec3f( 0.3169072f,-0.6356170f, 0.4640026f);
            result[100] = Vec3f( 0.7107242f,-0.1093713f, 0.5140929f);
            result[101] = Vec3f(-0.1557879f,-0.7861496f,-0.7321469f);
            result[102] = Vec3f(-0.8042089f,-0.7770491f,-0.2649406f);
            result[103] = Vec3f( 0.7469230f,-0.9342026f, 0.3023968f);
            result[104] = Vec3f( 0.9630173f,-0.8622476f, 0.9875755f);
            result[105] = Vec3f( 0.8123302f, 0.4330546f, 0.1207621f);
            result[106] = Vec3f(-0.1759209f,-0.4559128f, 0.9846765f);
            result[107] = Vec3f(-0.7740915f,-0.8602359f, 0.4119234f);
            result[108] = Vec3f( 0.4642789f, 0.7077855f, 0.9878824f);
            result[109] = Vec3f(-0.9967467f,-0.1296574f,-0.3729196f);
            result[110] = Vec3f( 0.0977025f,-0.3812500f, 0.1485873f);
            result[111] = Vec3f(-0.1349190f,-0.2603070f,-0.6072038f);
            result[112] = Vec3f( 0.5833465f, 0.9530745f, 0.0590124f);
            result[113] = Vec3f(-0.0219210f, 0.4564602f, 0.8272779f);
            result[114] = Vec3f(-0.8808804f,-0.0884625f, 0.7227403f);
            result[115] = Vec3f( 0.9823426f, 0.4867218f, 0.6950084f);
            result[116] = Vec3f( 0.3115587f, 0.5307598f, 0.4765635f);
            result[117] = Vec3f(-0.9821349f,-0.5268362f, 0.4655242f);
            result[118] = Vec3f( 0.8486799f, 0.7158803f,-0.7863773f);
            result[119] = Vec3f(-0.5824650f,-0.2752129f, 0.9396094f);
            result[120] = Vec3f( 0.8328662f, 0.3402064f,-0.6332399f);
            result[121] = Vec3f( 0.3201249f,-0.0979817f,-0.6660456f);
            result[122] = Vec3f( 0.0825201f, 0.9975944f,-0.3168385f);
            result[123] = Vec3f( 0.4060816f,-0.9535207f, 0.0806546f);
            result[124] = Vec3f( 0.9656816f,-0.3561375f,-0.1376766f);
            result[125] = Vec3f(-0.5349389f, 0.1426915f, 0.8347273f);
            result[126] = Vec3f(-0.4705074f,-0.5008525f,-0.6150873f);
            result[127] = Vec3f(-0.4642202f, 0.1316855f,-0.8695984f);
        }
        break;
        case 256:
        {
            result.resize(256);
            result[  0] = Vec3f(-0.3171015f,-0.4933668f, 0.8631402f);
            result[  1] = Vec3f( 0.4123564f, 0.0097102f,-0.9789034f);
            result[  2] = Vec3f( 0.7804182f,-0.0312581f,-0.5298555f);
            result[  3] = Vec3f( 0.7434449f,-0.7423783f,-0.0327926f);
            result[  4] = Vec3f( 0.0145459f,-0.3334846f,-0.9910447f);
            result[  5] = Vec3f( 0.6120179f, 0.1763430f,-0.6836232f);
            result[  6] = Vec3f( 0.5391415f,-0.7176871f, 0.4898922f);
            result[  7] = Vec3f(-0.8459573f, 0.6500202f,-0.3637154f);
            result[  8] = Vec3f(-0.4617348f,-0.6986368f,-0.2600752f);
            result[  9] = Vec3f(-0.4724765f, 0.1502892f, 0.0778203f);
            result[ 10] = Vec3f( 0.9107709f,-0.5707785f,-0.6737423f);
            result[ 11] = Vec3f( 0.0540757f,-0.9458706f, 0.7176769f);
            result[ 12] = Vec3f(-0.9922616f, 0.9827896f, 0.1635135f);
            result[ 13] = Vec3f( 0.5499868f,-0.3783097f,-0.1017430f);
            result[ 14] = Vec3f( 0.9549810f, 0.3431187f, 0.8993664f);
            result[ 15] = Vec3f( 0.2869992f, 0.8316203f, 0.9042599f);
            result[ 16] = Vec3f(-0.8276422f,-0.2030211f,-0.1948783f);
            result[ 17] = Vec3f(-0.9534909f, 0.1324000f,-0.7142996f);
            result[ 18] = Vec3f( 0.0576296f,-0.9303212f,-0.2430945f);
            result[ 19] = Vec3f(-0.3990254f,-0.9603159f,-0.6617708f);
            result[ 20] = Vec3f(-0.0650651f,-0.1070281f, 0.6585215f);
            result[ 21] = Vec3f( 0.1794469f,-0.9276981f,-0.8036383f);
            result[ 22] = Vec3f( 0.5373797f, 0.5141311f, 0.4952137f);
            result[ 23] = Vec3f(-0.2684069f, 0.2014651f,-0.3706038f);
            result[ 24] = Vec3f( 0.9236016f,-0.6654606f,-0.3368371f);
            result[ 25] = Vec3f( 0.2789861f, 0.3629109f, 0.3795739f);
            result[ 26] = Vec3f( 0.0479424f,-0.1878464f,-0.0584213f);
            result[ 27] = Vec3f(-0.0681522f,-0.4560513f, 0.3632221f);
            result[ 28] = Vec3f( 0.6677319f, 0.8043995f,-0.0206071f);
            result[ 29] = Vec3f(-0.8368503f, 0.0267909f, 0.5328275f);
            result[ 30] = Vec3f( 0.4112366f, 0.3417684f,-0.4905635f);
            result[ 31] = Vec3f(-0.9681640f,-0.9490134f,-0.9368546f);
            result[ 32] = Vec3f(-0.7075480f, 0.2904218f,-0.0687353f);
            result[ 33] = Vec3f( 0.5817111f, 0.5427076f, 0.7838693f);
            result[ 34] = Vec3f( 0.9857843f,-0.4081667f, 0.5959847f);
            result[ 35] = Vec3f(-0.6936078f, 0.5536592f, 0.7770876f);
            result[ 36] = Vec3f(-0.0997699f,-0.2454693f, 0.9984474f);
            result[ 37] = Vec3f(-0.5615238f, 0.2899024f,-0.4744970f);
            result[ 38] = Vec3f(-0.0366526f, 0.9280879f, 0.1838843f);
            result[ 39] = Vec3f(-0.9510576f,-0.4614363f,-0.8153706f);
            result[ 40] = Vec3f(-0.4216492f, 0.6661505f,-0.2024168f);
            result[ 41] = Vec3f(-0.3534329f, 0.1617489f,-0.6809666f);
            result[ 42] = Vec3f(-0.3773549f,-0.0095721f, 0.3319969f);
            result[ 43] = Vec3f(-0.9897259f, 0.4169511f,-0.1248628f);
            result[ 44] = Vec3f( 0.9935929f,-0.9929446f,-0.1348928f);
            result[ 45] = Vec3f( 0.7349321f, 0.9439404f, 0.8806767f);
            result[ 46] = Vec3f( 0.8685268f,-0.0211562f,-0.2273274f);
            result[ 47] = Vec3f(-0.0154521f,-0.9513288f,-0.5591376f);
            result[ 48] = Vec3f( 0.9912927f,-0.8266014f, 0.1253051f);
            result[ 49] = Vec3f(-0.9396452f, 0.5323769f,-0.9660772f);
            result[ 50] = Vec3f(-0.9192846f, 0.9397171f, 0.4458144f);
            result[ 51] = Vec3f(-0.3137183f,-0.1102523f,-0.8260841f);
            result[ 52] = Vec3f( 0.7409632f,-0.0316509f,-0.9645998f);
            result[ 53] = Vec3f( 0.7096895f, 0.1356541f, 0.1038307f);
            result[ 54] = Vec3f(-0.5011196f,-0.7498618f, 0.2125028f);
            result[ 55] = Vec3f( 0.9728600f,-0.3001570f,-0.3105651f);
            result[ 56] = Vec3f( 0.6475914f,-0.9998492f, 0.6027465f);
            result[ 57] = Vec3f( 0.8123043f, 0.7691453f,-0.9382761f);
            result[ 58] = Vec3f( 0.6132576f, 0.3083056f, 0.9569870f);
            result[ 59] = Vec3f(-0.1573607f,-0.0389051f,-0.5312953f);
            result[ 60] = Vec3f( 0.3569604f,-0.5486329f,-0.6983370f);
            result[ 61] = Vec3f(-0.5257955f, 0.3256829f, 0.3571007f);
            result[ 62] = Vec3f( 0.3230772f, 0.5060148f,-0.1209751f);
            result[ 63] = Vec3f(-0.5944493f, 0.4660293f,-0.7850085f);
            result[ 64] = Vec3f( 0.0243524f,-0.5596553f, 0.0699184f);
            result[ 65] = Vec3f( 0.1395559f, 0.4344854f, 0.8401911f);
            result[ 66] = Vec3f(-0.7365059f,-0.4754766f, 0.3470834f);
            result[ 67] = Vec3f( 0.1941050f,-0.3288645f,-0.3895794f);
            result[ 68] = Vec3f(-0.9009523f,-0.3367041f,-0.5148970f);
            result[ 69] = Vec3f( 0.1237038f, 0.9984781f, 0.6553688f);
            result[ 70] = Vec3f(-0.0583426f, 0.7174788f, 0.7520539f);
            result[ 71] = Vec3f(-0.6918927f, 0.9275502f, 0.2552981f);
            result[ 72] = Vec3f( 0.5472071f, 0.1666411f, 0.6203649f);
            result[ 73] = Vec3f( 0.1152782f,-0.6407259f,-0.9015016f);
            result[ 74] = Vec3f(-0.7361729f,-0.7846963f,-0.8668211f);
            result[ 75] = Vec3f( 0.2417828f, 0.7741638f,-0.4242266f);
            result[ 76] = Vec3f( 0.2206049f,-0.0085455f, 0.4504269f);
            result[ 77] = Vec3f( 0.8789346f, 0.8555551f,-0.4655724f);
            result[ 78] = Vec3f(-0.5715228f,-0.5125682f, 0.6494216f);
            result[ 79] = Vec3f(-0.7037591f,-0.9993876f, 0.1384950f);
            result[ 80] = Vec3f( 0.6041640f,-0.5345685f,-0.8913970f);
            result[ 81] = Vec3f(-0.0778404f,-0.8544272f, 0.4523983f);
            result[ 82] = Vec3f( 0.8345008f,-0.2512602f,-0.7582722f);
            result[ 83] = Vec3f(-0.5575002f,-0.3057756f,-0.8752865f);
            result[ 84] = Vec3f( 0.0914245f, 0.2441920f, 0.6073964f);
            result[ 85] = Vec3f(-0.7280467f,-0.6759291f,-0.4054501f);
            result[ 86] = Vec3f(-0.3786818f, 0.4555242f, 0.5900687f);
            result[ 87] = Vec3f(-0.4932613f, 0.9176664f, 0.8433799f);
            result[ 88] = Vec3f( 0.9968594f,-0.2966031f, 0.8696958f);
            result[ 89] = Vec3f(-0.9121097f, 0.9593593f,-0.7123196f);
            result[ 90] = Vec3f(-0.5253860f,-0.6460851f,-0.6980997f);
            result[ 91] = Vec3f( 0.2888663f,-0.5549707f,-0.0784643f);
            result[ 92] = Vec3f(-0.9754607f, 0.9863787f,-0.3349818f);
            result[ 93] = Vec3f(-0.9434250f,-0.1207013f,-0.8762916f);
            result[ 94] = Vec3f(-0.5831413f, 0.0343719f,-0.8559107f);
            result[ 95] = Vec3f(-0.5077361f,-0.1769179f,-0.4417122f);
            result[ 96] = Vec3f( 0.5783181f, 0.0318927f,-0.1775061f);
            result[ 97] = Vec3f( 0.8601513f,-0.3287627f, 0.3157613f);
            result[ 98] = Vec3f( 0.4406956f,-0.9740246f,-0.6341990f);
            result[ 99] = Vec3f( 0.9072630f, 0.9999812f,-0.0633155f);
            result[100] = Vec3f( 0.3661193f,-0.9619654f, 0.3580968f);
            result[101] = Vec3f( 0.5259032f, 0.9186163f,-0.3708573f);
            result[102] = Vec3f(-0.6640521f,-0.2562764f, 0.1320312f);
            result[103] = Vec3f(-0.1684016f, 0.5286857f,-0.3565007f);
            result[104] = Vec3f(-0.3402946f, 0.9616816f, 0.2867163f);
            result[105] = Vec3f(-0.9787593f,-0.8285795f,-0.0853560f);
            result[106] = Vec3f(-0.9644598f, 0.6050756f, 0.9325223f);
            result[107] = Vec3f( 0.9196842f,-0.5429373f,-0.9687752f);
            result[108] = Vec3f( 0.6509668f, 0.4232963f,-0.0106990f);
            result[109] = Vec3f(-0.9468898f,-0.8086748f, 0.8472083f);
            result[110] = Vec3f( 0.2978635f,-0.5562162f, 0.3420951f);
            result[111] = Vec3f( 0.4707215f, 0.8330605f,-0.9365038f);
            result[112] = Vec3f( 0.4838650f,-0.2421994f,-0.5225242f);
            result[113] = Vec3f(-0.4870721f,-0.9803181f, 0.4609542f);
            result[114] = Vec3f( 0.8968700f,-0.7295252f, 0.6119174f);
            result[115] = Vec3f( 0.8576739f, 0.8188329f, 0.4855928f);
            result[116] = Vec3f( 0.5790795f, 0.7435963f, 0.3169501f);
            result[117] = Vec3f(-0.0300763f,-0.1523290f, 0.2375236f);
            result[118] = Vec3f( 0.3467628f,-0.1191199f, 0.8146844f);
            result[119] = Vec3f( 0.9914020f, 0.0746131f, 0.1572497f);
            result[120] = Vec3f(-0.3725265f,-0.9807553f,-0.9582854f);
            result[121] = Vec3f(-0.1955599f, 0.9297161f, 0.9399359f);
            result[122] = Vec3f( 0.3606155f,-0.9353417f, 0.9158734f);
            result[123] = Vec3f( 0.3247714f,-0.1488672f, 0.0401301f);
            result[124] = Vec3f( 0.2643856f, 0.6532693f, 0.3078799f);
            result[125] = Vec3f( 0.1152192f, 0.3895979f,-0.3617522f);
            result[126] = Vec3f(-0.4749977f,-0.2206450f, 0.9592667f);
            result[127] = Vec3f(-0.5409677f, 0.2284644f, 0.9321096f);
            result[128] = Vec3f(-0.0799077f,-0.9727039f,-0.9720017f);
            result[129] = Vec3f(-0.1330256f, 0.3557631f,-0.0015285f);
            result[130] = Vec3f(-0.9946530f,-0.9478388f,-0.5513167f);
            result[131] = Vec3f(-0.2215207f, 0.0897317f, 0.8298867f);
            result[132] = Vec3f( 0.0939487f, 0.1387254f,-0.5252755f);
            result[133] = Vec3f(-0.4519211f, 0.9000205f,-0.7135724f);
            result[134] = Vec3f( 0.4757934f,-0.3502678f, 0.9995189f);
            result[135] = Vec3f( 0.0262636f, 0.6039708f,-0.1112909f);
            result[136] = Vec3f( 0.5922990f, 0.9127045f,-0.6731852f);
            result[137] = Vec3f( 0.9535168f, 0.4282737f,-0.0307876f);
            result[138] = Vec3f(-0.0774803f, 0.9700869f,-0.1541398f);
            result[139] = Vec3f(-0.8143511f, 0.8600745f,-0.0851103f);
            result[140] = Vec3f( 0.3175555f,-0.3722063f,-0.9469801f);
            result[141] = Vec3f(-0.6969839f, 0.9902654f,-0.9546494f);
            result[142] = Vec3f(-0.9888919f,-0.9424797f, 0.2367696f);
            result[143] = Vec3f(-0.7751159f,-0.8236874f, 0.4468639f);
            result[144] = Vec3f( 0.9947070f, 0.9756804f,-0.7617227f);
            result[145] = Vec3f(-0.5956062f, 0.6579392f, 0.4261249f);
            result[146] = Vec3f(-0.3348565f, 0.9294530f, 0.5798181f);
            result[147] = Vec3f(-0.8401105f,-0.0500226f,-0.4653070f);
            result[148] = Vec3f(-0.9418796f,-0.4321617f, 0.0885049f);
            result[149] = Vec3f( 0.1082187f,-0.6852946f, 0.9813411f);
            result[150] = Vec3f( 0.8417714f, 0.4320620f,-0.7674022f);
            result[151] = Vec3f(-0.3105217f,-0.5955719f,-0.9880345f);
            result[152] = Vec3f( 0.3750327f, 0.6011486f,-0.7472091f);
            result[153] = Vec3f(-0.2388805f,-0.8588963f, 0.9114293f);
            result[154] = Vec3f( 0.8414582f, 0.0297412f, 0.9493288f);
            result[155] = Vec3f(-0.2645789f,-0.7448156f,-0.5060425f);
            result[156] = Vec3f(-0.5323557f, 0.6542063f,-0.5665088f);
            result[157] = Vec3f( 0.2349291f,-0.1119759f,-0.6680771f);
            result[158] = Vec3f( 0.8361561f,-0.8910263f,-0.5028452f);
            result[159] = Vec3f( 0.2519792f, 0.0925511f,-0.2796320f);
            result[160] = Vec3f(-0.3170952f, 0.8837252f,-0.3975244f);
            result[161] = Vec3f( 0.3705997f, 0.2288772f, 0.0431577f);
            result[162] = Vec3f(-0.0223767f, 0.4261633f, 0.2703828f);
            result[163] = Vec3f(-0.8098097f, 0.2437708f,-0.9600251f);
            result[164] = Vec3f(-0.2375220f, 0.6298263f, 0.0399182f);
            result[165] = Vec3f( 0.5252640f, 0.8730489f, 0.6835244f);
            result[166] = Vec3f( 0.4296260f,-0.8067040f, 0.0277983f);
            result[167] = Vec3f(-0.2355741f, 0.0863298f,-0.0983657f);
            result[168] = Vec3f( 0.6826129f,-0.9845531f, 0.2015232f);
            result[169] = Vec3f(-0.6697613f, 0.8902923f,-0.4215255f);
            result[170] = Vec3f( 0.2101159f,-0.2943601f, 0.5646805f);
            result[171] = Vec3f(-0.2833619f, 0.4646229f,-0.8480891f);
            result[172] = Vec3f( 0.2539895f, 0.1825639f, 0.9358895f);
            result[173] = Vec3f( 0.2315553f, 0.7829894f, 0.0190754f);
            result[174] = Vec3f( 0.2264247f, 0.2919036f,-0.9505972f);
            result[175] = Vec3f(-0.8198168f, 0.3781065f,-0.6203192f);
            result[176] = Vec3f(-0.6075303f, 0.5875953f, 0.0389711f);
            result[177] = Vec3f( 0.9745334f, 0.7266403f, 0.0565126f);
            result[178] = Vec3f(-0.4977319f,-0.0945878f,-0.1149947f);
            result[179] = Vec3f(-0.8351157f, 0.8342471f, 0.7776419f);
            result[180] = Vec3f( 0.9176742f, 0.6566241f, 0.7418367f);
            result[181] = Vec3f( 0.0969946f, 0.6042885f,-0.9690112f);
            result[182] = Vec3f(-0.7923315f,-0.1079118f, 0.8624262f);
            result[183] = Vec3f(-0.7133297f,-0.9720445f,-0.6342829f);
            result[184] = Vec3f(-0.7717370f,-0.9631740f,-0.3294401f);
            result[185] = Vec3f(-0.9558211f, 0.6390704f, 0.4897205f);
            result[186] = Vec3f( 0.0874293f, 0.6107296f,-0.6458268f);
            result[187] = Vec3f( 0.2582715f, 0.9451456f, 0.2771735f);
            result[188] = Vec3f( 0.0077541f, 0.7677064f, 0.4578272f);
            result[189] = Vec3f( 0.9658563f,-0.9909028f, 0.9410162f);
            result[190] = Vec3f( 0.6474794f,-0.5891940f,-0.4466898f);
            result[191] = Vec3f(-0.1814262f,-0.3306401f,-0.3708691f);
            result[192] = Vec3f(-0.2522846f,-0.6681365f, 0.0811336f);
            result[193] = Vec3f(-0.9772844f,-0.5122351f,-0.2492421f);
            result[194] = Vec3f(-0.7333513f,-0.6587673f,-0.1008810f);
            result[195] = Vec3f(-0.6519169f, 0.6954178f,-0.9583237f);
            result[196] = Vec3f( 0.5797236f,-0.8493328f,-0.8878653f);
            result[197] = Vec3f( 0.6746391f, 0.6093812f,-0.6016036f);
            result[198] = Vec3f(-0.0953779f, 0.9087827f,-0.9901991f);
            result[199] = Vec3f( 0.6016345f, 0.5567323f,-0.3230305f);
            result[200] = Vec3f(-0.4858022f, 0.0418043f, 0.6532135f);
            result[201] = Vec3f(-0.3083118f,-0.7291443f, 0.6048192f);
            result[202] = Vec3f( 0.8289368f,-0.3657830f,-0.0002053f);
            result[203] = Vec3f(-0.1780175f, 0.1349510f, 0.5322757f);
            result[204] = Vec3f(-0.3039862f,-0.9586854f,-0.0552811f);
            result[205] = Vec3f( 0.0437363f,-0.4739450f, 0.7591017f);
            result[206] = Vec3f(-0.9812073f, 0.6581068f,-0.7001842f);
            result[207] = Vec3f(-0.2815678f,-0.3814902f,-0.0860019f);
            result[208] = Vec3f( 0.7096766f,-0.6595320f, 0.2583625f);
            result[209] = Vec3f(-0.5371436f,-0.9684587f, 0.8889000f);
            result[210] = Vec3f(-0.1226680f,-0.4364665f,-0.7145670f);
            result[211] = Vec3f( 0.9538962f, 0.1537263f,-0.7950943f);
            result[212] = Vec3f( 0.6791211f,-0.2050955f, 0.7906923f);
            result[213] = Vec3f(-0.5444654f,-0.2341438f, 0.5473796f);
            result[214] = Vec3f(-0.3912904f,-0.9874427f,-0.3408965f);
            result[215] = Vec3f(-0.0723673f, 0.0465555f,-0.9209472f);
            result[216] = Vec3f( 0.1454883f, 0.9145738f,-0.6752635f);
            result[217] = Vec3f(-0.2676730f, 0.6314174f, 0.3803838f);
            result[218] = Vec3f(-0.4769715f, 0.9849935f,-0.0034299f);
            result[219] = Vec3f( 0.0876918f, 0.0991120f, 0.1258750f);
            result[220] = Vec3f( 0.5263834f,-0.3543104f, 0.2694716f);
            result[221] = Vec3f(-0.0491104f, 0.3410079f,-0.7192150f);
            result[222] = Vec3f(-0.8154118f, 0.3806562f, 0.5720664f);
            result[223] = Vec3f( 0.5546917f,-0.5509123f, 0.7495584f);
            result[224] = Vec3f( 0.2917687f, 0.6475772f, 0.6421831f);
            result[225] = Vec3f( 0.8620458f,-0.0152041f, 0.5666138f);
            result[226] = Vec3f(-0.2048882f, 0.7069597f,-0.7032032f);
            result[227] = Vec3f( 0.2825203f,-0.7344787f,-0.4215842f);
            result[228] = Vec3f(-0.7001100f,-0.5379306f, 0.9882872f);
            result[229] = Vec3f( 0.6006111f,-0.9958100f,-0.1864949f);
            result[230] = Vec3f(-0.9793791f, 0.6153243f, 0.1517354f);
            result[231] = Vec3f(-0.1999347f, 0.5432699f, 0.9786278f);
            result[232] = Vec3f( 0.8988357f, 0.6279389f,-0.2670724f);
            result[233] = Vec3f( 0.6303645f,-0.0850878f, 0.3228124f);
            result[234] = Vec3f(-0.9882402f,-0.3403752f, 0.8476405f);
            result[235] = Vec3f(-0.8068239f, 0.0038588f, 0.1001933f);
            result[236] = Vec3f(-0.4419003f,-0.4461856f, 0.3460298f);
            result[237] = Vec3f(-0.2480180f,-0.9891391f, 0.2316701f);
            result[238] = Vec3f(-0.0316243f,-0.8568577f, 0.0330026f);
            result[239] = Vec3f(-0.9087184f, 0.3024313f, 0.9125594f);
            result[240] = Vec3f( 0.8287069f, 0.2906476f, 0.6186106f);
            result[241] = Vec3f(-0.3618101f, 0.2098587f,-0.9826020f);
            result[242] = Vec3f( 0.7885242f,-0.7256979f, 0.9695921f);
            result[243] = Vec3f( 0.8846941f, 0.3022121f,-0.4155461f);
            result[244] = Vec3f( 0.0427922f,-0.6657823f,-0.6012304f);
            result[245] = Vec3f(-0.8253350f, 0.3633466f, 0.2291243f);
            result[246] = Vec3f( 0.8889660f,-0.8391356f,-0.8847007f);
            result[247] = Vec3f( 0.9524024f,-0.9909952f, 0.4053967f);
            result[248] = Vec3f(-0.9785717f,-0.3592788f, 0.4970746f);
            result[249] = Vec3f( 0.2565954f,-0.7334842f, 0.7179143f);
            result[250] = Vec3f( 0.9354377f, 0.9772425f, 0.2281901f);
            result[251] = Vec3f(-0.5694967f,-0.4098247f,-0.2264305f);
            result[252] = Vec3f( 0.8469130f, 0.3498430f, 0.3081083f);
            result[253] = Vec3f( 0.0378175f,-0.5972655f,-0.2947637f);
            result[254] = Vec3f( 0.5471622f, 0.3054194f,-0.9519199f);
            result[255] = Vec3f(-0.9597904f, 0.0767875f,-0.2064011f);
        }
        break;
    }
    
    return result;
}

OSG_SYSTEM_DLLMAPPING std::vector<Vec3f> getPoissonHemisphere(UInt32 size)
{
    std::vector<Vec3f> result;

    switch (size)
    {
        case  9:
        {
            result.resize(9);
            result[  0] = Vec3f( 0.6735097f,-0.3032510f, 0.2707961f);
            result[  1] = Vec3f( 0.0790970f,-0.6131748f, 0.3174386f);
            result[  2] = Vec3f(-0.2468377f, 0.9068167f, 0.2341220f);
            result[  3] = Vec3f( 0.8926824f, 0.3020358f, 0.1499791f);
            result[  4] = Vec3f( 0.1754251f,-0.1375806f, 0.7983302f);
            result[  5] = Vec3f(-0.6620977f,-0.5613790f, 0.4691572f);
            result[  6] = Vec3f(-0.1609470f, 0.1187543f, 0.3008285f);
            result[  7] = Vec3f( 0.3908674f, 0.5519973f, 0.5208292f);
            result[  8] = Vec3f(-0.4592429f, 0.0054650f, 0.8751732f);
        }
        break;
        case 16:
        {
            result.resize(16);
            result[  0] = Vec3f( 0.7887321f,-0.4654105f, 0.0005291f);
            result[  1] = Vec3f( 0.9160132f, 0.2473639f, 0.1267580f);
            result[  2] = Vec3f( 0.1697035f,-0.0322511f, 0.9393979f);
            result[  3] = Vec3f(-0.7433791f, 0.5812228f, 0.2904121f);
            result[  4] = Vec3f(-0.8882605f,-0.1716197f, 0.0843196f);
            result[  5] = Vec3f( 0.1931676f,-0.5658906f, 0.7571530f);
            result[  6] = Vec3f( 0.3964443f, 0.5112032f, 0.4838254f);
            result[  7] = Vec3f(-0.2860478f,-0.7202414f, 0.5986657f);
            result[  8] = Vec3f(-0.1871930f, 0.8371961f, 0.4273612f);
            result[  9] = Vec3f( 0.0234245f,-0.2435043f, 0.2032752f);
            result[ 10] = Vec3f(-0.1893673f, 0.3011398f, 0.7667041f);
            result[ 11] = Vec3f( 0.5917720f,-0.0651496f, 0.6396917f);
            result[ 12] = Vec3f(-0.2341186f,-0.1988969f, 0.6515191f);
            result[ 13] = Vec3f(-0.7316457f, 0.1175500f, 0.5696007f);
            result[ 14] = Vec3f(-0.3823540f, 0.1333487f, 0.1750619f);
            result[ 15] = Vec3f( 0.2116293f,-0.8246840f, 0.1771926f);
        }
        break;
        case 25:
        {
            result.resize(25);
            result[  0] = Vec3f(-0.4782815f,-0.8359010f, 0.0265620f);
            result[  1] = Vec3f( 0.0274646f, 0.4285473f, 0.8477668f);
            result[  2] = Vec3f(-0.1941611f, 0.1168441f, 0.1260657f);
            result[  3] = Vec3f( 0.2364316f,-0.5429300f, 0.4061477f);
            result[  4] = Vec3f( 0.3352306f, 0.4372181f, 0.3980033f);
            result[  5] = Vec3f( 0.7892960f,-0.1821454f, 0.1570323f);
            result[  6] = Vec3f( 0.0824988f, 0.8477677f, 0.4970140f);
            result[  7] = Vec3f(-0.5929942f,-0.5025008f, 0.2976828f);
            result[  8] = Vec3f(-0.4431517f, 0.1309884f, 0.6321894f);
            result[  9] = Vec3f( 0.7552768f, 0.5979594f, 0.2257057f);
            result[ 10] = Vec3f(-0.4247667f, 0.8666146f, 0.1969790f);
            result[ 11] = Vec3f(-0.1216443f, 0.5019763f, 0.3373096f);
            result[ 12] = Vec3f( 0.3764099f, 0.9016111f, 0.0580338f);
            result[ 13] = Vec3f( 0.5755248f,-0.1190238f, 0.7948489f);
            result[ 14] = Vec3f( 0.9005723f, 0.1882440f, 0.3705647f);
            result[ 15] = Vec3f(-0.4381002f, 0.6462445f, 0.6101573f);
            result[ 16] = Vec3f(-0.1495537f,-0.7495868f, 0.2997701f);
            result[ 17] = Vec3f(-0.7208228f, 0.3666259f, 0.3458853f);
            result[ 18] = Vec3f( 0.0149839f,-0.0063171f, 0.9700260f);
            result[ 19] = Vec3f( 0.1688054f,-0.1225351f, 0.5638518f);
            result[ 20] = Vec3f(-0.2426676f,-0.2882522f, 0.6661763f);
            result[ 21] = Vec3f( 0.6025372f,-0.6056550f, 0.1838231f);
            result[ 22] = Vec3f( 0.1521213f,-0.4265357f, 0.8822817f);
            result[ 23] = Vec3f( 0.1883924f,-0.1469620f, 0.0776751f);
            result[ 24] = Vec3f(-0.7819896f,-0.1755380f, 0.5626135f);
        }
        break;
        case 32:
        {
            result.resize(32);
            result[  0] = Vec3f(-0.8607680f,-0.1411124f, 0.4363232f);
            result[  1] = Vec3f( 0.6401142f,-0.7297511f, 0.1381135f);
            result[  2] = Vec3f( 0.4282216f, 0.0269341f, 0.2043277f);
            result[  3] = Vec3f( 0.0095228f, 0.1448381f, 0.7498109f);
            result[  4] = Vec3f( 0.4591376f, 0.4600649f, 0.4305089f);
            result[  5] = Vec3f(-0.0253229f, 0.6136663f, 0.7531846f);
            result[  6] = Vec3f( 0.3460546f,-0.4926820f, 0.6325440f);
            result[  7] = Vec3f( 0.5996076f, 0.6341784f, 0.0723019f);
            result[  8] = Vec3f(-0.4002088f,-0.0923446f, 0.4615483f);
            result[  9] = Vec3f( 0.2491376f,-0.4026610f, 0.1879182f);
            result[ 10] = Vec3f( 0.7110147f,-0.3828548f, 0.4556179f);
            result[ 11] = Vec3f(-0.2100548f, 0.8513216f, 0.3430736f);
            result[ 12] = Vec3f(-0.5648240f, 0.6305826f, 0.2422318f);
            result[ 13] = Vec3f(-0.6305876f, 0.0095696f, 0.0851390f);
            result[ 14] = Vec3f(-0.5301764f,-0.5219358f, 0.1619405f);
            result[ 15] = Vec3f( 0.2247529f, 0.8191227f, 0.3906376f);
            result[ 16] = Vec3f(-0.8099830f, 0.3082771f, 0.3060393f);
            result[ 17] = Vec3f( 0.9767132f,-0.0848634f, 0.0173311f);
            result[ 18] = Vec3f( 0.3429053f, 0.3811357f, 0.8519812f);
            result[ 19] = Vec3f( 0.1177999f, 0.3140134f, 0.2160089f);
            result[ 20] = Vec3f(-0.5793507f, 0.1837354f, 0.7478642f);
            result[ 21] = Vec3f( 0.4614916f,-0.0898666f, 0.5937809f);
            result[ 22] = Vec3f( 0.3251536f,-0.8265243f, 0.4055752f);
            result[ 23] = Vec3f(-0.3659940f, 0.3339336f, 0.0462519f);
            result[ 24] = Vec3f(-0.1830871f, 0.3802326f, 0.4690125f);
            result[ 25] = Vec3f(-0.4086131f,-0.3606589f, 0.7898818f);
            result[ 26] = Vec3f( 0.1958839f,-0.2456722f, 0.9321856f);
            result[ 27] = Vec3f( 0.8444095f, 0.1487982f, 0.3840115f);
            result[ 28] = Vec3f( 0.0307738f,-0.2524399f, 0.5096595f);
            result[ 29] = Vec3f(-0.1852103f,-0.6347085f, 0.5833811f);
            result[ 30] = Vec3f(-0.1400058f,-0.9080110f, 0.2734609f);
            result[ 31] = Vec3f(-0.1501538f,-0.3900287f, 0.1399697f);
        }
        break;
        case 64:
        {
            result.resize(64);
            result[  0] = Vec3f( 0.2524667f, 0.3237492f, 0.5109344f);
            result[  1] = Vec3f(-0.3820524f,-0.1582960f, 0.4717577f);
            result[  2] = Vec3f( 0.4633631f,-0.1823698f, 0.8571131f);
            result[  3] = Vec3f( 0.1221251f, 0.0536406f, 0.5988510f);
            result[  4] = Vec3f(-0.7631031f,-0.4844508f, 0.3481383f);
            result[  5] = Vec3f(-0.0249609f,-0.8817678f, 0.4439344f);
            result[  6] = Vec3f( 0.3453714f,-0.9012122f, 0.0374050f);
            result[  7] = Vec3f(-0.1215061f,-0.0746262f, 0.9858471f);
            result[  8] = Vec3f(-0.5399925f, 0.4077809f, 0.7261286f);
            result[  9] = Vec3f(-0.1139936f, 0.0893674f, 0.3957527f);
            result[ 10] = Vec3f( 0.0617357f, 0.8223294f, 0.5623038f);
            result[ 11] = Vec3f( 0.2492851f, 0.1449358f, 0.8654106f);
            result[ 12] = Vec3f(-0.3341351f,-0.8664716f, 0.1640524f);
            result[ 13] = Vec3f( 0.1390214f, 0.5590892f, 0.3439082f);
            result[ 14] = Vec3f(-0.5910751f,-0.3492807f, 0.6502302f);
            result[ 15] = Vec3f(-0.4328514f, 0.1488757f, 0.1620884f);
            result[ 16] = Vec3f(-0.4568473f, 0.4308432f, 0.4009168f);
            result[ 17] = Vec3f(-0.6311833f,-0.7670432f, 0.0769285f);
            result[ 18] = Vec3f(-0.5077752f,-0.6599993f, 0.3517607f);
            result[ 19] = Vec3f( 0.5667355f, 0.4363232f, 0.5724077f);
            result[ 20] = Vec3f( 0.2042606f,-0.5679293f, 0.6505368f);
            result[ 21] = Vec3f( 0.4510806f,-0.0632734f, 0.2748301f);
            result[ 22] = Vec3f( 0.9691489f,-0.1435653f, 0.1766763f);
            result[ 23] = Vec3f( 0.8755311f,-0.4130247f, 0.0241375f);
            result[ 24] = Vec3f(-0.8109218f, 0.2791582f, 0.1623189f);
            result[ 25] = Vec3f(-0.1912727f, 0.4538896f, 0.6980497f);
            result[ 26] = Vec3f( 0.6457978f, 0.4582425f, 0.2753149f);
            result[ 27] = Vec3f( 0.4598606f, 0.0709984f, 0.5941794f);
            result[ 28] = Vec3f( 0.4316133f,-0.4056304f, 0.0667394f);
            result[ 29] = Vec3f( 0.2404332f, 0.9442340f, 0.1047636f);
            result[ 30] = Vec3f(-0.0211848f,-0.9770481f, 0.1358005f);
            result[ 31] = Vec3f( 0.7834152f,-0.3436195f, 0.4974351f);
            result[ 32] = Vec3f( 0.1448252f,-0.4668667f, 0.2829818f);
            result[ 33] = Vec3f( 0.4298862f, 0.7034191f, 0.3165506f);
            result[ 34] = Vec3f(-0.3773544f,-0.5754706f, 0.7006108f);
            result[ 35] = Vec3f(-0.4280703f,-0.1776431f, 0.8672767f);
            result[ 36] = Vec3f(-0.3552650f,-0.3208693f, 0.1255872f);
            result[ 37] = Vec3f( 0.1091092f, 0.0539685f, 0.1783338f);
            result[ 38] = Vec3f(-0.0538785f, 0.2304049f, 0.9668400f);
            result[ 39] = Vec3f(-0.1497632f,-0.3056141f, 0.7648019f);
            result[ 40] = Vec3f( 0.3376694f, 0.2703028f, 0.1783810f);
            result[ 41] = Vec3f(-0.2175934f, 0.0818611f, 0.7301283f);
            result[ 42] = Vec3f( 0.7960752f, 0.1541632f, 0.2063936f);
            result[ 43] = Vec3f(-0.8046825f,-0.0899047f, 0.5071208f);
            result[ 44] = Vec3f(-0.1766657f,-0.6070592f, 0.4667635f);
            result[ 45] = Vec3f(-0.1007971f,-0.2178237f, 0.3319893f);
            result[ 46] = Vec3f(-0.0627213f,-0.6716074f, 0.1817071f);
            result[ 47] = Vec3f(-0.0146307f, 0.7819492f, 0.1834637f);
            result[ 48] = Vec3f( 0.2777518f, 0.4744353f, 0.7905334f);
            result[ 49] = Vec3f( 0.7969630f, 0.1899598f, 0.5361445f);
            result[ 50] = Vec3f(-0.7780195f,-0.2173684f, 0.1771917f);
            result[ 51] = Vec3f( 0.1706383f,-0.2580733f, 0.9421735f);
            result[ 52] = Vec3f( 0.4780774f,-0.2498795f, 0.5529683f);
            result[ 53] = Vec3f(-0.1924578f, 0.3576509f, 0.2186372f);
            result[ 54] = Vec3f(-0.1760134f, 0.0065881f, 0.0634536f);
            result[ 55] = Vec3f(-0.7699172f,-0.4904427f, 0.0255605f);
            result[ 56] = Vec3f(-0.6786696f, 0.2083454f, 0.5145092f);
            result[ 57] = Vec3f(-0.4498916f, 0.8429117f, 0.2260680f);
            result[ 58] = Vec3f( 0.6313136f,-0.6667200f, 0.1189157f);
            result[ 59] = Vec3f( 0.1505619f,-0.2508766f, 0.5240701f);
            result[ 60] = Vec3f( 0.5533322f,-0.5576761f, 0.4636481f);
            result[ 61] = Vec3f(-0.6887953f, 0.6093823f, 0.2029989f);
            result[ 62] = Vec3f( 0.2867072f,-0.8328174f, 0.4662116f);
            result[ 63] = Vec3f(-0.1976150f, 0.6624871f, 0.4119431f);
        }
        break;
        case 100:
        {
            result.resize(100);
            result[  0] = Vec3f(-0.4308921f, 0.4193248f, 0.3346173f);
            result[  1] = Vec3f(-0.7195301f, 0.2271898f, 0.0613527f);
            result[  2] = Vec3f(-0.4508746f, 0.6063375f, 0.0373509f);
            result[  3] = Vec3f( 0.1955949f, 0.0541408f, 0.6320179f);
            result[  4] = Vec3f( 0.0898575f, 0.6194613f, 0.6406882f);
            result[  5] = Vec3f(-0.5925461f,-0.6109692f, 0.0440898f);
            result[  6] = Vec3f( 0.2248763f,-0.6459152f, 0.6341697f);
            result[  7] = Vec3f(-0.0763577f,-0.6524621f, 0.7441677f);
            result[  8] = Vec3f( 0.6716040f, 0.0300084f, 0.4862396f);
            result[  9] = Vec3f(-0.8473495f,-0.4030297f, 0.3034096f);
            result[ 10] = Vec3f( 0.7186801f,-0.1033616f, 0.1609693f);
            result[ 11] = Vec3f( 0.5087467f,-0.7327059f, 0.3657967f);
            result[ 12] = Vec3f(-0.7189620f,-0.1721035f, 0.2243998f);
            result[ 13] = Vec3f(-0.2377323f, 0.8741677f, 0.3297293f);
            result[ 14] = Vec3f( 0.3847290f,-0.2334759f, 0.3088773f);
            result[ 15] = Vec3f(-0.2093776f, 0.6614027f, 0.1432526f);
            result[ 16] = Vec3f( 0.2739961f,-0.5522174f, 0.1098149f);
            result[ 17] = Vec3f( 0.5115311f,-0.6570383f, 0.0506145f);
            result[ 18] = Vec3f( 0.7064433f, 0.5996482f, 0.0306548f);
            result[ 19] = Vec3f(-0.3281636f,-0.3551347f, 0.4737437f);
            result[ 20] = Vec3f(-0.2406152f, 0.3907672f, 0.1331316f);
            result[ 21] = Vec3f( 0.1710529f, 0.1168051f, 0.9753392f);
            result[ 22] = Vec3f( 0.4309607f,-0.4490865f, 0.6433740f);
            result[ 23] = Vec3f(-0.7477430f, 0.5833621f, 0.2191077f);
            result[ 24] = Vec3f(-0.8737624f,-0.3551408f, 0.0215451f);
            result[ 25] = Vec3f( 0.4230881f, 0.0929321f, 0.7794793f);
            result[ 26] = Vec3f(-0.3336933f,-0.6525533f, 0.4786286f);
            result[ 27] = Vec3f( 0.3535503f,-0.1957349f, 0.5888698f);
            result[ 28] = Vec3f( 0.1447721f,-0.3535736f, 0.3090786f);
            result[ 29] = Vec3f(-0.0916767f, 0.1415908f, 0.2570022f);
            result[ 30] = Vec3f( 0.0182315f, 0.1628377f, 0.0063400f);
            result[ 31] = Vec3f(-0.6704054f, 0.5504010f, 0.4861264f);
            result[ 32] = Vec3f(-0.7028953f, 0.2613537f, 0.3581896f);
            result[ 33] = Vec3f(-0.2650807f,-0.0900914f, 0.4724602f);
            result[ 34] = Vec3f( 0.0133324f, 0.6841619f, 0.2988608f);
            result[ 35] = Vec3f( 0.8005297f, 0.1945732f, 0.3100080f);
            result[ 36] = Vec3f(-0.9112904f, 0.0340799f, 0.1988578f);
            result[ 37] = Vec3f(-0.0122675f,-0.1282992f, 0.6395962f);
            result[ 38] = Vec3f( 0.4078965f, 0.5098650f, 0.0374318f);
            result[ 39] = Vec3f(-0.5529865f,-0.5329756f, 0.3848271f);
            result[ 40] = Vec3f(-0.1222080f, 0.7896452f, 0.5703236f);
            result[ 41] = Vec3f(-0.4630854f,-0.2534961f, 0.2439618f);
            result[ 42] = Vec3f(-0.1156982f, 0.4046794f, 0.4486663f);
            result[ 43] = Vec3f( 0.1787479f,-0.8460635f, 0.4201516f);
            result[ 44] = Vec3f(-0.2446607f, 0.3732208f, 0.7353503f);
            result[ 45] = Vec3f(-0.6760083f,-0.3319306f, 0.5282366f);
            result[ 46] = Vec3f(-0.5029105f, 0.0184176f, 0.3169729f);
            result[ 47] = Vec3f( 0.0992941f, 0.3294891f, 0.7902670f);
            result[ 48] = Vec3f( 0.9664003f,-0.2224702f, 0.0921828f);
            result[ 49] = Vec3f(-0.3446681f,-0.6977443f, 0.2133609f);
            result[ 50] = Vec3f(-0.3481215f, 0.1903071f, 0.5033122f);
            result[ 51] = Vec3f( 0.0406806f, 0.8397977f, 0.0327899f);
            result[ 52] = Vec3f(-0.9107108f, 0.3577707f, 0.1964829f);
            result[ 53] = Vec3f( 0.8677274f,-0.3409092f, 0.3145337f);
            result[ 54] = Vec3f( 0.0540758f, 0.4382346f, 0.1791331f);
            result[ 55] = Vec3f( 0.1234366f, 0.9163331f, 0.3759135f);
            result[ 56] = Vec3f( 0.5208404f,-0.2285824f, 0.7911938f);
            result[ 57] = Vec3f(-0.4551528f, 0.6903893f, 0.3211052f);
            result[ 58] = Vec3f( 0.7517848f,-0.5917124f, 0.2264535f);
            result[ 59] = Vec3f( 0.2628337f,-0.3976192f, 0.8616729f);
            result[ 60] = Vec3f(-0.0732859f, 0.1411203f, 0.5760788f);
            result[ 61] = Vec3f( 0.0098244f,-0.2494296f, 0.8770485f);
            result[ 62] = Vec3f(-0.2472576f,-0.1531858f, 0.9184272f);
            result[ 63] = Vec3f( 0.6384400f,-0.2606490f, 0.5399708f);
            result[ 64] = Vec3f( 0.2853049f,-0.1248903f, 0.8960083f);
            result[ 65] = Vec3f( 0.8994150f, 0.3822501f, 0.0134636f);
            result[ 66] = Vec3f(-0.1031536f,-0.4278060f, 0.2401751f);
            result[ 67] = Vec3f( 0.5422193f,-0.4644654f, 0.3295724f);
            result[ 68] = Vec3f( 0.3828104f, 0.4736305f, 0.7888491f);
            result[ 69] = Vec3f( 0.2716322f, 0.7473601f, 0.2388484f);
            result[ 70] = Vec3f(-0.5217850f,-0.1564682f, 0.7202200f);
            result[ 71] = Vec3f( 0.1700467f, 0.0904120f, 0.3448933f);
            result[ 72] = Vec3f( 0.2403507f, 0.3020754f, 0.0508988f);
            result[ 73] = Vec3f( 0.6173260f, 0.4030709f, 0.3698456f);
            result[ 74] = Vec3f( 0.5462838f, 0.6743584f, 0.3180964f);
            result[ 75] = Vec3f( 0.4066882f, 0.0990595f, 0.4758954f);
            result[ 76] = Vec3f(-0.7992251f, 0.0259391f, 0.4541326f);
            result[ 77] = Vec3f( 0.2734525f,-0.5882440f, 0.3802307f);
            result[ 78] = Vec3f( 0.4430107f, 0.2109447f, 0.2321147f);
            result[ 79] = Vec3f(-0.0642698f,-0.6104445f, 0.4533528f);
            result[ 80] = Vec3f(-0.4034082f, 0.5603266f, 0.6282599f);
            result[ 81] = Vec3f( 0.2309635f,-0.8103688f, 0.0674984f);
            result[ 82] = Vec3f(-0.1027049f, 0.1018611f, 0.8611568f);
            result[ 83] = Vec3f(-0.2391393f,-0.9510807f, 0.1194162f);
            result[ 84] = Vec3f(-0.4294074f, 0.8991796f, 0.0752728f);
            result[ 85] = Vec3f(-0.2738180f,-0.4511299f, 0.8129427f);
            result[ 86] = Vec3f(-0.4855762f, 0.2283318f, 0.7284755f);
            result[ 87] = Vec3f( 0.3565617f, 0.4431505f, 0.3307253f);
            result[ 88] = Vec3f(-0.2799770f,-0.1269342f, 0.0975727f);
            result[ 89] = Vec3f(-0.0261712f,-0.8168952f, 0.2326661f);
            result[ 90] = Vec3f( 0.3262693f,-0.2779697f, 0.0475007f);
            result[ 91] = Vec3f(-0.0113741f,-0.1314884f, 0.2951691f);
            result[ 92] = Vec3f( 0.2645860f, 0.3460474f, 0.5683814f);
            result[ 93] = Vec3f(-0.5083722f,-0.5163846f, 0.6586529f);
            result[ 94] = Vec3f( 0.3463991f, 0.7559544f, 0.4916639f);
            result[ 95] = Vec3f(-0.3250244f, 0.1377133f, 0.0948777f);
            result[ 96] = Vec3f( 0.1037952f,-0.3980881f, 0.6426889f);
            result[ 97] = Vec3f( 0.6062208f, 0.4440109f, 0.6382450f);
            result[ 98] = Vec3f( 0.9431634f,-0.0584422f, 0.3085377f);
            result[ 99] = Vec3f( 0.2569319f,-0.0158923f, 0.0362047f);
        }
        break;
        case 128:
        {
            result.resize(128);
            result[  0] = Vec3f(-0.1353728f,-0.0594518f, 0.2951448f);
            result[  1] = Vec3f( 0.3967243f, 0.1300099f, 0.6333270f);
            result[  2] = Vec3f(-0.3615564f,-0.9063200f, 0.1556211f);
            result[  3] = Vec3f( 0.2490662f,-0.2469941f, 0.9205142f);
            result[  4] = Vec3f( 0.7894731f,-0.3660193f, 0.0351243f);
            result[  5] = Vec3f( 0.6237344f,-0.6507653f, 0.2306706f);
            result[  6] = Vec3f( 0.0982046f,-0.8458940f, 0.4948329f);
            result[  7] = Vec3f( 0.1886761f, 0.1246845f, 0.7439436f);
            result[  8] = Vec3f(-0.3235555f,-0.2016137f, 0.8058006f);
            result[  9] = Vec3f(-0.3888219f,-0.3828128f, 0.6634287f);
            result[ 10] = Vec3f(-0.2300974f, 0.3626188f, 0.6742594f);
            result[ 11] = Vec3f(-0.4241117f, 0.0954080f, 0.4840367f);
            result[ 12] = Vec3f( 0.7308046f, 0.0180864f, 0.6582279f);
            result[ 13] = Vec3f(-0.5068556f, 0.4831814f, 0.1508863f);
            result[ 14] = Vec3f(-0.6127254f, 0.3863044f, 0.6560040f);
            result[ 15] = Vec3f( 0.1142178f,-0.2881204f, 0.6498251f);
            result[ 16] = Vec3f(-0.4434688f, 0.3251522f, 0.4675407f);
            result[ 17] = Vec3f( 0.5671718f,-0.1840540f, 0.7577838f);
            result[ 18] = Vec3f( 0.0813304f,-0.2915311f, 0.3784904f);
            result[ 19] = Vec3f( 0.1992751f, 0.4060172f, 0.7336936f);
            result[ 20] = Vec3f(-0.6734734f,-0.4368486f, 0.1426024f);
            result[ 21] = Vec3f(-0.6180321f,-0.4603717f, 0.5618672f);
            result[ 22] = Vec3f(-0.1148981f,-0.3316305f, 0.1456656f);
            result[ 23] = Vec3f( 0.6297972f, 0.3022265f, 0.2384019f);
            result[ 24] = Vec3f( 0.1070833f,-0.7064116f, 0.0719582f);
            result[ 25] = Vec3f(-0.2732723f, 0.7947602f, 0.3150480f);
            result[ 26] = Vec3f(-0.8387582f,-0.0646722f, 0.3994106f);
            result[ 27] = Vec3f( 0.0591477f, 0.1268841f, 0.1748582f);
            result[ 28] = Vec3f(-0.9018499f, 0.2809174f, 0.0844321f);
            result[ 29] = Vec3f( 0.7079855f, 0.1398938f, 0.4596084f);
            result[ 30] = Vec3f( 0.3218619f, 0.0091151f, 0.9249055f);
            result[ 31] = Vec3f(-0.7040832f,-0.2148802f, 0.5585773f);
            result[ 32] = Vec3f( 0.8358679f,-0.1354573f, 0.4816313f);
            result[ 33] = Vec3f(-0.4372199f, 0.5490943f, 0.7104769f);
            result[ 34] = Vec3f( 0.7870468f,-0.1803208f, 0.2236979f);
            result[ 35] = Vec3f( 0.6006823f,-0.1368150f, 0.3595542f);
            result[ 36] = Vec3f(-0.1272352f,-0.3017404f, 0.7206094f);
            result[ 37] = Vec3f(-0.0452194f,-0.1565546f, 0.5184407f);
            result[ 38] = Vec3f(-0.1735505f,-0.8574304f, 0.4742485f);
            result[ 39] = Vec3f( 0.1460611f, 0.3643323f, 0.3928668f);
            result[ 40] = Vec3f( 0.3662615f, 0.5285170f, 0.6348108f);
            result[ 41] = Vec3f( 0.4888499f,-0.3263158f, 0.5206500f);
            result[ 42] = Vec3f( 0.3528318f, 0.2174164f, 0.3997635f);
            result[ 43] = Vec3f( 0.1741061f,-0.5539973f, 0.3994730f);
            result[ 44] = Vec3f( 0.3300197f,-0.1430903f, 0.6731302f);
            result[ 45] = Vec3f( 0.3887366f, 0.2959445f, 0.0552816f);
            result[ 46] = Vec3f(-0.3124291f,-0.6763011f, 0.6205461f);
            result[ 47] = Vec3f( 0.3892120f,-0.6736537f, 0.3929923f);
            result[ 48] = Vec3f( 0.0501357f, 0.5936943f, 0.1958083f);
            result[ 49] = Vec3f( 0.9341825f, 0.2056606f, 0.2045978f);
            result[ 50] = Vec3f( 0.0512801f,-0.8615372f, 0.2626355f);
            result[ 51] = Vec3f( 0.4483473f, 0.7620895f, 0.1395947f);
            result[ 52] = Vec3f( 0.0528409f, 0.7249831f, 0.6016023f);
            result[ 53] = Vec3f( 0.1389707f, 0.3810922f, 0.1569074f);
            result[ 54] = Vec3f( 0.5763748f,-0.1334628f, 0.1324153f);
            result[ 55] = Vec3f(-0.0790156f,-0.5938430f, 0.5592842f);
            result[ 56] = Vec3f(-0.9777271f,-0.0477858f, 0.1218193f);
            result[ 57] = Vec3f(-0.0252746f, 0.2641898f, 0.8409274f);
            result[ 58] = Vec3f( 0.8227543f, 0.3808720f, 0.0484996f);
            result[ 59] = Vec3f( 0.3736236f,-0.5963809f, 0.0398858f);
            result[ 60] = Vec3f(-0.8512254f,-0.2683387f, 0.0225840f);
            result[ 61] = Vec3f( 0.3001864f, 0.8616349f, 0.3666391f);
            result[ 62] = Vec3f(-0.7341087f, 0.6036013f, 0.2092609f);
            result[ 63] = Vec3f( 0.3611413f,-0.0905716f, 0.0318760f);
            result[ 64] = Vec3f(-0.9555337f, 0.1390390f, 0.2552240f);
            result[ 65] = Vec3f( 0.3555759f, 0.2703184f, 0.8530425f);
            result[ 66] = Vec3f( 0.1052201f,-0.4239743f, 0.8744061f);
            result[ 67] = Vec3f(-0.6750488f, 0.3116262f, 0.2962631f);
            result[ 68] = Vec3f(-0.0714823f,-0.2872712f, 0.9487851f);
            result[ 69] = Vec3f(-0.1308915f,-0.8860070f, 0.0037336f);
            result[ 70] = Vec3f(-0.1280185f,-0.6262936f, 0.1992919f);
            result[ 71] = Vec3f(-0.0797719f, 0.4024215f, 0.4789668f);
            result[ 72] = Vec3f(-0.7827412f, 0.3404748f, 0.5002195f);
            result[ 73] = Vec3f( 0.4453380f,-0.3739562f, 0.0355712f);
            result[ 74] = Vec3f(-0.6419083f,-0.0129133f, 0.1656300f);
            result[ 75] = Vec3f(-0.4266179f, 0.1200444f, 0.8880739f);
            result[ 76] = Vec3f(-0.5520673f,-0.5207112f, 0.3326285f);
            result[ 77] = Vec3f( 0.5080332f, 0.3373744f, 0.6705083f);
            result[ 78] = Vec3f( 0.4352456f,-0.7985809f, 0.1736546f);
            result[ 79] = Vec3f( 0.4344106f, 0.0054542f, 0.4420674f);
            result[ 80] = Vec3f(-0.2605081f,-0.0254229f, 0.0752987f);
            result[ 81] = Vec3f(-0.4536306f, 0.5695622f, 0.4546233f);
            result[ 82] = Vec3f( 0.0707514f, 0.9712219f, 0.1605862f);
            result[ 83] = Vec3f( 0.2519324f,-0.0104436f, 0.2161254f);
            result[ 84] = Vec3f(-0.2435902f,-0.3975985f, 0.4729295f);
            result[ 85] = Vec3f( 0.4913939f, 0.7311543f, 0.4367976f);
            result[ 86] = Vec3f(-0.1510203f, 0.4470804f, 0.2335588f);
            result[ 87] = Vec3f( 0.0952107f,-0.1119224f, 0.0643467f);
            result[ 88] = Vec3f(-0.4085023f,-0.7433270f, 0.3871123f);
            result[ 89] = Vec3f( 0.5276866f, 0.0400144f, 0.8099805f);
            result[ 90] = Vec3f( 0.2256528f, 0.6257453f, 0.4594533f);
            result[ 91] = Vec3f( 0.2136432f,-0.9640133f, 0.0600470f);
            result[ 92] = Vec3f(-0.2589709f,-0.1007460f, 0.6007780f);
            result[ 93] = Vec3f(-0.4171999f,-0.3170258f, 0.2707113f);
            result[ 94] = Vec3f(-0.5325263f, 0.7726077f, 0.2214597f);
            result[ 95] = Vec3f( 0.3055995f, 0.6042542f, 0.2423141f);
            result[ 96] = Vec3f( 0.6042199f, 0.1016138f, 0.1116763f);
            result[ 97] = Vec3f( 0.2345074f,-0.3885035f, 0.1425722f);
            result[ 98] = Vec3f(-0.5356839f,-0.1349810f, 0.7317086f);
            result[ 99] = Vec3f( 0.6665003f, 0.6321850f, 0.1774168f);
            result[100] = Vec3f( 0.6750299f,-0.4078479f, 0.2803204f);
            result[101] = Vec3f(-0.2654669f, 0.2053866f, 0.3615037f);
            result[102] = Vec3f(-0.3309841f,-0.5205424f, 0.1178658f);
            result[103] = Vec3f( 0.0139103f,-0.0444582f, 0.8475286f);
            result[104] = Vec3f( 0.2667177f,-0.5797408f, 0.6480944f);
            result[105] = Vec3f(-0.6445050f,-0.7434531f, 0.1648068f);
            result[106] = Vec3f(-0.7378949f,-0.0023268f, 0.6668143f);
            result[107] = Vec3f( 0.7943292f, 0.3693149f, 0.4200954f);
            result[108] = Vec3f(-0.1715141f, 0.9550891f, 0.1519494f);
            result[109] = Vec3f(-0.3992833f, 0.1367414f, 0.1630867f);
            result[110] = Vec3f(-0.1687591f,-0.5355774f, 0.7691913f);
            result[111] = Vec3f(-0.2022895f, 0.6410438f, 0.5809270f);
            result[112] = Vec3f(-0.2055891f, 0.0575153f, 0.7673484f);
            result[113] = Vec3f( 0.5686595f,-0.5475132f, 0.5758203f);
            result[114] = Vec3f(-0.6484458f, 0.1553242f, 0.5020542f);
            result[115] = Vec3f(-0.7707910f,-0.3154491f, 0.3373208f);
            result[116] = Vec3f( 0.7691162f,-0.3832084f, 0.4935920f);
            result[117] = Vec3f(-0.0767984f, 0.5201918f, 0.7966466f);
            result[118] = Vec3f( 0.4267642f,-0.4113367f, 0.7906615f);
            result[119] = Vec3f( 0.3997449f,-0.2832779f, 0.3088827f);
            result[120] = Vec3f(-0.0031623f, 0.8175993f, 0.3181497f);
            result[121] = Vec3f(-0.5004343f,-0.1023243f, 0.3822904f);
            result[122] = Vec3f(-0.6825550f, 0.5563605f, 0.4727579f);
            result[123] = Vec3f( 0.8835266f,-0.0059710f, 0.0902455f);
            result[124] = Vec3f( 0.2077271f,-0.0085942f, 0.5257205f);
            result[125] = Vec3f( 0.0292346f, 0.1718124f, 0.5652826f);
            result[126] = Vec3f(-0.1743922f, 0.6321926f, 0.0065451f);
            result[127] = Vec3f( 0.5049272f, 0.5071940f, 0.3506162f);
        }
        break;
        case 256:
        {
            result.resize(256);
            result[  0] = Vec3f(-0.6470312f,-0.3770457f, 0.5485003f);
            result[  1] = Vec3f(-0.0587649f, 0.9134444f, 0.2394500f);
            result[  2] = Vec3f(-0.0049003f, 0.3573440f, 0.2474874f);
            result[  3] = Vec3f(-0.2752630f, 0.1337591f, 0.0897316f);
            result[  4] = Vec3f(-0.0808623f, 0.4575629f, 0.3803302f);
            result[  5] = Vec3f(-0.6194826f, 0.6864866f, 0.3208889f);
            result[  6] = Vec3f(-0.3303419f, 0.8596736f, 0.0108871f);
            result[  7] = Vec3f( 0.2491786f, 0.9131643f, 0.1144397f);
            result[  8] = Vec3f( 0.1233172f,-0.3054525f, 0.1120409f);
            result[  9] = Vec3f( 0.3750272f,-0.7484655f, 0.3039980f);
            result[ 10] = Vec3f( 0.2340292f,-0.8970173f, 0.0434188f);
            result[ 11] = Vec3f( 0.6839370f,-0.5537559f, 0.4198220f);
            result[ 12] = Vec3f(-0.0304467f,-0.1447868f, 0.5122900f);
            result[ 13] = Vec3f( 0.2291347f,-0.5389431f, 0.1752194f);
            result[ 14] = Vec3f(-0.0490351f, 0.0525978f, 0.0230920f);
            result[ 15] = Vec3f(-0.1880366f, 0.5764675f, 0.1962285f);
            result[ 16] = Vec3f( 0.6833515f,-0.0242065f, 0.3646717f);
            result[ 17] = Vec3f( 0.4579264f, 0.8676411f, 0.1111449f);
            result[ 18] = Vec3f( 0.2726095f, 0.6916496f, 0.6320820f);
            result[ 19] = Vec3f( 0.5595366f, 0.0651792f, 0.2615762f);
            result[ 20] = Vec3f( 0.4067312f,-0.0462067f, 0.4857458f);
            result[ 21] = Vec3f(-0.4977688f,-0.6719944f, 0.2781886f);
            result[ 22] = Vec3f(-0.3776399f, 0.8941816f, 0.1915791f);
            result[ 23] = Vec3f(-0.5744700f,-0.0915322f, 0.4036181f);
            result[ 24] = Vec3f(-0.7679582f,-0.3026647f, 0.2712098f);
            result[ 25] = Vec3f(-0.3049293f, 0.6296381f, 0.3332239f);
            result[ 26] = Vec3f(-0.3423750f, 0.2145572f, 0.4140613f);
            result[ 27] = Vec3f(-0.2226825f, 0.7586782f, 0.4872110f);
            result[ 28] = Vec3f( 0.8195863f,-0.3381476f, 0.1234989f);
            result[ 29] = Vec3f(-0.3102490f,-0.6752957f, 0.1819242f);
            result[ 30] = Vec3f( 0.5784252f,-0.3563339f, 0.5916431f);
            result[ 31] = Vec3f( 0.4381189f,-0.1144006f, 0.0817304f);
            result[ 32] = Vec3f(-0.5568604f, 0.3605208f, 0.4840722f);
            result[ 33] = Vec3f(-0.4188722f,-0.1524224f, 0.8588133f);
            result[ 34] = Vec3f(-0.7457641f, 0.2418309f, 0.5127586f);
            result[ 35] = Vec3f(-0.6966423f,-0.1935916f, 0.5333680f);
            result[ 36] = Vec3f( 0.4618123f,-0.2673085f, 0.7317994f);
            result[ 37] = Vec3f( 0.2967930f,-0.6258070f, 0.7056388f);
            result[ 38] = Vec3f(-0.5434647f,-0.3799743f, 0.0074899f);
            result[ 39] = Vec3f( 0.5529885f, 0.3809035f, 0.2572130f);
            result[ 40] = Vec3f(-0.8327559f, 0.0405153f, 0.4188980f);
            result[ 41] = Vec3f(-0.4615177f,-0.6626170f, 0.4760638f);
            result[ 42] = Vec3f( 0.1907257f,-0.6686167f, 0.4397573f);
            result[ 43] = Vec3f(-0.0855538f,-0.4470292f, 0.5631226f);
            result[ 44] = Vec3f( 0.3244256f, 0.7398123f, 0.0210354f);
            result[ 45] = Vec3f(-0.5091313f,-0.0380288f, 0.7393452f);
            result[ 46] = Vec3f( 0.5833569f,-0.3451194f, 0.2298572f);
            result[ 47] = Vec3f(-0.2225859f, 0.7759658f, 0.1922184f);
            result[ 48] = Vec3f( 0.0865136f,-0.9168396f, 0.3251544f);
            result[ 49] = Vec3f(-0.1261305f, 0.0867850f, 0.4595240f);
            result[ 50] = Vec3f( 0.4249299f, 0.6639389f, 0.5149317f);
            result[ 51] = Vec3f(-0.2033942f,-0.1447743f, 0.5871472f);
            result[ 52] = Vec3f( 0.0845653f,-0.2421638f, 0.7545012f);
            result[ 53] = Vec3f( 0.0244266f,-0.6280543f, 0.5534303f);
            result[ 54] = Vec3f( 0.0905706f,-0.4409393f, 0.7761681f);
            result[ 55] = Vec3f( 0.5778868f, 0.1029526f, 0.5390949f);
            result[ 56] = Vec3f(-0.4238714f, 0.4521421f, 0.1557714f);
            result[ 57] = Vec3f(-0.3977107f,-0.1500711f, 0.0689900f);
            result[ 58] = Vec3f( 0.0290364f, 0.1807683f, 0.9070202f);
            result[ 59] = Vec3f( 0.5982872f,-0.6844313f, 0.3119279f);
            result[ 60] = Vec3f(-0.1527235f,-0.6216235f, 0.6663599f);
            result[ 61] = Vec3f(-0.6730096f,-0.2528456f, 0.0443933f);
            result[ 62] = Vec3f(-0.2114545f,-0.4801003f, 0.0541636f);
            result[ 63] = Vec3f( 0.2366401f,-0.5377104f, 0.5581944f);
            result[ 64] = Vec3f( 0.8299323f, 0.0357072f, 0.0643548f);
            result[ 65] = Vec3f(-0.1330673f, 0.2340238f, 0.1745086f);
            result[ 66] = Vec3f(-0.2003604f,-0.1496786f, 0.8036988f);
            result[ 67] = Vec3f( 0.2641033f, 0.1569846f, 0.0875531f);
            result[ 68] = Vec3f( 0.3877838f,-0.4699100f, 0.4422091f);
            result[ 69] = Vec3f( 0.1643617f,-0.7320075f, 0.6320472f);
            result[ 70] = Vec3f(-0.5529420f,-0.3017598f, 0.2418236f);
            result[ 71] = Vec3f(-0.5598513f, 0.0647312f, 0.0857513f);
            result[ 72] = Vec3f( 0.1975427f,-0.0661986f, 0.4237379f);
            result[ 73] = Vec3f(-0.8839236f,-0.3857383f, 0.0651292f);
            result[ 74] = Vec3f( 0.8364202f, 0.2244178f, 0.4459512f);
            result[ 75] = Vec3f(-0.7830291f, 0.4929788f, 0.3671907f);
            result[ 76] = Vec3f( 0.0201269f,-0.7796695f, 0.4532148f);
            result[ 77] = Vec3f(-0.0501587f, 0.7448463f, 0.1390166f);
            result[ 78] = Vec3f( 0.3101771f, 0.1840298f, 0.7845262f);
            result[ 79] = Vec3f(-0.0592447f, 0.2211881f, 0.5704181f);
            result[ 80] = Vec3f( 0.3783158f, 0.3230251f, 0.4262462f);
            result[ 81] = Vec3f( 0.4225329f, 0.4596100f, 0.1543499f);
            result[ 82] = Vec3f(-0.6682757f,-0.4999385f, 0.3403168f);
            result[ 83] = Vec3f( 0.6296103f, 0.5171357f, 0.1532604f);
            result[ 84] = Vec3f( 0.4246639f,-0.6450061f, 0.5475057f);
            result[ 85] = Vec3f( 0.8826785f, 0.3620489f, 0.2971979f);
            result[ 86] = Vec3f( 0.1054623f, 0.1178467f, 0.7156795f);
            result[ 87] = Vec3f(-0.4921940f,-0.3112737f, 0.4830322f);
            result[ 88] = Vec3f( 0.0774997f, 0.8288089f, 0.4469757f);
            result[ 89] = Vec3f( 0.2304837f, 0.3373829f, 0.5588108f);
            result[ 90] = Vec3f( 0.4331303f, 0.1499617f, 0.4226978f);
            result[ 91] = Vec3f(-0.2443339f,-0.0557442f, 0.4269763f);
            result[ 92] = Vec3f(-0.4246613f, 0.5973457f, 0.4805652f);
            result[ 93] = Vec3f( 0.1793984f, 0.5241268f, 0.7482467f);
            result[ 94] = Vec3f( 0.5410757f, 0.7291090f, 0.3871384f);
            result[ 95] = Vec3f(-0.6401584f, 0.0945184f, 0.7422391f);
            result[ 96] = Vec3f( 0.6464065f, 0.2250133f, 0.1747099f);
            result[ 97] = Vec3f( 0.9595342f, 0.2474358f, 0.0741806f);
            result[ 98] = Vec3f( 0.6273715f, 0.2462714f, 0.3688300f);
            result[ 99] = Vec3f(-0.0548965f, 0.8052568f, 0.5700688f);
            result[100] = Vec3f(-0.9724227f,-0.0562381f, 0.1093596f);
            result[101] = Vec3f( 0.6319952f,-0.3550800f, 0.4062277f);
            result[102] = Vec3f( 0.2778611f, 0.8620276f, 0.2889550f);
            result[103] = Vec3f( 0.2245133f,-0.0100471f, 0.6503093f);
            result[104] = Vec3f(-0.0989189f, 0.2448257f, 0.7605761f);
            result[105] = Vec3f( 0.4196472f, 0.0869818f, 0.6586041f);
            result[106] = Vec3f( 0.8744180f,-0.2276834f, 0.3697419f);
            result[107] = Vec3f( 0.3282185f, 0.0525943f, 0.3016063f);
            result[108] = Vec3f(-0.0950428f, 0.8995312f, 0.4175167f);
            result[109] = Vec3f( 0.0256194f, 0.2373126f, 0.0698829f);
            result[110] = Vec3f(-0.3596213f, 0.2531993f, 0.7447231f);
            result[111] = Vec3f(-0.4117687f, 0.7037992f, 0.1672478f);
            result[112] = Vec3f(-0.1289715f, 0.0781379f, 0.6573006f);
            result[113] = Vec3f(-0.3619635f, 0.3544369f, 0.5926468f);
            result[114] = Vec3f( 0.6756809f,-0.1779283f, 0.4895121f);
            result[115] = Vec3f(-0.0848647f,-0.5782951f, 0.3103899f);
            result[116] = Vec3f( 0.0427897f,-0.4121835f, 0.4161853f);
            result[117] = Vec3f(-0.0995780f, 0.6006414f, 0.5580178f);
            result[118] = Vec3f( 0.5651056f,-0.1268478f, 0.2716391f);
            result[119] = Vec3f( 0.0447128f,-0.2431266f, 0.9395735f);
            result[120] = Vec3f( 0.1493005f,-0.2337866f, 0.3583250f);
            result[121] = Vec3f(-0.4524605f,-0.0261353f, 0.2035404f);
            result[122] = Vec3f(-0.4226084f,-0.5266351f, 0.6718690f);
            result[123] = Vec3f(-0.3713965f,-0.2368665f, 0.6170521f);
            result[124] = Vec3f( 0.3413653f,-0.2922055f, 0.4258583f);
            result[125] = Vec3f( 0.3005869f,-0.3421348f, 0.8192612f);
            result[126] = Vec3f(-0.5962170f, 0.5090276f, 0.1344551f);
            result[127] = Vec3f( 0.1333928f, 0.2253184f, 0.2630125f);
            result[128] = Vec3f(-0.3392177f,-0.7074092f, 0.6026409f);
            result[129] = Vec3f( 0.0105751f,-0.0401458f, 0.8435084f);
            result[130] = Vec3f(-0.2674023f,-0.3323611f, 0.1627364f);
            result[131] = Vec3f( 0.2033144f,-0.7488079f, 0.2166502f);
            result[132] = Vec3f(-0.1075705f,-0.8978484f, 0.2582388f);
            result[133] = Vec3f( 0.3074576f,-0.2469425f, 0.6343586f);
            result[134] = Vec3f( 0.4392688f, 0.0764253f, 0.0176437f);
            result[135] = Vec3f( 0.4419087f,-0.6119560f, 0.1262786f);
            result[136] = Vec3f(-0.3076109f, 0.8706840f, 0.3717949f);
            result[137] = Vec3f( 0.4437327f,-0.0192344f, 0.8319652f);
            result[138] = Vec3f(-0.0224535f, 0.0277202f, 0.3117639f);
            result[139] = Vec3f( 0.7543569f, 0.4371547f, 0.4164766f);
            result[140] = Vec3f(-0.1840770f, 0.6337385f, 0.0239968f);
            result[141] = Vec3f(-0.2067895f, 0.1156285f, 0.2972131f);
            result[142] = Vec3f(-0.5811990f, 0.5023551f, 0.3576962f);
            result[143] = Vec3f(-0.6792638f,-0.6449220f, 0.2178719f);
            result[144] = Vec3f(-0.3022747f,-0.0481009f, 0.9495645f);
            result[145] = Vec3f( 0.5470653f, 0.7302349f, 0.2010159f);
            result[146] = Vec3f( 0.3357368f,-0.2961879f, 0.1363345f);
            result[147] = Vec3f(-0.4361787f, 0.1773943f, 0.5700294f);
            result[148] = Vec3f( 0.8451048f, 0.0020385f, 0.5315906f);
            result[149] = Vec3f( 0.7058470f, 0.0619290f, 0.6671865f);
            result[150] = Vec3f( 0.4391937f, 0.2007207f, 0.1482186f);
            result[151] = Vec3f( 0.1365483f, 0.5621638f, 0.5538523f);
            result[152] = Vec3f(-0.4729709f, 0.7695132f, 0.3909863f);
            result[153] = Vec3f(-0.5613899f, 0.2982534f, 0.6885175f);
            result[154] = Vec3f( 0.2547289f, 0.1866299f, 0.4394655f);
            result[155] = Vec3f(-0.2911460f,-0.3052140f, 0.8270102f);
            result[156] = Vec3f( 0.0908064f, 0.7006500f, 0.6960875f);
            result[157] = Vec3f(-0.2849250f,-0.3533006f, 0.4917608f);
            result[158] = Vec3f( 0.0435973f, 0.4112434f, 0.8442950f);
            result[159] = Vec3f( 0.8219371f, 0.1739590f, 0.2233368f);
            result[160] = Vec3f(-0.5701691f,-0.3039530f, 0.7448330f);
            result[161] = Vec3f(-0.1517887f,-0.8476943f, 0.0476720f);
            result[162] = Vec3f( 0.5042161f, 0.2305239f, 0.7955587f);
            result[163] = Vec3f(-0.3154392f, 0.3742409f, 0.2921288f);
            result[164] = Vec3f( 0.5906001f, 0.5057122f, 0.4667821f);
            result[165] = Vec3f(-0.0567765f,-0.5469367f, 0.8131590f);
            result[166] = Vec3f( 0.1294968f,-0.3555061f, 0.5953816f);
            result[167] = Vec3f(-0.2783043f, 0.5319558f, 0.7383773f);
            result[168] = Vec3f( 0.2487729f, 0.3610611f, 0.1620414f);
            result[169] = Vec3f(-0.2739078f,-0.7637447f, 0.3441404f);
            result[170] = Vec3f( 0.0187190f,-0.4691548f, 0.1579634f);
            result[171] = Vec3f(-0.9166366f, 0.3036001f, 0.1026939f);
            result[172] = Vec3f( 0.7652071f,-0.1669469f, 0.1698539f);
            result[173] = Vec3f(-0.6527939f,-0.1534537f, 0.1988206f);
            result[174] = Vec3f( 0.7129605f, 0.6168003f, 0.3076013f);
            result[175] = Vec3f(-0.0753857f, 0.6914911f, 0.3186518f);
            result[176] = Vec3f( 0.4141486f,-0.4678140f, 0.7079130f);
            result[177] = Vec3f(-0.2870670f, 0.1068885f, 0.8254169f);
            result[178] = Vec3f(-0.7525451f, 0.6104678f, 0.1908406f);
            result[179] = Vec3f(-0.8749977f,-0.1504842f, 0.4311130f);
            result[180] = Vec3f(-0.4247523f,-0.0398625f, 0.5029045f);
            result[181] = Vec3f( 0.2487996f,-0.4208033f, 0.3118972f);
            result[182] = Vec3f(-0.2553598f,-0.4873034f, 0.7747623f);
            result[183] = Vec3f(-0.1341861f, 0.0666724f, 0.9205828f);
            result[184] = Vec3f( 0.5045944f, 0.3328793f, 0.5650939f);
            result[185] = Vec3f( 0.7940956f,-0.3875629f, 0.3023924f);
            result[186] = Vec3f(-0.5606673f, 0.8041861f, 0.1888824f);
            result[187] = Vec3f(-0.0129510f,-0.9723482f, 0.1014026f);
            result[188] = Vec3f(-0.2482321f,-0.0574833f, 0.2322576f);
            result[189] = Vec3f(-0.0822926f,-0.1646148f, 0.2097552f);
            result[190] = Vec3f( 0.6957794f, 0.6697512f, 0.0116377f);
            result[191] = Vec3f( 0.7962873f, 0.4046495f, 0.0454915f);
            result[192] = Vec3f(-0.1258490f, 0.4498391f, 0.0612885f);
            result[193] = Vec3f( 0.6277153f, 0.1002214f, 0.0016943f);
            result[194] = Vec3f(-0.9530250f, 0.1216085f, 0.1762024f);
            result[195] = Vec3f(-0.5052890f, 0.1851448f, 0.3018774f);
            result[196] = Vec3f(-0.3288568f,-0.0654199f, 0.7009974f);
            result[197] = Vec3f( 0.2640111f,-0.0984858f, 0.2243774f);
            result[198] = Vec3f(-0.4446401f,-0.6714425f, 0.0255029f);
            result[199] = Vec3f(-0.8323130f, 0.3032786f, 0.2804507f);
            result[200] = Vec3f( 0.9036614f,-0.0423150f, 0.2734247f);
            result[201] = Vec3f( 0.5117191f,-0.5032465f, 0.2930912f);
            result[202] = Vec3f( 0.0876597f, 0.1053557f, 0.4470316f);
            result[203] = Vec3f(-0.7891552f, 0.0617923f, 0.0845907f);
            result[204] = Vec3f(-0.6278220f,-0.5818026f, 0.0326661f);
            result[205] = Vec3f(-0.4276341f,-0.4383138f, 0.1919789f);
            result[206] = Vec3f(-0.5958443f, 0.2742932f, 0.1640235f);
            result[207] = Vec3f(-0.2086276f, 0.9651140f, 0.1385548f);
            result[208] = Vec3f( 0.0784452f, 0.5534090f, 0.2648401f);
            result[209] = Vec3f(-0.8763331f,-0.1506005f, 0.2336361f);
            result[210] = Vec3f(-0.1075013f,-0.2739886f, 0.6771442f);
            result[211] = Vec3f(-0.6560593f,-0.0008865f, 0.5880780f);
            result[212] = Vec3f(-0.2028471f,-0.8103189f, 0.5148364f);
            result[213] = Vec3f( 0.6395042f,-0.1190349f, 0.6775866f);
            result[214] = Vec3f( 0.1139003f, 0.0472115f, 0.1421227f);
            result[215] = Vec3f(-0.0974890f,-0.3759249f, 0.8967150f);
            result[216] = Vec3f( 0.1789218f, 0.3306506f, 0.7511927f);
            result[217] = Vec3f( 0.2231796f,-0.1283982f, 0.0284038f);
            result[218] = Vec3f(-0.5877835f, 0.4924498f, 0.6033586f);
            result[219] = Vec3f( 0.5889584f,-0.7044897f, 0.0670131f);
            result[220] = Vec3f( 0.3876034f, 0.5092803f, 0.3326766f);
            result[221] = Vec3f(-0.1386341f,-0.1979343f, 0.9671085f);
            result[222] = Vec3f(-0.2261615f, 0.6989486f, 0.6602656f);
            result[223] = Vec3f(-0.3356336f,-0.2450224f, 0.3428091f);
            result[224] = Vec3f(-0.7903940f,-0.5389328f, 0.0996963f);
            result[225] = Vec3f( 0.0905635f, 0.4372772f, 0.1043102f);
            result[226] = Vec3f( 0.1154208f, 0.7638947f, 0.2562054f);
            result[227] = Vec3f(-0.1161993f,-0.6312574f, 0.1057057f);
            result[228] = Vec3f( 0.0768031f, 0.3640506f, 0.4155929f);
            result[229] = Vec3f(-0.2537028f, 0.4913075f, 0.4377136f);
            result[230] = Vec3f( 0.4471574f, 0.4785898f, 0.6605036f);
            result[231] = Vec3f(-0.1378626f,-0.6427196f, 0.4712319f);
            result[232] = Vec3f(-0.0464505f, 0.5821143f, 0.8106949f);
            result[233] = Vec3f( 0.2061791f, 0.0197810f, 0.8687551f);
            result[234] = Vec3f(-0.7013949f, 0.0338072f, 0.2938955f);
            result[235] = Vec3f(-0.1193594f,-0.3277916f, 0.3923806f);
            result[236] = Vec3f( 0.7433937f,-0.5401917f, 0.1731111f);
            result[237] = Vec3f( 0.6930833f, 0.2822657f, 0.5652205f);
            result[238] = Vec3f( 0.2436848f, 0.6380914f, 0.3632691f);
            result[239] = Vec3f( 0.2545015f,-0.8677190f, 0.3778328f);
            result[240] = Vec3f(-0.4148300f,-0.8272321f, 0.2346219f);
            result[241] = Vec3f( 0.9487383f,-0.1122704f, 0.0652237f);
            result[242] = Vec3f(-0.7472219f, 0.3900515f, 0.0890057f);
            result[243] = Vec3f(-0.2186950f, 0.3710142f, 0.8841208f);
            result[244] = Vec3f(-0.1716714f,-0.2274899f, 0.0346926f);
            result[245] = Vec3f( 0.2423224f,-0.2008140f, 0.9169320f);
            result[246] = Vec3f( 0.5465441f, 0.3110876f, 0.0467864f);
            result[247] = Vec3f( 0.3486149f, 0.6227300f, 0.1980367f);
            result[248] = Vec3f(-0.3005065f,-0.5587443f, 0.4367530f);
            result[249] = Vec3f(-0.1754836f, 0.2849348f, 0.4393976f);
            result[250] = Vec3f( 0.1980903f, 0.2482525f, 0.9353662f);
            result[251] = Vec3f(-0.0206489f, 0.3747551f, 0.6569139f);
            result[252] = Vec3f(-0.5234992f,-0.4873312f, 0.4494276f);
            result[253] = Vec3f( 0.3481586f, 0.3557148f, 0.8559875f);
            result[254] = Vec3f( 0.4390389f,-0.8137290f, 0.1388539f);
            result[255] = Vec3f( 0.0474650f,-0.7395972f, 0.0172653f);
        }
        break;
    }
    
    return result;
}

OSG_SYSTEM_DLLMAPPING std::vector<Vec3f> getPoissonHemisphereSurface(UInt32 size)
{
    std::vector<Vec3f> result;

    switch (size)
    {
        case  9:
        {
            result.resize(9);
            result[  0] = Vec3f( 0.6513404f, 0.7369828f, 0.1805881f);
            result[  1] = Vec3f(-0.8111976f, 0.1511025f, 0.5649128f);
            result[  2] = Vec3f(-0.3604937f,-0.6229930f, 0.6942075f);
            result[  3] = Vec3f(-0.2599698f, 0.9485580f, 0.1807029f);
            result[  4] = Vec3f( 0.0770181f,-0.9939462f, 0.0783525f);
            result[  5] = Vec3f( 0.7016660f,-0.3947407f, 0.5931649f);
            result[  6] = Vec3f(-0.8806694f,-0.4712496f, 0.0484277f);
            result[  7] = Vec3f( 0.9993548f,-0.0112582f, 0.0341070f);
            result[  8] = Vec3f( 0.2065955f, 0.3385255f, 0.9179971f);
        }
        break;
        case 16:
        {
            result.resize(16);
            result[  0] = Vec3f(-0.6031209f,-0.7847287f, 0.1429893f);
            result[  1] = Vec3f(-0.0612198f, 0.9292395f, 0.3643708f);
            result[  2] = Vec3f(-0.7725658f,-0.1451734f, 0.6181155f);
            result[  3] = Vec3f( 0.7728384f, 0.6341087f, 0.0250411f);
            result[  4] = Vec3f( 0.4394537f,-0.4080856f, 0.8002166f);
            result[  5] = Vec3f(-0.4986130f, 0.8650752f, 0.0550453f);
            result[  6] = Vec3f(-0.9850938f, 0.1688454f, 0.0328857f);
            result[  7] = Vec3f( 0.3804277f, 0.5957728f, 0.7073398f);
            result[  8] = Vec3f(-0.1897468f,-0.2760649f, 0.9422231f);
            result[  9] = Vec3f( 0.4158220f, 0.9094264f, 0.0059688f);
            result[ 10] = Vec3f( 0.2731500f,-0.8963506f, 0.3492060f);
            result[ 11] = Vec3f( 0.9217529f,-0.3651904f, 0.1304129f);
            result[ 12] = Vec3f( 0.8383053f, 0.1300419f, 0.5294652f);
            result[ 13] = Vec3f(-0.5362135f, 0.4729264f, 0.6991537f);
            result[ 14] = Vec3f(-0.1674406f,-0.9853690f, 0.0318062f);
            result[ 15] = Vec3f(-0.9116396f,-0.4109815f, 0.0027298f);
        }
        break;
        case 25:
        {
            result.resize(25);
            result[  0] = Vec3f(-0.3264852f,-0.3088168f, 0.8933306f);
            result[  1] = Vec3f( 0.6398686f,-0.7619276f, 0.1001724f);
            result[  2] = Vec3f(-0.4162486f, 0.4452916f, 0.7927500f);
            result[  3] = Vec3f( 0.2183759f, 0.9740275f, 0.0598528f);
            result[  4] = Vec3f( 0.3158219f,-0.9444906f, 0.0905207f);
            result[  5] = Vec3f( 0.1329421f,-0.7923043f, 0.5954664f);
            result[  6] = Vec3f( 0.1401903f, 0.7009590f, 0.6992877f);
            result[  7] = Vec3f( 0.4632508f,-0.5155269f, 0.7208542f);
            result[  8] = Vec3f(-0.1404605f, 0.9361153f, 0.3224267f);
            result[  9] = Vec3f( 0.9265115f,-0.3696331f, 0.0703404f);
            result[ 10] = Vec3f( 0.9007936f, 0.1330569f, 0.4133604f);
            result[ 11] = Vec3f(-0.2036328f,-0.9718592f, 0.1184201f);
            result[ 12] = Vec3f(-0.9325377f,-0.3609948f, 0.0075017f);
            result[ 13] = Vec3f( 0.6037406f, 0.5192587f, 0.6048700f);
            result[ 14] = Vec3f(-0.5900839f,-0.8042083f, 0.0710636f);
            result[ 15] = Vec3f( 0.9365105f, 0.3505861f, 0.0061152f);
            result[ 16] = Vec3f(-0.9569339f, 0.0223840f, 0.2894416f);
            result[ 17] = Vec3f( 0.7969688f,-0.2817173f, 0.5342996f);
            result[ 18] = Vec3f(-0.9298097f, 0.3655111f, 0.0430753f);
            result[ 19] = Vec3f(-0.4558157f,-0.6989592f, 0.5510790f);
            result[ 20] = Vec3f( 0.5184295f, 0.8205990f, 0.2405165f);
            result[ 21] = Vec3f(-0.8040851f,-0.3514958f, 0.4794767f);
            result[ 22] = Vec3f( 0.2819015f, 0.2253544f, 0.9326022f);
            result[ 23] = Vec3f(-0.5176718f, 0.7749651f, 0.3625534f);
            result[ 24] = Vec3f(-0.6951298f, 0.0371916f, 0.7179215f);
        }
        break;
        case 32:
        {
            result.resize(32);
            result[  0] = Vec3f( 0.9594793f, 0.2713531f, 0.0759413f);
            result[  1] = Vec3f( 0.7366973f,-0.6748095f, 0.0436950f);
            result[  2] = Vec3f(-0.6182737f,-0.4365165f, 0.6535984f);
            result[  3] = Vec3f( 0.5000790f, 0.8422243f, 0.2014426f);
            result[  4] = Vec3f( 0.3240041f,-0.9451860f, 0.0405578f);
            result[  5] = Vec3f( 0.2070787f, 0.2536267f, 0.9448767f);
            result[  6] = Vec3f(-0.5604941f, 0.6642008f, 0.4946551f);
            result[  7] = Vec3f( 0.9861063f,-0.0359834f, 0.1621711f);
            result[  8] = Vec3f( 0.8369470f, 0.5376990f, 0.1019782f);
            result[  9] = Vec3f( 0.1120167f, 0.8703934f, 0.4794451f);
            result[ 10] = Vec3f(-0.7212870f, 0.6883962f, 0.0765241f);
            result[ 11] = Vec3f( 0.2918493f,-0.6677075f, 0.6848289f);
            result[ 12] = Vec3f( 0.6972327f,-0.0053069f, 0.7168252f);
            result[ 13] = Vec3f( 0.1814413f, 0.9828540f, 0.0328183f);
            result[ 14] = Vec3f(-0.8488289f,-0.1411807f, 0.5094678f);
            result[ 15] = Vec3f( 0.6463391f,-0.4797738f, 0.5933488f);
            result[ 16] = Vec3f(-0.9288580f, 0.3556979f, 0.1034493f);
            result[ 17] = Vec3f(-0.9818569f,-0.1867808f, 0.0327113f);
            result[ 18] = Vec3f(-0.1303639f, 0.9914542f, 0.0048801f);
            result[ 19] = Vec3f(-0.5871508f,-0.7823284f, 0.2078853f);
            result[ 20] = Vec3f( 0.5098702f,-0.7953596f, 0.3277737f);
            result[ 21] = Vec3f(-0.5536759f, 0.3280455f, 0.7653948f);
            result[ 22] = Vec3f( 0.3918411f, 0.6230128f, 0.6769900f);
            result[ 23] = Vec3f( 0.9161885f,-0.3905641f, 0.0897685f);
            result[ 24] = Vec3f( 0.3337746f,-0.2869172f, 0.8979271f);
            result[ 25] = Vec3f(-0.1609366f,-0.9618386f, 0.2212826f);
            result[ 26] = Vec3f( 0.7313498f, 0.4093007f, 0.5455276f);
            result[ 27] = Vec3f(-0.2120185f, 0.6493430f, 0.7303436f);
            result[ 28] = Vec3f(-0.2326250f,-0.5807635f, 0.7801278f);
            result[ 29] = Vec3f(-0.3891391f, 0.8895468f, 0.2393266f);
            result[ 30] = Vec3f(-0.8405449f,-0.4994567f, 0.2098268f);
            result[ 31] = Vec3f(-0.1921223f,-0.1184460f, 0.9741969f);
        }
        break;
        case 64:
        {
            result.resize(64);
            result[  0] = Vec3f(-0.9175209f,-0.1098816f, 0.3822059f);
            result[  1] = Vec3f( 0.8181292f,-0.5576516f, 0.1403186f);
            result[  2] = Vec3f(-0.3275583f, 0.9447787f, 0.0099397f);
            result[  3] = Vec3f( 0.8024387f,-0.4373470f, 0.4059799f);
            result[  4] = Vec3f( 0.0996505f,-0.9079556f, 0.4070460f);
            result[  5] = Vec3f(-0.7556087f, 0.6093294f, 0.2403605f);
            result[  6] = Vec3f(-0.5946202f, 0.8032335f, 0.0352537f);
            result[  7] = Vec3f(-0.6394668f, 0.5613436f, 0.5253338f);
            result[  8] = Vec3f(-0.9241782f, 0.1441402f, 0.3537205f);
            result[  9] = Vec3f( 0.6101524f,-0.7886159f, 0.0761518f);
            result[ 10] = Vec3f( 0.9193560f, 0.0330813f, 0.3920333f);
            result[ 11] = Vec3f( 0.2017087f, 0.8903829f, 0.4080831f);
            result[ 12] = Vec3f( 0.5007505f, 0.1591742f, 0.8508304f);
            result[ 13] = Vec3f( 0.2505521f, 0.6056910f, 0.7552232f);
            result[ 14] = Vec3f( 0.7333356f, 0.2510625f, 0.6318121f);
            result[ 15] = Vec3f(-0.3698838f, 0.2021089f, 0.9068285f);
            result[ 16] = Vec3f( 0.9271060f,-0.2563737f, 0.2733989f);
            result[ 17] = Vec3f(-0.4080255f,-0.6263035f, 0.6642734f);
            result[ 18] = Vec3f( 0.2411629f,-0.6850221f, 0.6874483f);
            result[ 19] = Vec3f(-0.9857083f, 0.1571405f, 0.0607125f);
            result[ 20] = Vec3f( 0.4105351f, 0.7426665f, 0.5290627f);
            result[ 21] = Vec3f(-0.0419055f, 0.9629468f, 0.2664157f);
            result[ 22] = Vec3f(-0.1484573f,-0.9651502f, 0.2155122f);
            result[ 23] = Vec3f( 0.5495670f,-0.6043362f, 0.5768481f);
            result[ 24] = Vec3f(-0.7809041f,-0.6198524f, 0.0772776f);
            result[ 25] = Vec3f(-0.4430403f, 0.7385359f, 0.5082127f);
            result[ 26] = Vec3f( 0.4540229f,-0.2514810f, 0.8547634f);
            result[ 27] = Vec3f(-0.7569666f,-0.1166997f, 0.6429484f);
            result[ 28] = Vec3f(-0.8095657f,-0.3362686f, 0.4811725f);
            result[ 29] = Vec3f(-0.6208340f, 0.1035012f, 0.7770795f);
            result[ 30] = Vec3f(-0.1404388f,-0.7798461f, 0.6100140f);
            result[ 31] = Vec3f(-0.9979131f,-0.0645721f, 0.0002293f);
            result[ 32] = Vec3f( 0.6952778f, 0.7176602f, 0.0394037f);
            result[ 33] = Vec3f(-0.6421075f,-0.7651423f, 0.0474890f);
            result[ 34] = Vec3f(-0.3861632f,-0.9079689f, 0.1626976f);
            result[ 35] = Vec3f(-0.7373567f, 0.3025727f, 0.6039494f);
            result[ 36] = Vec3f( 0.7735795f,-0.1024598f, 0.6253613f);
            result[ 37] = Vec3f(-0.9011078f, 0.3662786f, 0.2320446f);
            result[ 38] = Vec3f( 0.0390444f,-0.9981368f, 0.0468891f);
            result[ 39] = Vec3f(-0.8557464f, 0.5173537f, 0.0065749f);
            result[ 40] = Vec3f( 0.2159591f, 0.9760203f, 0.0273124f);
            result[ 41] = Vec3f( 0.4290025f, 0.8690674f, 0.2463302f);
            result[ 42] = Vec3f( 0.9937650f,-0.0816062f, 0.0759715f);
            result[ 43] = Vec3f(-0.3802912f, 0.5080366f, 0.7728373f);
            result[ 44] = Vec3f(-0.4711162f,-0.2588231f, 0.8432438f);
            result[ 45] = Vec3f( 0.1889189f, 0.0004551f, 0.9819926f);
            result[ 46] = Vec3f(-0.0379296f, 0.7692099f, 0.6378695f);
            result[ 47] = Vec3f(-0.9040763f,-0.4072148f, 0.1296999f);
            result[ 48] = Vec3f(-0.4982569f,-0.7754228f, 0.3878912f);
            result[ 49] = Vec3f( 0.4417824f,-0.8966918f, 0.0277863f);
            result[ 50] = Vec3f(-0.0983264f,-0.1184211f, 0.9880832f);
            result[ 51] = Vec3f( 0.0136172f, 0.4283957f, 0.9034886f);
            result[ 52] = Vec3f( 0.8993707f, 0.4268111f, 0.0946824f);
            result[ 53] = Vec3f( 0.2193742f,-0.4231947f, 0.8790798f);
            result[ 54] = Vec3f( 0.6244735f, 0.5506701f, 0.5538911f);
            result[ 55] = Vec3f(-0.6799458f,-0.5514395f, 0.4833097f);
            result[ 56] = Vec3f( 0.4019088f,-0.7959107f, 0.4527642f);
            result[ 57] = Vec3f( 0.9204913f,-0.3887738f, 0.0393766f);
            result[ 58] = Vec3f(-0.2436526f, 0.8901935f, 0.3849530f);
            result[ 59] = Vec3f( 0.6583122f,-0.3645626f, 0.6585736f);
            result[ 60] = Vec3f( 0.2591135f,-0.9561100f, 0.1367981f);
            result[ 61] = Vec3f(-0.0587524f,-0.5709375f, 0.8188886f);
            result[ 62] = Vec3f( 0.8224902f, 0.4172583f, 0.3865301f);
            result[ 63] = Vec3f( 0.9822863f, 0.1841998f, 0.0344107f);
        }
        break;
        case 100:
        {
            result.resize(100);
            result[  0] = Vec3f( 0.8695702f,-0.1374103f, 0.4743059f);
            result[  1] = Vec3f(-0.5811173f,-0.4236789f, 0.6948373f);
            result[  2] = Vec3f(-0.3361940f,-0.5631542f, 0.7548715f);
            result[  3] = Vec3f(-0.7943749f, 0.6002738f, 0.0929509f);
            result[  4] = Vec3f( 0.9649194f, 0.1407528f, 0.2216283f);
            result[  5] = Vec3f( 0.2080282f, 0.9748736f, 0.0796600f);
            result[  6] = Vec3f( 0.1870026f, 0.6285478f, 0.7549554f);
            result[  7] = Vec3f( 0.0190449f,-0.9461783f, 0.3230848f);
            result[  8] = Vec3f( 0.7971471f, 0.3077702f, 0.5194555f);
            result[  9] = Vec3f( 0.2211927f, 0.7875584f, 0.5751743f);
            result[ 10] = Vec3f( 0.6187451f, 0.5673662f, 0.5433692f);
            result[ 11] = Vec3f( 0.4902487f, 0.2338505f, 0.8396250f);
            result[ 12] = Vec3f(-0.4356632f,-0.8928330f, 0.1142220f);
            result[ 13] = Vec3f(-0.9027769f,-0.3547341f, 0.2432234f);
            result[ 14] = Vec3f( 0.9726420f, 0.2321596f, 0.0083391f);
            result[ 15] = Vec3f(-0.8368831f,-0.2373695f, 0.4932367f);
            result[ 16] = Vec3f(-0.2809686f,-0.9597068f, 0.0044130f);
            result[ 17] = Vec3f( 0.8578975f, 0.5081456f, 0.0761571f);
            result[ 18] = Vec3f( 0.3437923f,-0.8279684f, 0.4430296f);
            result[ 19] = Vec3f(-0.9624832f, 0.2713175f, 0.0035818f);
            result[ 20] = Vec3f(-0.4146137f,-0.3273126f, 0.8490947f);
            result[ 21] = Vec3f(-0.6148465f, 0.1831442f, 0.7670866f);
            result[ 22] = Vec3f(-0.2160440f, 0.9753015f, 0.0459569f);
            result[ 23] = Vec3f(-0.3383604f, 0.9068159f, 0.2513902f);
            result[ 24] = Vec3f(-0.5836975f,-0.0927199f, 0.8066599f);
            result[ 25] = Vec3f( 0.2632141f, 0.9123227f, 0.3136648f);
            result[ 26] = Vec3f( 0.4503570f, 0.8919137f, 0.0408481f);
            result[ 27] = Vec3f( 0.1999648f,-0.9526354f, 0.2291285f);
            result[ 28] = Vec3f( 0.6466554f,-0.7324772f, 0.2128702f);
            result[ 29] = Vec3f( 0.5978056f,-0.5505323f, 0.5827029f);
            result[ 30] = Vec3f(-0.2950497f,-0.8840044f, 0.3626045f);
            result[ 31] = Vec3f(-0.9083281f, 0.2526946f, 0.3332950f);
            result[ 32] = Vec3f( 0.9990072f, 0.0373053f, 0.0243475f);
            result[ 33] = Vec3f( 0.5235414f,-0.7457789f, 0.4119688f);
            result[ 34] = Vec3f( 0.8703851f,-0.4922078f, 0.0127001f);
            result[ 35] = Vec3f(-0.5318567f, 0.5207080f, 0.6678261f);
            result[ 36] = Vec3f( 0.8211557f,-0.3375135f, 0.4602043f);
            result[ 37] = Vec3f(-0.1232147f,-0.5365041f, 0.8348542f);
            result[ 38] = Vec3f( 0.3863440f, 0.6498703f, 0.6545280f);
            result[ 39] = Vec3f(-0.0897927f, 0.3165740f, 0.9443083f);
            result[ 40] = Vec3f(-0.8648395f, 0.4217930f, 0.2722925f);
            result[ 41] = Vec3f( 0.3127699f,-0.9496689f, 0.0174346f);
            result[ 42] = Vec3f(-0.0616730f,-0.9976529f, 0.0297494f);
            result[ 43] = Vec3f( 0.1388565f, 0.1757390f, 0.9745946f);
            result[ 44] = Vec3f(-0.2259063f,-0.1993321f, 0.9535371f);
            result[ 45] = Vec3f( 0.7948393f, 0.1124045f, 0.5963185f);
            result[ 46] = Vec3f( 0.7812381f, 0.5139218f, 0.3543322f);
            result[ 47] = Vec3f( 0.3203988f, 0.4048984f, 0.8563889f);
            result[ 48] = Vec3f( 0.5823206f,-0.8128222f, 0.0149221f);
            result[ 49] = Vec3f(-0.0711575f, 0.0684845f, 0.9951113f);
            result[ 50] = Vec3f(-0.0108124f, 0.9919721f, 0.1259935f);
            result[ 51] = Vec3f( 0.0770396f,-0.7268777f, 0.6824321f);
            result[ 52] = Vec3f( 0.5846650f, 0.7918539f, 0.1764490f);
            result[ 53] = Vec3f( 0.6552947f, 0.6782624f, 0.3324893f);
            result[ 54] = Vec3f( 0.9908917f,-0.1342096f, 0.0110149f);
            result[ 55] = Vec3f(-0.1961182f,-0.7835459f, 0.5895705f);
            result[ 56] = Vec3f( 0.1466723f,-0.1378034f, 0.9795394f);
            result[ 57] = Vec3f( 0.6314967f,-0.1701058f, 0.7564892f);
            result[ 58] = Vec3f(-0.0537874f, 0.6469396f, 0.7606419f);
            result[ 59] = Vec3f( 0.2559310f,-0.6053322f, 0.7537056f);
            result[ 60] = Vec3f(-0.5202298f,-0.7891082f, 0.3266028f);
            result[ 61] = Vec3f(-0.7606510f, 0.3076640f, 0.5716231f);
            result[ 62] = Vec3f(-0.5181623f,-0.6522971f, 0.5531874f);
            result[ 63] = Vec3f(-0.7586607f,-0.0878969f, 0.6455293f);
            result[ 64] = Vec3f( 0.3317990f, 0.0020130f, 0.9433480f);
            result[ 65] = Vec3f(-0.6139573f,-0.7813027f, 0.1123498f);
            result[ 66] = Vec3f(-0.3248106f, 0.0350145f, 0.9451307f);
            result[ 67] = Vec3f(-0.6350643f, 0.6804709f, 0.3655853f);
            result[ 68] = Vec3f( 0.4441549f,-0.8726161f, 0.2031444f);
            result[ 69] = Vec3f(-0.7318862f,-0.5428864f, 0.4118459f);
            result[ 70] = Vec3f(-0.8926299f, 0.4501840f, 0.0233720f);
            result[ 71] = Vec3f( 0.0826229f, 0.4579138f, 0.8851488f);
            result[ 72] = Vec3f( 0.7864387f,-0.5147595f, 0.3413748f);
            result[ 73] = Vec3f( 0.1474199f,-0.4205370f, 0.8952184f);
            result[ 74] = Vec3f(-0.3363337f, 0.5289388f, 0.7791684f);
            result[ 75] = Vec3f( 0.5856802f, 0.4074985f, 0.7006594f);
            result[ 76] = Vec3f(-0.4883643f, 0.8109531f, 0.3222661f);
            result[ 77] = Vec3f( 0.9677050f,-0.0489270f, 0.2472918f);
            result[ 78] = Vec3f(-0.7375805f,-0.6638935f, 0.1233713f);
            result[ 79] = Vec3f(-0.6960620f, 0.5062116f, 0.5091634f);
            result[ 80] = Vec3f(-0.4108027f, 0.3011788f, 0.8605419f);
            result[ 81] = Vec3f( 0.7837092f,-0.6190611f, 0.0506288f);
            result[ 82] = Vec3f(-0.8405587f,-0.5413804f, 0.0191912f);
            result[ 83] = Vec3f(-0.8418369f, 0.0850299f, 0.5329920f);
            result[ 84] = Vec3f(-0.4629441f, 0.8807414f, 0.0998859f);
            result[ 85] = Vec3f( 0.4436748f, 0.7696393f, 0.4591383f);
            result[ 86] = Vec3f(-0.1825169f,-0.9613677f, 0.2060579f);
            result[ 87] = Vec3f(-0.9224327f,-0.3861073f, 0.0062392f);
            result[ 88] = Vec3f(-0.4377888f, 0.7014622f, 0.5623983f);
            result[ 89] = Vec3f(-0.1577309f, 0.7984814f, 0.5809891f);
            result[ 90] = Vec3f( 0.7522033f, 0.6524170f, 0.0924249f);
            result[ 91] = Vec3f(-0.6097924f, 0.7906058f, 0.0556390f);
            result[ 92] = Vec3f(-0.0037394f, 0.9202082f, 0.3914114f);
            result[ 93] = Vec3f( 0.9205484f,-0.3640547f, 0.1416148f);
            result[ 94] = Vec3f(-0.9793177f,-0.1964859f, 0.0482710f);
            result[ 95] = Vec3f(-0.9489232f,-0.1361463f, 0.2846207f);
            result[ 96] = Vec3f(-0.9911827f, 0.0737688f, 0.1100680f);
            result[ 97] = Vec3f( 0.9182634f, 0.3461501f, 0.1922822f);
            result[ 98] = Vec3f( 0.1310552f,-0.9911481f, 0.0212123f);
            result[ 99] = Vec3f( 0.4592042f,-0.3160918f, 0.8301912f);
        }
        break;
        case 128:
        {
            result.resize(128);
            result[  0] = Vec3f(-0.7608300f,-0.6444190f, 0.0765635f);
            result[  1] = Vec3f(-0.7524815f,-0.4591188f, 0.4722092f);
            result[  2] = Vec3f(-0.9896622f,-0.0224961f, 0.1416424f);
            result[  3] = Vec3f(-0.2311260f,-0.3374187f, 0.9125401f);
            result[  4] = Vec3f( 0.5580291f, 0.7669290f, 0.3168964f);
            result[  5] = Vec3f(-0.1363733f, 0.2132907f, 0.9674241f);
            result[  6] = Vec3f( 0.1334605f, 0.9905366f, 0.0320245f);
            result[  7] = Vec3f( 0.7681995f, 0.4843988f, 0.4186017f);
            result[  8] = Vec3f(-0.6164779f, 0.7443591f, 0.2566797f);
            result[  9] = Vec3f(-0.3555731f, 0.0540643f, 0.9330835f);
            result[ 10] = Vec3f(-0.1356636f,-0.9888645f, 0.0611765f);
            result[ 11] = Vec3f(-0.0993872f,-0.8769062f, 0.4702741f);
            result[ 12] = Vec3f(-0.8155187f, 0.4837385f, 0.3176890f);
            result[ 13] = Vec3f( 0.7730881f,-0.1300928f, 0.6208145f);
            result[ 14] = Vec3f( 0.1778764f,-0.6178801f, 0.7658879f);
            result[ 15] = Vec3f( 0.5482829f,-0.8064358f, 0.2214658f);
            result[ 16] = Vec3f(-0.3517372f,-0.4810381f, 0.8030462f);
            result[ 17] = Vec3f(-0.8956974f, 0.0238957f, 0.4440217f);
            result[ 18] = Vec3f(-0.7458802f, 0.1989305f, 0.6356803f);
            result[ 19] = Vec3f(-0.5186746f,-0.7062705f, 0.4818285f);
            result[ 20] = Vec3f(-0.8302762f, 0.5509309f, 0.0843600f);
            result[ 21] = Vec3f(-0.7352731f, 0.6745316f, 0.0661870f);
            result[ 22] = Vec3f( 0.7174357f, 0.3048927f, 0.6263596f);
            result[ 23] = Vec3f( 0.9598215f, 0.1459222f, 0.2396861f);
            result[ 24] = Vec3f(-0.6652525f,-0.7466184f, 0.0002248f);
            result[ 25] = Vec3f( 0.0981457f,-0.9149597f, 0.3914283f);
            result[ 26] = Vec3f( 0.6805944f,-0.7178113f, 0.1467590f);
            result[ 27] = Vec3f(-0.3574672f,-0.6569094f, 0.6638427f);
            result[ 28] = Vec3f(-0.5423299f, 0.0947400f, 0.8348069f);
            result[ 29] = Vec3f(-0.6131748f,-0.5660267f, 0.5510266f);
            result[ 30] = Vec3f( 0.5804927f,-0.4313008f, 0.6906575f);
            result[ 31] = Vec3f(-0.3360049f,-0.8733343f, 0.3526866f);
            result[ 32] = Vec3f( 0.4530430f,-0.5975037f, 0.6616204f);
            result[ 33] = Vec3f( 0.3715444f,-0.3659208f, 0.8532624f);
            result[ 34] = Vec3f( 0.5767310f, 0.5525499f, 0.6017225f);
            result[ 35] = Vec3f(-0.8871629f, 0.2058609f, 0.4129932f);
            result[ 36] = Vec3f(-0.4253123f,-0.2789683f, 0.8609797f);
            result[ 37] = Vec3f(-0.1577096f, 0.5935920f, 0.7891617f);
            result[ 38] = Vec3f( 0.4741260f, 0.3645120f, 0.8014584f);
            result[ 39] = Vec3f(-0.6937090f, 0.3845864f, 0.6089838f);
            result[ 40] = Vec3f(-0.9533715f, 0.3014048f, 0.0154287f);
            result[ 41] = Vec3f( 0.9972606f, 0.0737714f, 0.0053921f);
            result[ 42] = Vec3f(-0.0453089f,-0.2412200f, 0.9694122f);
            result[ 43] = Vec3f( 0.4981920f,-0.7536922f, 0.4286640f);
            result[ 44] = Vec3f( 0.8368248f,-0.3098342f, 0.4513614f);
            result[ 45] = Vec3f(-0.9915174f,-0.1299573f, 0.0020630f);
            result[ 46] = Vec3f(-0.9649135f,-0.2621089f, 0.0155212f);
            result[ 47] = Vec3f( 0.7615698f,-0.5239199f, 0.3814701f);
            result[ 48] = Vec3f( 0.9641805f, 0.2649863f, 0.0117493f);
            result[ 49] = Vec3f( 0.2340463f, 0.9569092f, 0.1718930f);
            result[ 50] = Vec3f( 0.2488699f,-0.1917731f, 0.9493613f);
            result[ 51] = Vec3f(-0.8432211f,-0.5309276f, 0.0842258f);
            result[ 52] = Vec3f( 0.4015914f, 0.8020623f, 0.4420637f);
            result[ 53] = Vec3f( 0.0503213f,-0.9887807f, 0.1406429f);
            result[ 54] = Vec3f(-0.2340627f,-0.7786940f, 0.5821084f);
            result[ 55] = Vec3f( 0.3750003f, 0.1338223f, 0.9173148f);
            result[ 56] = Vec3f(-0.3967822f, 0.5678861f, 0.7211583f);
            result[ 57] = Vec3f( 0.5601878f, 0.1106692f, 0.8209397f);
            result[ 58] = Vec3f( 0.2714210f, 0.8899838f, 0.3664145f);
            result[ 59] = Vec3f(-0.3092315f, 0.9501842f, 0.0390647f);
            result[ 60] = Vec3f(-0.1788045f, 0.9750228f, 0.1317554f);
            result[ 61] = Vec3f(-0.6903441f,-0.2659212f, 0.6728379f);
            result[ 62] = Vec3f( 0.7869595f,-0.5982687f, 0.1508947f);
            result[ 63] = Vec3f( 0.8801569f, 0.1353046f, 0.4549906f);
            result[ 64] = Vec3f(-0.1546859f,-0.9496132f, 0.2725934f);
            result[ 65] = Vec3f(-0.8952098f, 0.4258017f, 0.1315005f);
            result[ 66] = Vec3f( 0.9944921f,-0.0670256f, 0.0805792f);
            result[ 67] = Vec3f(-0.2334315f, 0.3944081f, 0.8887925f);
            result[ 68] = Vec3f( 0.0727415f,-0.4360338f, 0.8969857f);
            result[ 69] = Vec3f(-0.5423452f,-0.4449741f, 0.7126428f);
            result[ 70] = Vec3f( 0.9230975f,-0.2994832f, 0.2412484f);
            result[ 71] = Vec3f(-0.7032092f, 0.0167688f, 0.7107852f);
            result[ 72] = Vec3f(-0.1181937f,-0.5336328f, 0.8374164f);
            result[ 73] = Vec3f( 0.4313740f,-0.1054992f, 0.8959835f);
            result[ 74] = Vec3f(-0.9557607f,-0.1830079f, 0.2302817f);
            result[ 75] = Vec3f( 0.2886562f,-0.9468148f, 0.1421947f);
            result[ 76] = Vec3f( 0.2636253f,-0.7903001f, 0.5531071f);
            result[ 77] = Vec3f(-0.9928221f, 0.1195957f, 0.0010972f);
            result[ 78] = Vec3f( 0.3758599f, 0.9241461f, 0.0684343f);
            result[ 79] = Vec3f(-0.1062888f,-0.0129138f, 0.9942514f);
            result[ 80] = Vec3f( 0.1812215f, 0.5886744f, 0.7877952f);
            result[ 81] = Vec3f(-0.0196428f, 0.9963196f, 0.0834344f);
            result[ 82] = Vec3f(-0.9171534f,-0.3929406f, 0.0665377f);
            result[ 83] = Vec3f(-0.7576786f,-0.5754301f, 0.3079016f);
            result[ 84] = Vec3f(-0.8647315f,-0.4067469f, 0.2946123f);
            result[ 85] = Vec3f(-0.4735852f, 0.8569611f, 0.2033093f);
            result[ 86] = Vec3f( 0.6280479f,-0.5761767f, 0.5230451f);
            result[ 87] = Vec3f( 0.3318766f, 0.6737289f, 0.6602630f);
            result[ 88] = Vec3f( 0.1647545f,-0.9861262f, 0.0202761f);
            result[ 89] = Vec3f( 0.0014375f, 0.6907037f, 0.7231364f);
            result[ 90] = Vec3f( 0.1883841f, 0.8067574f, 0.5600481f);
            result[ 91] = Vec3f(-0.5448864f,-0.1180109f, 0.8301640f);
            result[ 92] = Vec3f(-0.8720600f,-0.2057028f, 0.4440696f);
            result[ 93] = Vec3f( 0.6466249f, 0.7560917f, 0.1010030f);
            result[ 94] = Vec3f( 0.7551808f, 0.1200627f, 0.6444275f);
            result[ 95] = Vec3f( 0.0843959f,-0.7576360f, 0.6471978f);
            result[ 96] = Vec3f( 0.7693104f, 0.6388589f, 0.0045508f);
            result[ 97] = Vec3f( 0.9714803f,-0.2367900f, 0.0125091f);
            result[ 98] = Vec3f(-0.3413289f, 0.7726485f, 0.5352653f);
            result[ 99] = Vec3f(-0.5006468f,-0.8088924f, 0.3082951f);
            result[100] = Vec3f(-0.5399641f,-0.8357088f, 0.1001474f);
            result[101] = Vec3f( 0.5126103f,-0.8580737f, 0.0306609f);
            result[102] = Vec3f( 0.9050444f,-0.4162791f, 0.0872140f);
            result[103] = Vec3f( 0.5245290f, 0.8479400f, 0.0765967f);
            result[104] = Vec3f(-0.1044838f, 0.8666609f, 0.4878339f);
            result[105] = Vec3f(-0.6014997f, 0.5423692f, 0.5865439f);
            result[106] = Vec3f(-0.7231219f, 0.6133346f, 0.3176720f);
            result[107] = Vec3f( 0.2921586f,-0.8863945f, 0.3590936f);
            result[108] = Vec3f( 0.4195348f,-0.8863072f, 0.1960869f);
            result[109] = Vec3f( 0.0059271f, 0.4913616f, 0.8709355f);
            result[110] = Vec3f(-0.9597322f, 0.1185025f, 0.2546984f);
            result[111] = Vec3f( 0.5909929f,-0.2509865f, 0.7666375f);
            result[112] = Vec3f(-0.5125292f, 0.3125611f, 0.7997621f);
            result[113] = Vec3f( 0.6457751f, 0.6358930f, 0.4226282f);
            result[114] = Vec3f( 0.9477274f,-0.0765373f, 0.3097657f);
            result[115] = Vec3f( 0.1778356f, 0.1802291f, 0.9674151f);
            result[116] = Vec3f(-0.3134257f,-0.9477835f, 0.0589130f);
            result[117] = Vec3f(-0.6520618f,-0.7252353f, 0.2210184f);
            result[118] = Vec3f(-0.3008432f, 0.9148827f, 0.2692266f);
            result[119] = Vec3f( 0.2726327f, 0.4202039f, 0.8655057f);
            result[120] = Vec3f( 0.7264121f, 0.6548208f, 0.2086508f);
            result[121] = Vec3f( 0.8772102f, 0.3981217f, 0.2683306f);
            result[122] = Vec3f(-0.0775191f, 0.9532920f, 0.2919336f);
            result[123] = Vec3f(-0.6056327f, 0.7954533f, 0.0215200f);
            result[124] = Vec3f(-0.4873884f, 0.7679427f, 0.4155919f);
            result[125] = Vec3f( 0.0669272f, 0.9136643f, 0.4009218f);
            result[126] = Vec3f(-0.9257552f, 0.2938146f, 0.2380133f);
            result[127] = Vec3f( 0.8558607f, 0.5072445f, 0.1010223f);
        }
        break;
        case 256:
        {
            result.resize(256);
            result[  0] = Vec3f( 0.3322311f, 0.7609410f, 0.5573071f);
            result[  1] = Vec3f(-0.2146433f,-0.9072417f, 0.3617192f);
            result[  2] = Vec3f(-0.7894390f, 0.6136514f, 0.0147656f);
            result[  3] = Vec3f(-0.0206632f, 0.8466874f, 0.5316893f);
            result[  4] = Vec3f(-0.1247667f,-0.1727051f, 0.9770395f);
            result[  5] = Vec3f( 0.0440115f, 0.7253013f, 0.6870233f);
            result[  6] = Vec3f( 0.5878338f,-0.5859017f, 0.5578266f);
            result[  7] = Vec3f(-0.8608364f, 0.4915858f, 0.1315452f);
            result[  8] = Vec3f(-0.3254603f,-0.8048258f, 0.4963175f);
            result[  9] = Vec3f( 0.7878979f,-0.5845045f, 0.1938333f);
            result[ 10] = Vec3f(-0.2447669f,-0.9606748f, 0.1311224f);
            result[ 11] = Vec3f(-0.6089739f, 0.7931677f, 0.0059841f);
            result[ 12] = Vec3f( 0.4550560f,-0.7973140f, 0.3965027f);
            result[ 13] = Vec3f(-0.0371629f,-0.9993051f, 0.0028861f);
            result[ 14] = Vec3f(-0.5856020f, 0.4218146f, 0.6922014f);
            result[ 15] = Vec3f(-0.2374395f, 0.4894252f, 0.8390980f);
            result[ 16] = Vec3f(-0.8234189f,-0.5577342f, 0.1044696f);
            result[ 17] = Vec3f( 0.3743385f,-0.5780103f, 0.7251033f);
            result[ 18] = Vec3f(-0.7235954f,-0.3583033f, 0.5899392f);
            result[ 19] = Vec3f(-0.4061027f,-0.3240649f, 0.8544370f);
            result[ 20] = Vec3f( 0.5088736f, 0.8213709f, 0.2576772f);
            result[ 21] = Vec3f(-0.9906957f, 0.1359130f, 0.0070609f);
            result[ 22] = Vec3f( 0.2466441f,-0.0235749f, 0.9688193f);
            result[ 23] = Vec3f( 0.2855068f, 0.3590110f, 0.8885927f);
            result[ 24] = Vec3f(-0.8787813f, 0.0766190f, 0.4710340f);
            result[ 25] = Vec3f( 0.0416914f,-0.1539372f, 0.9872007f);
            result[ 26] = Vec3f(-0.4048695f,-0.6826907f, 0.6082878f);
            result[ 27] = Vec3f(-0.3433263f,-0.9390561f, 0.0173369f);
            result[ 28] = Vec3f(-0.9767556f, 0.1501595f, 0.1529726f);
            result[ 29] = Vec3f( 0.9929094f, 0.1130824f, 0.0366511f);
            result[ 30] = Vec3f( 0.5008569f,-0.7052208f, 0.5018027f);
            result[ 31] = Vec3f(-0.6430489f,-0.7458300f, 0.1738555f);
            result[ 32] = Vec3f( 0.0917086f, 0.9274412f, 0.3625496f);
            result[ 33] = Vec3f( 0.2624373f,-0.9649401f, 0.0041612f);
            result[ 34] = Vec3f( 0.8625327f, 0.5030553f, 0.0545217f);
            result[ 35] = Vec3f( 0.1031793f, 0.0295967f, 0.9942223f);
            result[ 36] = Vec3f(-0.2387159f,-0.4921734f, 0.8371261f);
            result[ 37] = Vec3f(-0.7754906f, 0.1027361f, 0.6229444f);
            result[ 38] = Vec3f(-0.3164621f, 0.9076176f, 0.2758296f);
            result[ 39] = Vec3f( 0.8455583f, 0.3960871f, 0.3579751f);
            result[ 40] = Vec3f(-0.9664593f, 0.2553785f, 0.0271697f);
            result[ 41] = Vec3f( 0.9496176f, 0.3107007f, 0.0411275f);
            result[ 42] = Vec3f( 0.3464795f,-0.8860558f, 0.3079889f);
            result[ 43] = Vec3f( 0.7921035f, 0.3411779f, 0.5061319f);
            result[ 44] = Vec3f(-0.5490834f, 0.2692961f, 0.7911934f);
            result[ 45] = Vec3f( 0.2124618f, 0.7479713f, 0.6288076f);
            result[ 46] = Vec3f(-0.9227375f, 0.2943671f, 0.2488041f);
            result[ 47] = Vec3f(-0.2706190f,-0.6133465f, 0.7420051f);
            result[ 48] = Vec3f( 0.4741890f, 0.7560312f, 0.4511780f);
            result[ 49] = Vec3f( 0.9703417f, 0.1924768f, 0.1462524f);
            result[ 50] = Vec3f( 0.8649141f,-0.4642179f, 0.1908546f);
            result[ 51] = Vec3f( 0.7532129f,-0.4537156f, 0.4762483f);
            result[ 52] = Vec3f( 0.1844484f,-0.3468214f, 0.9196160f);
            result[ 53] = Vec3f(-0.5629944f,-0.8137549f, 0.1443614f);
            result[ 54] = Vec3f(-0.4486539f,-0.1657708f, 0.8781968f);
            result[ 55] = Vec3f( 0.7649511f, 0.4856444f, 0.4230831f);
            result[ 56] = Vec3f(-0.9802684f,-0.1871611f, 0.0635982f);
            result[ 57] = Vec3f(-0.1099948f, 0.6990084f, 0.7066035f);
            result[ 58] = Vec3f(-0.3732802f, 0.4824168f, 0.7924241f);
            result[ 59] = Vec3f(-0.6315067f,-0.7746940f, 0.0323783f);
            result[ 60] = Vec3f(-0.0928302f,-0.8538201f, 0.5122244f);
            result[ 61] = Vec3f(-0.6502455f,-0.1034285f, 0.7526509f);
            result[ 62] = Vec3f(-0.4419450f, 0.5734513f, 0.6898102f);
            result[ 63] = Vec3f(-0.6699188f, 0.0439994f, 0.7411295f);
            result[ 64] = Vec3f( 0.1532249f,-0.8853847f, 0.4388807f);
            result[ 65] = Vec3f( 0.3773172f, 0.0352753f, 0.9254120f);
            result[ 66] = Vec3f( 0.5313520f,-0.8397915f, 0.1114231f);
            result[ 67] = Vec3f( 0.5901859f, 0.7910975f, 0.1607649f);
            result[ 68] = Vec3f( 0.3345186f,-0.7255032f, 0.6014503f);
            result[ 69] = Vec3f( 0.6161536f, 0.5973328f, 0.5133695f);
            result[ 70] = Vec3f( 0.9891248f,-0.1026872f, 0.1052968f);
            result[ 71] = Vec3f(-0.1444245f, 0.2399486f, 0.9599824f);
            result[ 72] = Vec3f( 0.5843810f, 0.6917967f, 0.4241652f);
            result[ 73] = Vec3f( 0.6185272f,-0.3061671f, 0.7236614f);
            result[ 74] = Vec3f(-0.3583760f, 0.9266678f, 0.1133729f);
            result[ 75] = Vec3f(-0.2743990f, 0.9615067f, 0.0144967f);
            result[ 76] = Vec3f(-0.5389408f,-0.2534929f, 0.8032959f);
            result[ 77] = Vec3f(-0.8440425f, 0.5362744f, 0.0014311f);
            result[ 78] = Vec3f( 0.0940489f,-0.9955660f, 0.0017795f);
            result[ 79] = Vec3f(-0.9266453f, 0.1387524f, 0.3493941f);
            result[ 80] = Vec3f(-0.4537723f, 0.8781595f, 0.1514153f);
            result[ 81] = Vec3f(-0.3079271f, 0.0231385f, 0.9511285f);
            result[ 82] = Vec3f( 0.0443512f,-0.6380391f, 0.7687256f);
            result[ 83] = Vec3f( 0.1014992f, 0.8139258f, 0.5720338f);
            result[ 84] = Vec3f(-0.8986264f,-0.1371211f, 0.4167354f);
            result[ 85] = Vec3f( 0.5946739f, 0.8039657f, 0.0014549f);
            result[ 86] = Vec3f(-0.6350651f,-0.4699311f, 0.6130719f);
            result[ 87] = Vec3f( 0.3756168f, 0.2014812f, 0.9046089f);
            result[ 88] = Vec3f( 0.8597654f, 0.1708224f, 0.4812725f);
            result[ 89] = Vec3f( 0.8280083f,-0.5581076f, 0.0540197f);
            result[ 90] = Vec3f( 0.2242289f, 0.1224794f, 0.9668093f);
            result[ 91] = Vec3f( 0.3158388f,-0.1794667f, 0.9316853f);
            result[ 92] = Vec3f( 0.7304608f, 0.1187491f, 0.6725516f);
            result[ 93] = Vec3f(-0.1552896f, 0.9459540f, 0.2847036f);
            result[ 94] = Vec3f(-0.0959483f,-0.9840362f, 0.1498891f);
            result[ 95] = Vec3f(-0.4959065f,-0.0197069f, 0.8681523f);
            result[ 96] = Vec3f(-0.2493455f, 0.7526019f, 0.6094401f);
            result[ 97] = Vec3f( 0.7388718f,-0.0574007f, 0.6713967f);
            result[ 98] = Vec3f(-0.9330272f,-0.3358490f, 0.1290959f);
            result[ 99] = Vec3f( 0.3088146f, 0.6288022f, 0.7136115f);
            result[100] = Vec3f(-0.4729079f, 0.3820715f, 0.7939644f);
            result[101] = Vec3f( 0.5077488f, 0.3798370f, 0.7732497f);
            result[102] = Vec3f(-0.1440119f,-0.9895440f, 0.0079471f);
            result[103] = Vec3f( 0.5705425f,-0.0143737f, 0.8211423f);
            result[104] = Vec3f(-0.6919537f, 0.2866232f, 0.6626065f);
            result[105] = Vec3f( 0.1343392f, 0.9858224f, 0.1005336f);
            result[106] = Vec3f( 0.3566058f,-0.9251928f, 0.1298097f);
            result[107] = Vec3f(-0.9608999f,-0.2768139f, 0.0067486f);
            result[108] = Vec3f( 0.2236264f,-0.7854541f, 0.5771075f);
            result[109] = Vec3f(-0.8440855f, 0.1910094f, 0.5010340f);
            result[110] = Vec3f( 0.9328070f,-0.3343304f, 0.1345149f);
            result[111] = Vec3f(-0.9704831f,-0.0531990f, 0.2352286f);
            result[112] = Vec3f(-0.1445196f, 0.9833897f, 0.1098116f);
            result[113] = Vec3f( 0.4421989f,-0.2694935f, 0.8554726f);
            result[114] = Vec3f(-0.6868846f, 0.7266703f, 0.0118235f);
            result[115] = Vec3f( 0.6959484f,-0.6670881f, 0.2657997f);
            result[116] = Vec3f( 0.9115678f, 0.3337572f, 0.2401046f);
            result[117] = Vec3f(-0.6585093f,-0.6828269f, 0.3164064f);
            result[118] = Vec3f( 0.0559220f, 0.5422999f, 0.8383219f);
            result[119] = Vec3f(-0.4395138f,-0.7878980f, 0.4313286f);
            result[120] = Vec3f(-0.8211102f,-0.2064912f, 0.5321085f);
            result[121] = Vec3f( 0.5139912f, 0.2490456f, 0.8208467f);
            result[122] = Vec3f(-0.7774665f, 0.4647543f, 0.4237326f);
            result[123] = Vec3f( 0.0832959f,-0.7417107f, 0.6655276f);
            result[124] = Vec3f(-0.7821978f,-0.4447536f, 0.4363037f);
            result[125] = Vec3f(-0.5534712f, 0.6056529f, 0.5717116f);
            result[126] = Vec3f(-0.7603289f,-0.5964406f, 0.2572130f);
            result[127] = Vec3f( 0.5883265f,-0.7702121f, 0.2462627f);
            result[128] = Vec3f( 0.4525341f,-0.4720839f, 0.7565380f);
            result[129] = Vec3f(-0.2255542f, 0.8842049f, 0.4090317f);
            result[130] = Vec3f( 0.7742677f, 0.2319914f, 0.5888034f);
            result[131] = Vec3f( 0.4742229f,-0.6160647f, 0.6289490f);
            result[132] = Vec3f(-0.1354676f, 0.8065665f, 0.5754120f);
            result[133] = Vec3f( 0.7764326f,-0.2585593f, 0.5747169f);
            result[134] = Vec3f( 0.1040783f,-0.9617832f, 0.2532605f);
            result[135] = Vec3f( 0.9092943f,-0.4140318f, 0.0419703f);
            result[136] = Vec3f(-0.4547639f,-0.5737391f, 0.6811852f);
            result[137] = Vec3f(-0.9992139f, 0.0387617f, 0.0083091f);
            result[138] = Vec3f(-0.5293736f, 0.8478240f, 0.0309529f);
            result[139] = Vec3f(-0.5436237f, 0.8212897f, 0.1730793f);
            result[140] = Vec3f(-0.7998759f, 0.5803834f, 0.1528191f);
            result[141] = Vec3f( 0.9072796f, 0.4195639f, 0.0284604f);
            result[142] = Vec3f(-0.8432377f,-0.4560009f, 0.2846285f);
            result[143] = Vec3f( 0.4165747f, 0.8385029f, 0.3512525f);
            result[144] = Vec3f( 0.7264827f, 0.6871840f, 0.0009862f);
            result[145] = Vec3f(-0.7302907f, 0.6729602f, 0.1174737f);
            result[146] = Vec3f( 0.0604579f, 0.9981691f, 0.0017792f);
            result[147] = Vec3f( 0.9589216f,-0.0981956f, 0.2661334f);
            result[148] = Vec3f( 0.9311520f, 0.1590673f, 0.3281057f);
            result[149] = Vec3f( 0.1289959f, 0.3212083f, 0.9381819f);
            result[150] = Vec3f(-0.9109063f, 0.4048812f, 0.0795033f);
            result[151] = Vec3f(-0.0257819f, 0.3224454f, 0.9462369f);
            result[152] = Vec3f(-0.7931890f, 0.3197675f, 0.5182662f);
            result[153] = Vec3f(-0.3424345f, 0.3592476f, 0.8681473f);
            result[154] = Vec3f( 0.2415769f, 0.9703816f, 0.0005073f);
            result[155] = Vec3f(-0.8076871f, 0.5132093f, 0.2902721f);
            result[156] = Vec3f( 0.4144094f, 0.6611493f, 0.6254171f);
            result[157] = Vec3f(-0.5215593f, 0.7343366f, 0.4344257f);
            result[158] = Vec3f(-0.0031721f,-0.3807108f, 0.9246887f);
            result[159] = Vec3f( 0.4651915f,-0.8850718f, 0.0156418f);
            result[160] = Vec3f(-0.7415262f, 0.6078486f, 0.2840053f);
            result[161] = Vec3f(-0.3769624f, 0.7708658f, 0.5134835f);
            result[162] = Vec3f( 0.9637086f,-0.1934451f, 0.1839689f);
            result[163] = Vec3f(-0.2754593f, 0.6463914f, 0.7115479f);
            result[164] = Vec3f( 0.8587918f,-0.2804281f, 0.4287618f);
            result[165] = Vec3f( 0.0400519f,-0.8293613f, 0.5572752f);
            result[166] = Vec3f( 0.4325676f, 0.4916416f, 0.7557604f);
            result[167] = Vec3f(-0.7834698f,-0.6214171f, 0.0039867f);
            result[168] = Vec3f( 0.0172406f,-0.9893781f, 0.1443389f);
            result[169] = Vec3f(-0.4355021f, 0.9001608f, 0.0069611f);
            result[170] = Vec3f( 0.5970176f, 0.1350898f, 0.7907723f);
            result[171] = Vec3f( 0.2413431f, 0.4878236f, 0.8389170f);
            result[172] = Vec3f( 0.6401798f, 0.3384981f, 0.6896296f);
            result[173] = Vec3f( 0.8064754f,-0.5030615f, 0.3106872f);
            result[174] = Vec3f(-0.9427599f,-0.1741168f, 0.2844067f);
            result[175] = Vec3f( 0.2030341f, 0.8584091f, 0.4710743f);
            result[176] = Vec3f( 0.7328128f, 0.6298475f, 0.2574444f);
            result[177] = Vec3f(-0.4774607f,-0.8704211f, 0.1199937f);
            result[178] = Vec3f(-0.9199560f,-0.2817010f, 0.2726269f);
            result[179] = Vec3f( 0.8503394f,-0.3992547f, 0.3428098f);
            result[180] = Vec3f( 0.8449794f, 0.4800665f, 0.2356818f);
            result[181] = Vec3f( 0.9053282f, 0.0569825f, 0.4208727f);
            result[182] = Vec3f(-0.0094381f, 0.9843596f, 0.1759177f);
            result[183] = Vec3f( 0.1695049f,-0.9812385f, 0.0918641f);
            result[184] = Vec3f( 0.6815036f,-0.7193276f, 0.1346128f);
            result[185] = Vec3f(-0.9967600f,-0.0498165f, 0.0631497f);
            result[186] = Vec3f(-0.0289424f, 0.9154679f, 0.4013487f);
            result[187] = Vec3f(-0.8452649f,-0.0608892f, 0.5308671f);
            result[188] = Vec3f( 0.2564018f, 0.9281565f, 0.2697844f);
            result[189] = Vec3f(-0.6351364f, 0.7576143f, 0.1504074f);
            result[190] = Vec3f(-0.5497475f, 0.1112874f, 0.8278846f);
            result[191] = Vec3f( 0.3634639f, 0.9314106f, 0.0191921f);
            result[192] = Vec3f( 0.6584621f,-0.1673788f, 0.7337656f);
            result[193] = Vec3f(-0.7277274f,-0.6784757f, 0.1004170f);
            result[194] = Vec3f( 0.6696815f, 0.7315191f, 0.1280874f);
            result[195] = Vec3f( 0.8095279f, 0.5724188f, 0.1303894f);
            result[196] = Vec3f( 0.8300111f,-0.1461972f, 0.5382453f);
            result[197] = Vec3f(-0.5332919f,-0.7075084f, 0.4637150f);
            result[198] = Vec3f(-0.8718686f, 0.2982849f, 0.3884214f);
            result[199] = Vec3f(-0.1396587f,-0.6803552f, 0.7194527f);
            result[200] = Vec3f(-0.6652903f, 0.5586153f, 0.4953158f);
            result[201] = Vec3f( 0.9836153f,-0.1799964f, 0.0101146f);
            result[202] = Vec3f( 0.6079630f,-0.6850320f, 0.4013878f);
            result[203] = Vec3f( 0.6701810f, 0.4629039f, 0.5801528f);
            result[204] = Vec3f(-0.0893861f, 0.5037051f, 0.8592388f);
            result[205] = Vec3f( 0.8355902f,-0.0166811f, 0.5490999f);
            result[206] = Vec3f( 0.9190623f,-0.2142245f, 0.3308059f);
            result[207] = Vec3f(-0.3719873f,-0.9097163f, 0.1845039f);
            result[208] = Vec3f( 0.4570037f, 0.8878646f, 0.0533286f);
            result[209] = Vec3f(-0.8645153f, 0.4064260f, 0.2956878f);
            result[210] = Vec3f( 0.5549062f, 0.5105613f, 0.6568152f);
            result[211] = Vec3f( 0.6428267f, 0.7089075f, 0.2902136f);
            result[212] = Vec3f( 0.1214206f,-0.5123153f, 0.8501706f);
            result[213] = Vec3f(-0.5408655f,-0.4095645f, 0.7346573f);
            result[214] = Vec3f(-0.6530946f, 0.6866369f, 0.3193698f);
            result[215] = Vec3f( 0.9050798f,-0.0810298f, 0.4174501f);
            result[216] = Vec3f( 0.1412073f, 0.6364383f, 0.7582921f);
            result[217] = Vec3f(-0.0061368f,-0.9492741f, 0.3143899f);
            result[218] = Vec3f( 0.9956173f, 0.0062206f, 0.0933136f);
            result[219] = Vec3f(-0.0217799f, 0.1657015f, 0.9859354f);
            result[220] = Vec3f(-0.3779363f,-0.4922742f, 0.7841111f);
            result[221] = Vec3f( 0.2510539f,-0.9425378f, 0.2204414f);
            result[222] = Vec3f(-0.6990128f,-0.2298062f, 0.6771781f);
            result[223] = Vec3f(-0.3926374f, 0.1798977f, 0.9019272f);
            result[224] = Vec3f( 0.3246485f,-0.4624135f, 0.8250921f);
            result[225] = Vec3f(-0.6121773f,-0.5785936f, 0.5389513f);
            result[226] = Vec3f(-0.4138038f, 0.8586621f, 0.3024332f);
            result[227] = Vec3f(-0.0422249f, 0.9983912f, 0.0378439f);
            result[228] = Vec3f( 0.2924971f, 0.9473184f, 0.1305119f);
            result[229] = Vec3f( 0.2252050f,-0.6044940f, 0.7641137f);
            result[230] = Vec3f(-0.9861678f, 0.0379215f, 0.1613533f);
            result[231] = Vec3f(-0.2567774f, 0.9523869f, 0.1643915f);
            result[232] = Vec3f(-0.0458938f,-0.5482776f, 0.8350362f);
            result[233] = Vec3f(-0.1723106f, 0.0764789f, 0.9820693f);
            result[234] = Vec3f( 0.3982327f, 0.8922237f, 0.2129499f);
            result[235] = Vec3f( 0.7514825f,-0.6552041f, 0.0773400f);
            result[236] = Vec3f(-0.9328183f, 0.0150562f, 0.3600324f);
            result[237] = Vec3f( 0.6305490f,-0.4267652f, 0.6482896f);
            result[238] = Vec3f(-0.0546371f,-0.0087114f, 0.9984683f);
            result[239] = Vec3f( 0.3396633f,-0.8084733f, 0.4806242f);
            result[240] = Vec3f(-0.8499061f,-0.3157628f, 0.4218454f);
            result[241] = Vec3f( 0.9629965f, 0.0542513f, 0.2639973f);
            result[242] = Vec3f(-0.8866574f,-0.4615934f, 0.0277512f);
            result[243] = Vec3f( 0.7256247f,-0.5856555f, 0.3612151f);
            result[244] = Vec3f( 0.4435518f,-0.8642339f, 0.2374058f);
            result[245] = Vec3f( 0.8845800f, 0.2687344f, 0.3811826f);
            result[246] = Vec3f(-0.6989661f,-0.5810019f, 0.4169931f);
            result[247] = Vec3f(-0.7090672f, 0.4349062f, 0.5550497f);
            result[248] = Vec3f( 0.4330260f,-0.0946665f, 0.8963966f);
            result[249] = Vec3f(-0.2278184f,-0.3576214f, 0.9056521f);
            result[250] = Vec3f(-0.2985011f,-0.1501331f, 0.9425270f);
            result[251] = Vec3f(-0.7572680f,-0.0507003f, 0.6511335f);
            result[252] = Vec3f(-0.3552269f,-0.8719954f, 0.3368052f);
            result[253] = Vec3f(-0.2698574f,-0.7314667f, 0.6262056f);
            result[254] = Vec3f(-0.4971396f,-0.8161631f, 0.2944998f);
            result[255] = Vec3f( 0.6415311f,-0.7670965f, 0.0008429f);
        }
        break;
    }
    
    return result;
}

//
// Helper function that allows the mapping from a unit disk to the surface
// of a unit hemisphere.
//
OSG_SYSTEM_DLLMAPPING std::vector<Vec3f> calcHemisphereSurfaceFromDisk(const std::vector<Vec2f>& disk)
{
    std::vector<Vec3f> hemisphere;
    
    std::vector<Vec2f>::const_iterator iter = disk.begin();
    std::vector<Vec2f>::const_iterator end  = disk.end  ();
    
    for (; iter != end; ++iter)
    {
        const Vec2f& p = *iter;

        float alpha = osgATan2(p.y(), p.x());

        float phi = PiHalf * p.length();
        
        float x_ = osgSin(phi);
        float z_ = osgCos(phi);
        
        Vec3f P(osgSin(phi) * osgCos(alpha), osgSin(phi) * osgSin(alpha), osgCos(phi));

        hemisphere.push_back(P);
    }
    
    return hemisphere;
}

} // namespace Distribution

OSG_END_NAMESPACE




