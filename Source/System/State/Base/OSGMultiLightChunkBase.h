/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class MultiLightChunk
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGMULTILIGHTCHUNKBASE_H_
#define _OSGMULTILIGHTCHUNKBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGSystemDef.h"

//#include "OSGBaseTypes.h"

#include "OSGShaderStorageBufferObjStdLayoutChunk.h" // Parent

#include "OSGSysFields.h"               // Feature type
#include "OSGVecFields.h"               // GlobalAmbientIntensity type
#include "OSGMathFields.h"              // ProjectionMatrix type
#include "OSGNodeFields.h"              // Beacon type
#include "OSGBaseFields.h"              // LightBlockName type

#include "OSGMultiLightChunkFields.h"

OSG_BEGIN_NAMESPACE


class MultiLightChunk;

//! \brief MultiLightChunk Base Class.

class OSG_SYSTEM_DLLMAPPING MultiLightChunkBase : public ShaderStorageBufferObjStdLayoutChunk
{
  public:

    typedef ShaderStorageBufferObjStdLayoutChunk Inherited;
    typedef ShaderStorageBufferObjStdLayoutChunk ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(MultiLightChunk);

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        FeatureFieldId = Inherited::NextFieldId,
        CodeFeatureFieldId = FeatureFieldId + 1,
        GlobalAmbientIntensityFieldId = CodeFeatureFieldId + 1,
        PositionFieldId = GlobalAmbientIntensityFieldId + 1,
        DirectionFieldId = PositionFieldId + 1,
        IntensityFieldId = DirectionFieldId + 1,
        AmbientIntensityFieldId = IntensityFieldId + 1,
        DiffuseIntensityFieldId = AmbientIntensityFieldId + 1,
        SpecularIntensityFieldId = DiffuseIntensityFieldId + 1,
        AttenuationFieldId = SpecularIntensityFieldId + 1,
        DecayAttenuationFieldId = AttenuationFieldId + 1,
        LengthFactorFieldId = DecayAttenuationFieldId + 1,
        SpotlightAngleFieldId = LengthFactorFieldId + 1,
        SpotExponentFieldId = SpotlightAngleFieldId + 1,
        InnerSuperEllipsesWidthFieldId = SpotExponentFieldId + 1,
        InnerSuperEllipsesHeightFieldId = InnerSuperEllipsesWidthFieldId + 1,
        OuterSuperEllipsesWidthFieldId = InnerSuperEllipsesHeightFieldId + 1,
        OuterSuperEllipsesHeightFieldId = OuterSuperEllipsesWidthFieldId + 1,
        SuperEllipsesRoundnessFieldId = OuterSuperEllipsesHeightFieldId + 1,
        SuperEllipsesTwistFieldId = SuperEllipsesRoundnessFieldId + 1,
        RangeCutOnFieldId = SuperEllipsesTwistFieldId + 1,
        RangeCutOffFieldId = RangeCutOnFieldId + 1,
        RangeNearZoneFieldId = RangeCutOffFieldId + 1,
        RangeFarZoneFieldId = RangeNearZoneFieldId + 1,
        ProjectionMatrixFieldId = RangeFarZoneFieldId + 1,
        TypeOfLightFieldId = ProjectionMatrixFieldId + 1,
        EnabledFieldId = TypeOfLightFieldId + 1,
        ShadowFieldId = EnabledFieldId + 1,
        ShadowDataIndexFieldId = ShadowFieldId + 1,
        ShadowParameterIndexFieldId = ShadowDataIndexFieldId + 1,
        BeaconFieldId = ShadowParameterIndexFieldId + 1,
        NormalizeDirectionFieldId = BeaconFieldId + 1,
        BeaconMatrixFieldId = NormalizeDirectionFieldId + 1,
        LastCamNearFieldId = BeaconMatrixFieldId + 1,
        LastCamFarFieldId = LastCamNearFieldId + 1,
        LastCamToWorldFieldId = LastCamFarFieldId + 1,
        LightBlockNameFieldId = LastCamToWorldFieldId + 1,
        LightVariableNameFieldId = LightBlockNameFieldId + 1,
        NextFieldId = LightVariableNameFieldId + 1
    };

    static const OSG::BitVector FeatureFieldMask =
        (TypeTraits<BitVector>::One << FeatureFieldId);
    static const OSG::BitVector CodeFeatureFieldMask =
        (TypeTraits<BitVector>::One << CodeFeatureFieldId);
    static const OSG::BitVector GlobalAmbientIntensityFieldMask =
        (TypeTraits<BitVector>::One << GlobalAmbientIntensityFieldId);
    static const OSG::BitVector PositionFieldMask =
        (TypeTraits<BitVector>::One << PositionFieldId);
    static const OSG::BitVector DirectionFieldMask =
        (TypeTraits<BitVector>::One << DirectionFieldId);
    static const OSG::BitVector IntensityFieldMask =
        (TypeTraits<BitVector>::One << IntensityFieldId);
    static const OSG::BitVector AmbientIntensityFieldMask =
        (TypeTraits<BitVector>::One << AmbientIntensityFieldId);
    static const OSG::BitVector DiffuseIntensityFieldMask =
        (TypeTraits<BitVector>::One << DiffuseIntensityFieldId);
    static const OSG::BitVector SpecularIntensityFieldMask =
        (TypeTraits<BitVector>::One << SpecularIntensityFieldId);
    static const OSG::BitVector AttenuationFieldMask =
        (TypeTraits<BitVector>::One << AttenuationFieldId);
    static const OSG::BitVector DecayAttenuationFieldMask =
        (TypeTraits<BitVector>::One << DecayAttenuationFieldId);
    static const OSG::BitVector LengthFactorFieldMask =
        (TypeTraits<BitVector>::One << LengthFactorFieldId);
    static const OSG::BitVector SpotlightAngleFieldMask =
        (TypeTraits<BitVector>::One << SpotlightAngleFieldId);
    static const OSG::BitVector SpotExponentFieldMask =
        (TypeTraits<BitVector>::One << SpotExponentFieldId);
    static const OSG::BitVector InnerSuperEllipsesWidthFieldMask =
        (TypeTraits<BitVector>::One << InnerSuperEllipsesWidthFieldId);
    static const OSG::BitVector InnerSuperEllipsesHeightFieldMask =
        (TypeTraits<BitVector>::One << InnerSuperEllipsesHeightFieldId);
    static const OSG::BitVector OuterSuperEllipsesWidthFieldMask =
        (TypeTraits<BitVector>::One << OuterSuperEllipsesWidthFieldId);
    static const OSG::BitVector OuterSuperEllipsesHeightFieldMask =
        (TypeTraits<BitVector>::One << OuterSuperEllipsesHeightFieldId);
    static const OSG::BitVector SuperEllipsesRoundnessFieldMask =
        (TypeTraits<BitVector>::One << SuperEllipsesRoundnessFieldId);
    static const OSG::BitVector SuperEllipsesTwistFieldMask =
        (TypeTraits<BitVector>::One << SuperEllipsesTwistFieldId);
    static const OSG::BitVector RangeCutOnFieldMask =
        (TypeTraits<BitVector>::One << RangeCutOnFieldId);
    static const OSG::BitVector RangeCutOffFieldMask =
        (TypeTraits<BitVector>::One << RangeCutOffFieldId);
    static const OSG::BitVector RangeNearZoneFieldMask =
        (TypeTraits<BitVector>::One << RangeNearZoneFieldId);
    static const OSG::BitVector RangeFarZoneFieldMask =
        (TypeTraits<BitVector>::One << RangeFarZoneFieldId);
    static const OSG::BitVector ProjectionMatrixFieldMask =
        (TypeTraits<BitVector>::One << ProjectionMatrixFieldId);
    static const OSG::BitVector TypeOfLightFieldMask =
        (TypeTraits<BitVector>::One << TypeOfLightFieldId);
    static const OSG::BitVector EnabledFieldMask =
        (TypeTraits<BitVector>::One << EnabledFieldId);
    static const OSG::BitVector ShadowFieldMask =
        (TypeTraits<BitVector>::One << ShadowFieldId);
    static const OSG::BitVector ShadowDataIndexFieldMask =
        (TypeTraits<BitVector>::One << ShadowDataIndexFieldId);
    static const OSG::BitVector ShadowParameterIndexFieldMask =
        (TypeTraits<BitVector>::One << ShadowParameterIndexFieldId);
    static const OSG::BitVector BeaconFieldMask =
        (TypeTraits<BitVector>::One << BeaconFieldId);
    static const OSG::BitVector NormalizeDirectionFieldMask =
        (TypeTraits<BitVector>::One << NormalizeDirectionFieldId);
    static const OSG::BitVector BeaconMatrixFieldMask =
        (TypeTraits<BitVector>::One << BeaconMatrixFieldId);
    static const OSG::BitVector LastCamNearFieldMask =
        (TypeTraits<BitVector>::One << LastCamNearFieldId);
    static const OSG::BitVector LastCamFarFieldMask =
        (TypeTraits<BitVector>::One << LastCamFarFieldId);
    static const OSG::BitVector LastCamToWorldFieldMask =
        (TypeTraits<BitVector>::One << LastCamToWorldFieldId);
    static const OSG::BitVector LightBlockNameFieldMask =
        (TypeTraits<BitVector>::One << LightBlockNameFieldId);
    static const OSG::BitVector LightVariableNameFieldMask =
        (TypeTraits<BitVector>::One << LightVariableNameFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFUInt32          SFFeatureType;
    typedef SFUInt32          SFCodeFeatureType;
    typedef SFVec3f           SFGlobalAmbientIntensityType;
    typedef MFPnt3f           MFPositionType;
    typedef MFVec3f           MFDirectionType;
    typedef MFVec3f           MFIntensityType;
    typedef MFVec3f           MFAmbientIntensityType;
    typedef MFVec3f           MFDiffuseIntensityType;
    typedef MFVec3f           MFSpecularIntensityType;
    typedef MFVec3f           MFAttenuationType;
    typedef MFReal32          MFDecayAttenuationType;
    typedef MFReal32          MFLengthFactorType;
    typedef MFReal32          MFSpotlightAngleType;
    typedef MFReal32          MFSpotExponentType;
    typedef MFReal32          MFInnerSuperEllipsesWidthType;
    typedef MFReal32          MFInnerSuperEllipsesHeightType;
    typedef MFReal32          MFOuterSuperEllipsesWidthType;
    typedef MFReal32          MFOuterSuperEllipsesHeightType;
    typedef MFReal32          MFSuperEllipsesRoundnessType;
    typedef MFReal32          MFSuperEllipsesTwistType;
    typedef MFReal32          MFRangeCutOnType;
    typedef MFReal32          MFRangeCutOffType;
    typedef MFReal32          MFRangeNearZoneType;
    typedef MFReal32          MFRangeFarZoneType;
    typedef MFMatrix          MFProjectionMatrixType;
    typedef MFUInt8           MFTypeOfLightType;
    typedef MFBool            MFEnabledType;
    typedef MFBool            MFShadowType;
    typedef MFInt32           MFShadowDataIndexType;
    typedef MFInt32           MFShadowParameterIndexType;
    typedef MFWeakNodePtr     MFBeaconType;
    typedef SFBool            SFNormalizeDirectionType;
    typedef MFMatrix          MFBeaconMatrixType;
    typedef SFReal32          SFLastCamNearType;
    typedef SFReal32          SFLastCamFarType;
    typedef SFMatrix          SFLastCamToWorldType;
    typedef SFString          SFLightBlockNameType;
    typedef SFString          SFLightVariableNameType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  SFVec3f             *editSFGlobalAmbientIntensity(void);
            const SFVec3f             *getSFGlobalAmbientIntensity (void) const;

                  SFBool              *editSFNormalizeDirection(void);
            const SFBool              *getSFNormalizeDirection (void) const;

                  SFString            *editSFLightBlockName (void);
            const SFString            *getSFLightBlockName  (void) const;

                  SFString            *editSFLightVariableName(void);
            const SFString            *getSFLightVariableName (void) const;


                  Vec3f               &editGlobalAmbientIntensity(void);
            const Vec3f               &getGlobalAmbientIntensity (void) const;

                  bool                &editNormalizeDirection(void);
                  bool                 getNormalizeDirection (void) const;

                  std::string         &editLightBlockName (void);
            const std::string         &getLightBlockName  (void) const;

                  std::string         &editLightVariableName(void);
            const std::string         &getLightVariableName (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setGlobalAmbientIntensity(const Vec3f &value);
            void setNormalizeDirection(const bool value);
            void setLightBlockName (const std::string &value);
            void setLightVariableName(const std::string &value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual SizeT  getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  MultiLightChunkTransitPtr  create          (void);
    static  MultiLightChunk           *createEmpty     (void);

    static  MultiLightChunkTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  MultiLightChunk            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  MultiLightChunkTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFUInt32          _sfFeature;
    SFUInt32          _sfCodeFeature;
    SFVec3f           _sfGlobalAmbientIntensity;
    MFPnt3f           _mfPosition;
    MFVec3f           _mfDirection;
    MFVec3f           _mfIntensity;
    MFVec3f           _mfAmbientIntensity;
    MFVec3f           _mfDiffuseIntensity;
    MFVec3f           _mfSpecularIntensity;
    MFVec3f           _mfAttenuation;
    MFReal32          _mfDecayAttenuation;
    MFReal32          _mfLengthFactor;
    MFReal32          _mfSpotlightAngle;
    MFReal32          _mfSpotExponent;
    MFReal32          _mfInnerSuperEllipsesWidth;
    MFReal32          _mfInnerSuperEllipsesHeight;
    MFReal32          _mfOuterSuperEllipsesWidth;
    MFReal32          _mfOuterSuperEllipsesHeight;
    MFReal32          _mfSuperEllipsesRoundness;
    MFReal32          _mfSuperEllipsesTwist;
    MFReal32          _mfRangeCutOn;
    MFReal32          _mfRangeCutOff;
    MFReal32          _mfRangeNearZone;
    MFReal32          _mfRangeFarZone;
    MFMatrix          _mfProjectionMatrix;
    MFUInt8           _mfTypeOfLight;
    MFBool            _mfEnabled;
    MFBool            _mfShadow;
    MFInt32           _mfShadowDataIndex;
    MFInt32           _mfShadowParameterIndex;
    MFWeakNodePtr     _mfBeacon;
    SFBool            _sfNormalizeDirection;
    MFMatrix          _mfBeaconMatrix;
    SFReal32          _sfLastCamNear;
    SFReal32          _sfLastCamFar;
    SFMatrix          _sfLastCamToWorld;
    SFString          _sfLightBlockName;
    SFString          _sfLightVariableName;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    MultiLightChunkBase(void);
    MultiLightChunkBase(const MultiLightChunkBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~MultiLightChunkBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const MultiLightChunk *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

     GetFieldHandlePtr  getHandleFeature         (void) const;
     EditFieldHandlePtr editHandleFeature        (void);
     GetFieldHandlePtr  getHandleCodeFeature     (void) const;
     EditFieldHandlePtr editHandleCodeFeature    (void);
     GetFieldHandlePtr  getHandleGlobalAmbientIntensity (void) const;
     EditFieldHandlePtr editHandleGlobalAmbientIntensity(void);
     GetFieldHandlePtr  getHandlePosition        (void) const;
     EditFieldHandlePtr editHandlePosition       (void);
     GetFieldHandlePtr  getHandleDirection       (void) const;
     EditFieldHandlePtr editHandleDirection      (void);
     GetFieldHandlePtr  getHandleIntensity       (void) const;
     EditFieldHandlePtr editHandleIntensity      (void);
     GetFieldHandlePtr  getHandleAmbientIntensity (void) const;
     EditFieldHandlePtr editHandleAmbientIntensity(void);
     GetFieldHandlePtr  getHandleDiffuseIntensity (void) const;
     EditFieldHandlePtr editHandleDiffuseIntensity(void);
     GetFieldHandlePtr  getHandleSpecularIntensity (void) const;
     EditFieldHandlePtr editHandleSpecularIntensity(void);
     GetFieldHandlePtr  getHandleAttenuation     (void) const;
     EditFieldHandlePtr editHandleAttenuation    (void);
     GetFieldHandlePtr  getHandleDecayAttenuation (void) const;
     EditFieldHandlePtr editHandleDecayAttenuation(void);
     GetFieldHandlePtr  getHandleLengthFactor    (void) const;
     EditFieldHandlePtr editHandleLengthFactor   (void);
     GetFieldHandlePtr  getHandleSpotlightAngle  (void) const;
     EditFieldHandlePtr editHandleSpotlightAngle (void);
     GetFieldHandlePtr  getHandleSpotExponent    (void) const;
     EditFieldHandlePtr editHandleSpotExponent   (void);
     GetFieldHandlePtr  getHandleInnerSuperEllipsesWidth (void) const;
     EditFieldHandlePtr editHandleInnerSuperEllipsesWidth(void);
     GetFieldHandlePtr  getHandleInnerSuperEllipsesHeight (void) const;
     EditFieldHandlePtr editHandleInnerSuperEllipsesHeight(void);
     GetFieldHandlePtr  getHandleOuterSuperEllipsesWidth (void) const;
     EditFieldHandlePtr editHandleOuterSuperEllipsesWidth(void);
     GetFieldHandlePtr  getHandleOuterSuperEllipsesHeight (void) const;
     EditFieldHandlePtr editHandleOuterSuperEllipsesHeight(void);
     GetFieldHandlePtr  getHandleSuperEllipsesRoundness (void) const;
     EditFieldHandlePtr editHandleSuperEllipsesRoundness(void);
     GetFieldHandlePtr  getHandleSuperEllipsesTwist (void) const;
     EditFieldHandlePtr editHandleSuperEllipsesTwist(void);
     GetFieldHandlePtr  getHandleRangeCutOn      (void) const;
     EditFieldHandlePtr editHandleRangeCutOn     (void);
     GetFieldHandlePtr  getHandleRangeCutOff     (void) const;
     EditFieldHandlePtr editHandleRangeCutOff    (void);
     GetFieldHandlePtr  getHandleRangeNearZone   (void) const;
     EditFieldHandlePtr editHandleRangeNearZone  (void);
     GetFieldHandlePtr  getHandleRangeFarZone    (void) const;
     EditFieldHandlePtr editHandleRangeFarZone   (void);
     GetFieldHandlePtr  getHandleProjectionMatrix (void) const;
     EditFieldHandlePtr editHandleProjectionMatrix(void);
     GetFieldHandlePtr  getHandleTypeOfLight     (void) const;
     EditFieldHandlePtr editHandleTypeOfLight    (void);
     GetFieldHandlePtr  getHandleEnabled         (void) const;
     EditFieldHandlePtr editHandleEnabled        (void);
     GetFieldHandlePtr  getHandleShadow          (void) const;
     EditFieldHandlePtr editHandleShadow         (void);
     GetFieldHandlePtr  getHandleShadowDataIndex (void) const;
     EditFieldHandlePtr editHandleShadowDataIndex(void);
     GetFieldHandlePtr  getHandleShadowParameterIndex (void) const;
     EditFieldHandlePtr editHandleShadowParameterIndex(void);
     GetFieldHandlePtr  getHandleBeacon          (void) const;
     EditFieldHandlePtr editHandleBeacon         (void);
     GetFieldHandlePtr  getHandleNormalizeDirection (void) const;
     EditFieldHandlePtr editHandleNormalizeDirection(void);
     GetFieldHandlePtr  getHandleBeaconMatrix    (void) const;
     EditFieldHandlePtr editHandleBeaconMatrix   (void);
     GetFieldHandlePtr  getHandleLastCamNear     (void) const;
     EditFieldHandlePtr editHandleLastCamNear    (void);
     GetFieldHandlePtr  getHandleLastCamFar      (void) const;
     EditFieldHandlePtr editHandleLastCamFar     (void);
     GetFieldHandlePtr  getHandleLastCamToWorld  (void) const;
     EditFieldHandlePtr editHandleLastCamToWorld (void);
     GetFieldHandlePtr  getHandleLightBlockName  (void) const;
     EditFieldHandlePtr editHandleLightBlockName (void);
     GetFieldHandlePtr  getHandleLightVariableName (void) const;
     EditFieldHandlePtr editHandleLightVariableName(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  SFUInt32            *editSFFeature        (void);
            const SFUInt32            *getSFFeature         (void) const;

                  SFUInt32            *editSFCodeFeature    (void);
            const SFUInt32            *getSFCodeFeature     (void) const;

                  MFPnt3f             *editMFPosition       (void);
            const MFPnt3f             *getMFPosition        (void) const;

                  MFVec3f             *editMFDirection      (void);
            const MFVec3f             *getMFDirection       (void) const;

                  MFVec3f             *editMFIntensity      (void);
            const MFVec3f             *getMFIntensity       (void) const;

                  MFVec3f             *editMFAmbientIntensity(void);
            const MFVec3f             *getMFAmbientIntensity (void) const;

                  MFVec3f             *editMFDiffuseIntensity(void);
            const MFVec3f             *getMFDiffuseIntensity (void) const;

                  MFVec3f             *editMFSpecularIntensity(void);
            const MFVec3f             *getMFSpecularIntensity (void) const;

                  MFVec3f             *editMFAttenuation    (void);
            const MFVec3f             *getMFAttenuation     (void) const;

                  MFReal32            *editMFDecayAttenuation(void);
            const MFReal32            *getMFDecayAttenuation (void) const;

                  MFReal32            *editMFLengthFactor   (void);
            const MFReal32            *getMFLengthFactor    (void) const;

                  MFReal32            *editMFSpotlightAngle (void);
            const MFReal32            *getMFSpotlightAngle  (void) const;

                  MFReal32            *editMFSpotExponent   (void);
            const MFReal32            *getMFSpotExponent    (void) const;

                  MFReal32            *editMFInnerSuperEllipsesWidth(void);
            const MFReal32            *getMFInnerSuperEllipsesWidth (void) const;

                  MFReal32            *editMFInnerSuperEllipsesHeight(void);
            const MFReal32            *getMFInnerSuperEllipsesHeight (void) const;

                  MFReal32            *editMFOuterSuperEllipsesWidth(void);
            const MFReal32            *getMFOuterSuperEllipsesWidth (void) const;

                  MFReal32            *editMFOuterSuperEllipsesHeight(void);
            const MFReal32            *getMFOuterSuperEllipsesHeight (void) const;

                  MFReal32            *editMFSuperEllipsesRoundness(void);
            const MFReal32            *getMFSuperEllipsesRoundness (void) const;

                  MFReal32            *editMFSuperEllipsesTwist(void);
            const MFReal32            *getMFSuperEllipsesTwist (void) const;

                  MFReal32            *editMFRangeCutOn     (void);
            const MFReal32            *getMFRangeCutOn      (void) const;

                  MFReal32            *editMFRangeCutOff    (void);
            const MFReal32            *getMFRangeCutOff     (void) const;

                  MFReal32            *editMFRangeNearZone  (void);
            const MFReal32            *getMFRangeNearZone   (void) const;

                  MFReal32            *editMFRangeFarZone   (void);
            const MFReal32            *getMFRangeFarZone    (void) const;

                  MFMatrix            *editMFProjectionMatrix(void);
            const MFMatrix            *getMFProjectionMatrix (void) const;

                  MFUInt8             *editMFTypeOfLight    (void);
            const MFUInt8             *getMFTypeOfLight     (void) const;

                  MFBool              *editMFEnabled        (void);
            const MFBool              *getMFEnabled         (void) const;

                  MFBool              *editMFShadow         (void);
            const MFBool              *getMFShadow          (void) const;

                  MFInt32             *editMFShadowDataIndex(void);
            const MFInt32             *getMFShadowDataIndex (void) const;

                  MFInt32             *editMFShadowParameterIndex(void);
            const MFInt32             *getMFShadowParameterIndex (void) const;
            const MFWeakNodePtr       *getMFBeacon          (void) const;
                  MFWeakNodePtr       *editMFBeacon         (void);

                  MFMatrix            *editMFBeaconMatrix   (void);
            const MFMatrix            *getMFBeaconMatrix    (void) const;

                  SFReal32            *editSFLastCamNear    (void);
            const SFReal32            *getSFLastCamNear     (void) const;

                  SFReal32            *editSFLastCamFar     (void);
            const SFReal32            *getSFLastCamFar      (void) const;

                  SFMatrix            *editSFLastCamToWorld (void);
            const SFMatrix            *getSFLastCamToWorld  (void) const;


                  UInt32              &editFeature        (void);
                  UInt32               getFeature         (void) const;

                  UInt32              &editCodeFeature    (void);
                  UInt32               getCodeFeature     (void) const;

                  MFPnt3f            ::reference editPosition       (const UInt32 index);
            const Pnt3f               &getPosition        (const UInt32 index) const;

                  MFVec3f            ::reference editDirection      (const UInt32 index);
            const Vec3f               &getDirection       (const UInt32 index) const;

                  MFVec3f            ::reference editIntensity      (const UInt32 index);
            const Vec3f               &getIntensity       (const UInt32 index) const;

                  MFVec3f            ::reference editAmbientIntensity(const UInt32 index);
            const Vec3f               &getAmbientIntensity (const UInt32 index) const;

                  MFVec3f            ::reference editDiffuseIntensity(const UInt32 index);
            const Vec3f               &getDiffuseIntensity (const UInt32 index) const;

                  MFVec3f            ::reference editSpecularIntensity(const UInt32 index);
            const Vec3f               &getSpecularIntensity (const UInt32 index) const;

                  MFVec3f            ::reference editAttenuation    (const UInt32 index);
            const Vec3f               &getAttenuation     (const UInt32 index) const;

                  MFReal32           ::reference editDecayAttenuation(const UInt32 index);
                  Real32               getDecayAttenuation (const UInt32 index) const;

                  MFReal32           ::reference editLengthFactor   (const UInt32 index);
                  Real32               getLengthFactor    (const UInt32 index) const;

                  MFReal32           ::reference editSpotlightAngle (const UInt32 index);
                  Real32               getSpotlightAngle  (const UInt32 index) const;

                  MFReal32           ::reference editSpotExponent   (const UInt32 index);
                  Real32               getSpotExponent    (const UInt32 index) const;

                  MFReal32           ::reference editInnerSuperEllipsesWidth(const UInt32 index);
                  Real32               getInnerSuperEllipsesWidth (const UInt32 index) const;

                  MFReal32           ::reference editInnerSuperEllipsesHeight(const UInt32 index);
                  Real32               getInnerSuperEllipsesHeight (const UInt32 index) const;

                  MFReal32           ::reference editOuterSuperEllipsesWidth(const UInt32 index);
                  Real32               getOuterSuperEllipsesWidth (const UInt32 index) const;

                  MFReal32           ::reference editOuterSuperEllipsesHeight(const UInt32 index);
                  Real32               getOuterSuperEllipsesHeight (const UInt32 index) const;

                  MFReal32           ::reference editSuperEllipsesRoundness(const UInt32 index);
                  Real32               getSuperEllipsesRoundness (const UInt32 index) const;

                  MFReal32           ::reference editSuperEllipsesTwist(const UInt32 index);
                  Real32               getSuperEllipsesTwist (const UInt32 index) const;

                  MFReal32           ::reference editRangeCutOn     (const UInt32 index);
                  Real32               getRangeCutOn      (const UInt32 index) const;

                  MFReal32           ::reference editRangeCutOff    (const UInt32 index);
                  Real32               getRangeCutOff     (const UInt32 index) const;

                  MFReal32           ::reference editRangeNearZone  (const UInt32 index);
                  Real32               getRangeNearZone   (const UInt32 index) const;

                  MFReal32           ::reference editRangeFarZone   (const UInt32 index);
                  Real32               getRangeFarZone    (const UInt32 index) const;

                  MFMatrix           ::reference editProjectionMatrix(const UInt32 index);
            const Matrix              &getProjectionMatrix (const UInt32 index) const;

                  MFUInt8            ::reference editTypeOfLight    (const UInt32 index);
                  UInt8                getTypeOfLight     (const UInt32 index) const;

                  MFBool             ::reference editEnabled        (const UInt32 index);
                  bool                 getEnabled         (const UInt32 index) const;

                  MFBool             ::reference editShadow         (const UInt32 index);
                  bool                 getShadow          (const UInt32 index) const;

                  MFInt32            ::reference editShadowDataIndex(const UInt32 index);
                  Int32                getShadowDataIndex (const UInt32 index) const;

                  MFInt32            ::reference editShadowParameterIndex(const UInt32 index);
                  Int32                getShadowParameterIndex (const UInt32 index) const;

                  Node * getBeacon         (const UInt32 index) const;

                  MFMatrix           ::reference editBeaconMatrix   (const UInt32 index);
            const Matrix              &getBeaconMatrix    (const UInt32 index) const;

                  Real32              &editLastCamNear    (void);
                  Real32               getLastCamNear     (void) const;

                  Real32              &editLastCamFar     (void);
                  Real32               getLastCamFar      (void) const;

                  Matrix              &editLastCamToWorld (void);
            const Matrix              &getLastCamToWorld  (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setFeature        (const UInt32 value);
            void setCodeFeature    (const UInt32 value);
            void setLastCamNear    (const Real32 value);
            void setLastCamFar     (const Real32 value);
            void setLastCamToWorld (const Matrix &value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    void pushToBeacon              (Node * const value   );
    void assignBeacon              (const MFWeakNodePtr     &value);
    void removeFromBeacon (UInt32                uiIndex );
    void removeObjFromBeacon(Node * const value   );
    void clearBeacon                (void                          );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      MultiLightChunkBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const MultiLightChunkBase &source);
};

typedef MultiLightChunkBase *MultiLightChunkBaseP;

OSG_END_NAMESPACE

#endif /* _OSGMULTILIGHTCHUNKBASE_H_ */
