/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SamplerObjChunk
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGSAMPLEROBJCHUNKBASE_H_
#define _OSGSAMPLEROBJCHUNKBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGSystemDef.h"

//#include "OSGBaseTypes.h"

#include "OSGStateChunk.h" // Parent

#include "OSGBaseFields.h"              // GLId type
#include "OSGSysFields.h"               // TextureUnits type

#include "OSGSamplerObjChunkFields.h"

OSG_BEGIN_NAMESPACE


class SamplerObjChunk;

//! \brief SamplerObjChunk Base Class.

class OSG_SYSTEM_DLLMAPPING SamplerObjChunkBase : public StateChunk
{
  public:

    typedef StateChunk Inherited;
    typedef StateChunk ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(SamplerObjChunk);

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        GLIdFieldId = Inherited::NextFieldId,
        TextureUnitsFieldId = GLIdFieldId + 1,
        BorderColorFieldId = TextureUnitsFieldId + 1,
        MinFilterFieldId = BorderColorFieldId + 1,
        MagFilterFieldId = MinFilterFieldId + 1,
        WrapSFieldId = MagFilterFieldId + 1,
        WrapTFieldId = WrapSFieldId + 1,
        WrapRFieldId = WrapTFieldId + 1,
        MinLODFieldId = WrapRFieldId + 1,
        MaxLODFieldId = MinLODFieldId + 1,
        LODBiasFieldId = MaxLODFieldId + 1,
        CompareModeFieldId = LODBiasFieldId + 1,
        CompareFuncFieldId = CompareModeFieldId + 1,
        MaxAnisotropyFieldId = CompareFuncFieldId + 1,
        NextFieldId = MaxAnisotropyFieldId + 1
    };

    static const OSG::BitVector GLIdFieldMask =
        (TypeTraits<BitVector>::One << GLIdFieldId);
    static const OSG::BitVector TextureUnitsFieldMask =
        (TypeTraits<BitVector>::One << TextureUnitsFieldId);
    static const OSG::BitVector BorderColorFieldMask =
        (TypeTraits<BitVector>::One << BorderColorFieldId);
    static const OSG::BitVector MinFilterFieldMask =
        (TypeTraits<BitVector>::One << MinFilterFieldId);
    static const OSG::BitVector MagFilterFieldMask =
        (TypeTraits<BitVector>::One << MagFilterFieldId);
    static const OSG::BitVector WrapSFieldMask =
        (TypeTraits<BitVector>::One << WrapSFieldId);
    static const OSG::BitVector WrapTFieldMask =
        (TypeTraits<BitVector>::One << WrapTFieldId);
    static const OSG::BitVector WrapRFieldMask =
        (TypeTraits<BitVector>::One << WrapRFieldId);
    static const OSG::BitVector MinLODFieldMask =
        (TypeTraits<BitVector>::One << MinLODFieldId);
    static const OSG::BitVector MaxLODFieldMask =
        (TypeTraits<BitVector>::One << MaxLODFieldId);
    static const OSG::BitVector LODBiasFieldMask =
        (TypeTraits<BitVector>::One << LODBiasFieldId);
    static const OSG::BitVector CompareModeFieldMask =
        (TypeTraits<BitVector>::One << CompareModeFieldId);
    static const OSG::BitVector CompareFuncFieldMask =
        (TypeTraits<BitVector>::One << CompareFuncFieldId);
    static const OSG::BitVector MaxAnisotropyFieldMask =
        (TypeTraits<BitVector>::One << MaxAnisotropyFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFGLenum          SFGLIdType;
    typedef MFUInt32          MFTextureUnitsType;
    typedef SFColor4f         SFBorderColorType;
    typedef SFGLenum          SFMinFilterType;
    typedef SFGLenum          SFMagFilterType;
    typedef SFGLenum          SFWrapSType;
    typedef SFGLenum          SFWrapTType;
    typedef SFGLenum          SFWrapRType;
    typedef SFReal32          SFMinLODType;
    typedef SFReal32          SFMaxLODType;
    typedef SFReal32          SFLODBiasType;
    typedef SFGLenum          SFCompareModeType;
    typedef SFGLenum          SFCompareFuncType;
    typedef SFReal32          SFMaxAnisotropyType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  SFGLenum            *editSFGLId           (void);
            const SFGLenum            *getSFGLId            (void) const;

                  MFUInt32            *editMFTextureUnits   (void);
            const MFUInt32            *getMFTextureUnits    (void) const;

                  SFColor4f           *editSFBorderColor    (void);
            const SFColor4f           *getSFBorderColor     (void) const;

                  SFGLenum            *editSFMinFilter      (void);
            const SFGLenum            *getSFMinFilter       (void) const;

                  SFGLenum            *editSFMagFilter      (void);
            const SFGLenum            *getSFMagFilter       (void) const;

                  SFGLenum            *editSFWrapS          (void);
            const SFGLenum            *getSFWrapS           (void) const;

                  SFGLenum            *editSFWrapT          (void);
            const SFGLenum            *getSFWrapT           (void) const;

                  SFGLenum            *editSFWrapR          (void);
            const SFGLenum            *getSFWrapR           (void) const;

                  SFReal32            *editSFMinLOD         (void);
            const SFReal32            *getSFMinLOD          (void) const;

                  SFReal32            *editSFMaxLOD         (void);
            const SFReal32            *getSFMaxLOD          (void) const;

                  SFReal32            *editSFLODBias        (void);
            const SFReal32            *getSFLODBias         (void) const;

                  SFGLenum            *editSFCompareMode    (void);
            const SFGLenum            *getSFCompareMode     (void) const;

                  SFGLenum            *editSFCompareFunc    (void);
            const SFGLenum            *getSFCompareFunc     (void) const;

                  SFReal32            *editSFMaxAnisotropy  (void);
            const SFReal32            *getSFMaxAnisotropy   (void) const;


                  GLenum              &editGLId           (void);
            const GLenum              &getGLId            (void) const;

            MFUInt32           ::reference       editTextureUnits   (const UInt32 index);
                  UInt32               getTextureUnits    (const UInt32 index) const;

                  Color4f             &editBorderColor    (void);
            const Color4f             &getBorderColor     (void) const;

                  GLenum              &editMinFilter      (void);
            const GLenum              &getMinFilter       (void) const;

                  GLenum              &editMagFilter      (void);
            const GLenum              &getMagFilter       (void) const;

                  GLenum              &editWrapS          (void);
            const GLenum              &getWrapS           (void) const;

                  GLenum              &editWrapT          (void);
            const GLenum              &getWrapT           (void) const;

                  GLenum              &editWrapR          (void);
            const GLenum              &getWrapR           (void) const;

                  Real32              &editMinLOD         (void);
                  Real32               getMinLOD          (void) const;

                  Real32              &editMaxLOD         (void);
                  Real32               getMaxLOD          (void) const;

                  Real32              &editLODBias        (void);
                  Real32               getLODBias         (void) const;

                  GLenum              &editCompareMode    (void);
            const GLenum              &getCompareMode     (void) const;

                  GLenum              &editCompareFunc    (void);
            const GLenum              &getCompareFunc     (void) const;

                  Real32              &editMaxAnisotropy  (void);
                  Real32               getMaxAnisotropy   (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setGLId           (const GLenum &value);
            void setBorderColor    (const Color4f &value);
            void setMinFilter      (const GLenum &value);
            void setMagFilter      (const GLenum &value);
            void setWrapS          (const GLenum &value);
            void setWrapT          (const GLenum &value);
            void setWrapR          (const GLenum &value);
            void setMinLOD         (const Real32 value);
            void setMaxLOD         (const Real32 value);
            void setLODBias        (const Real32 value);
            void setCompareMode    (const GLenum &value);
            void setCompareFunc    (const GLenum &value);
            void setMaxAnisotropy  (const Real32 value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual SizeT  getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  SamplerObjChunkTransitPtr  create          (void);
    static  SamplerObjChunk           *createEmpty     (void);

    static  SamplerObjChunkTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  SamplerObjChunk            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  SamplerObjChunkTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFGLenum          _sfGLId;
    MFUInt32          _mfTextureUnits;
    SFColor4f         _sfBorderColor;
    SFGLenum          _sfMinFilter;
    SFGLenum          _sfMagFilter;
    SFGLenum          _sfWrapS;
    SFGLenum          _sfWrapT;
    SFGLenum          _sfWrapR;
    SFReal32          _sfMinLOD;
    SFReal32          _sfMaxLOD;
    SFReal32          _sfLODBias;
    SFGLenum          _sfCompareMode;
    SFGLenum          _sfCompareFunc;
    SFReal32          _sfMaxAnisotropy;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    SamplerObjChunkBase(void);
    SamplerObjChunkBase(const SamplerObjChunkBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~SamplerObjChunkBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

     GetFieldHandlePtr  getHandleGLId            (void) const;
     EditFieldHandlePtr editHandleGLId           (void);
     GetFieldHandlePtr  getHandleTextureUnits    (void) const;
     EditFieldHandlePtr editHandleTextureUnits   (void);
     GetFieldHandlePtr  getHandleBorderColor     (void) const;
     EditFieldHandlePtr editHandleBorderColor    (void);
     GetFieldHandlePtr  getHandleMinFilter       (void) const;
     EditFieldHandlePtr editHandleMinFilter      (void);
     GetFieldHandlePtr  getHandleMagFilter       (void) const;
     EditFieldHandlePtr editHandleMagFilter      (void);
     GetFieldHandlePtr  getHandleWrapS           (void) const;
     EditFieldHandlePtr editHandleWrapS          (void);
     GetFieldHandlePtr  getHandleWrapT           (void) const;
     EditFieldHandlePtr editHandleWrapT          (void);
     GetFieldHandlePtr  getHandleWrapR           (void) const;
     EditFieldHandlePtr editHandleWrapR          (void);
     GetFieldHandlePtr  getHandleMinLOD          (void) const;
     EditFieldHandlePtr editHandleMinLOD         (void);
     GetFieldHandlePtr  getHandleMaxLOD          (void) const;
     EditFieldHandlePtr editHandleMaxLOD         (void);
     GetFieldHandlePtr  getHandleLODBias         (void) const;
     EditFieldHandlePtr editHandleLODBias        (void);
     GetFieldHandlePtr  getHandleCompareMode     (void) const;
     EditFieldHandlePtr editHandleCompareMode    (void);
     GetFieldHandlePtr  getHandleCompareFunc     (void) const;
     EditFieldHandlePtr editHandleCompareFunc    (void);
     GetFieldHandlePtr  getHandleMaxAnisotropy   (void) const;
     EditFieldHandlePtr editHandleMaxAnisotropy  (void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      SamplerObjChunkBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const SamplerObjChunkBase &source);
};

typedef SamplerObjChunkBase *SamplerObjChunkBaseP;

OSG_END_NAMESPACE

#endif /* _OSGSAMPLEROBJCHUNKBASE_H_ */
