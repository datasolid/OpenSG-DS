/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ShaderStorageBufferObjRefChunk!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"




#include "OSGShaderStorageBufferObjRefChunkBase.h"
#include "OSGShaderStorageBufferObjRefChunk.h"

#include <boost/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::ShaderStorageBufferObjRefChunk
    See \ref PageSystemShaderStorageBufferObjRefChunk for a description.

    This chunk wraps the OpenGL shader storage buffer object extension (ARB_shader_storage_buffer_object). 
    Basically, it holds a raw memory buffer and a buffer object binding point. The raw memory 
    buffer is expected to be provided by the chunk user in either an OpenGL std140 or std430 compatible format. 
    Any shader, binding a shader storage block to the very same binding point, is expected to respect 
    the corresponding block layout.

    This one differs from the ShaderStorageBufferObjStdLayoutChunk in that it does not manage the buffer by
    itself , but just takes the GLid of that buffer. The idea is that the buffer of a GeoVectorPropertyBuffer can be 
    used if its layout is compatible to std140 or std430 format.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var GLenum          ShaderStorageBufferObjRefChunkBase::_sfGLId
    The OpenGL object id for this shader storage buffer object.
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<ShaderStorageBufferObjRefChunk *, nsOSG>::_type(
    "ShaderStorageBufferObjRefChunkPtr", 
    "StateChunkPtr", 
    ShaderStorageBufferObjRefChunk::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(ShaderStorageBufferObjRefChunk *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           ShaderStorageBufferObjRefChunk *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           ShaderStorageBufferObjRefChunk *,
                           nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void ShaderStorageBufferObjRefChunkBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "GLId",
        "The OpenGL object id for this shader storage buffer object.\n",
        GLIdFieldId, GLIdFieldMask,
        true,
        (Field::FClusterLocal),
        static_cast<FieldEditMethodSig>(&ShaderStorageBufferObjRefChunk::editHandleGLId),
        static_cast<FieldGetMethodSig >(&ShaderStorageBufferObjRefChunk::getHandleGLId));

    oType.addInitialDesc(pDesc);
}


ShaderStorageBufferObjRefChunkBase::TypeObject ShaderStorageBufferObjRefChunkBase::_type(
    ShaderStorageBufferObjRefChunkBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&ShaderStorageBufferObjRefChunkBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&ShaderStorageBufferObjRefChunk::initMethod),
    reinterpret_cast<ExitContainerF>(&ShaderStorageBufferObjRefChunk::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(&ShaderStorageBufferObjRefChunk::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"ShaderStorageBufferObjRefChunk\"\n"
    "    parent=\"StateChunk\"\n"
    "    library=\"System\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    structure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    docGroupBase=\"GrpSystemState\"\n"
    "    >\n"
    "    See \\ref PageSystemShaderStorageBufferObjRefChunk for a description.\n"
    "\n"
    "    This chunk wraps the OpenGL shader storage buffer object extension (ARB_shader_storage_buffer_object). \n"
    "    Basically, it holds a raw memory buffer and a buffer object binding point. The raw memory \n"
    "    buffer is expected to be provided by the chunk user in either an OpenGL std140 or std430 compatible format. \n"
    "    Any shader, binding a shader storage block to the very same binding point, is expected to respect \n"
    "    the corresponding block layout.\n"
    "\n"
    "    This one differs from the ShaderStorageBufferObjStdLayoutChunk in that it does not manage the buffer by\n"
    "    itself , but just takes the GLid of that buffer. The idea is that the buffer of a GeoVectorPropertyBuffer can be \n"
    "    used if its layout is compatible to std140 or std430 format.\n"
    "\n"
    "    <Field\n"
    "        name=\"GLId\"\n"
    "        type=\"GLenum\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"internal\"\n"
    "        access=\"public\"\n"
    "        defaultValue=\"0\"\n"
    "        fieldFlags=\"FClusterLocal\"\n"
    "\t>\n"
    "            The OpenGL object id for this shader storage buffer object.\n"
    "    </Field>\n"
    "\n"
    "</FieldContainer>\n",
    "See \\ref PageSystemShaderStorageBufferObjRefChunk for a description.\n"
    "\n"
    "This chunk wraps the OpenGL shader storage buffer object extension (ARB_shader_storage_buffer_object). \n"
    "Basically, it holds a raw memory buffer and a buffer object binding point. The raw memory \n"
    "buffer is expected to be provided by the chunk user in either an OpenGL std140 or std430 compatible format. \n"
    "Any shader, binding a shader storage block to the very same binding point, is expected to respect \n"
    "the corresponding block layout.\n"
    "\n"
    "This one differs from the ShaderStorageBufferObjStdLayoutChunk in that it does not manage the buffer by\n"
    "itself , but just takes the GLid of that buffer. The idea is that the buffer of a GeoVectorPropertyBuffer can be \n"
    "used if its layout is compatible to std140 or std430 format.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &ShaderStorageBufferObjRefChunkBase::getType(void)
{
    return _type;
}

const FieldContainerType &ShaderStorageBufferObjRefChunkBase::getType(void) const
{
    return _type;
}

UInt32 ShaderStorageBufferObjRefChunkBase::getContainerSize(void) const
{
    return sizeof(ShaderStorageBufferObjRefChunk);
}

/*------------------------- decorator get ------------------------------*/


SFGLenum *ShaderStorageBufferObjRefChunkBase::editSFGLId(void)
{
    editSField(GLIdFieldMask);

    return &_sfGLId;
}

const SFGLenum *ShaderStorageBufferObjRefChunkBase::getSFGLId(void) const
{
    return &_sfGLId;
}






/*------------------------------ access -----------------------------------*/

SizeT ShaderStorageBufferObjRefChunkBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (GLIdFieldMask & whichField))
    {
        returnValue += _sfGLId.getBinSize();
    }

    return returnValue;
}

void ShaderStorageBufferObjRefChunkBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (GLIdFieldMask & whichField))
    {
        _sfGLId.copyToBin(pMem);
    }
}

void ShaderStorageBufferObjRefChunkBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (GLIdFieldMask & whichField))
    {
        editSField(GLIdFieldMask);
        _sfGLId.copyFromBin(pMem);
    }
}

//! create a new instance of the class
ShaderStorageBufferObjRefChunkTransitPtr ShaderStorageBufferObjRefChunkBase::createLocal(BitVector bFlags)
{
    ShaderStorageBufferObjRefChunkTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<ShaderStorageBufferObjRefChunk>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
ShaderStorageBufferObjRefChunkTransitPtr ShaderStorageBufferObjRefChunkBase::createDependent(BitVector bFlags)
{
    ShaderStorageBufferObjRefChunkTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<ShaderStorageBufferObjRefChunk>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
ShaderStorageBufferObjRefChunkTransitPtr ShaderStorageBufferObjRefChunkBase::create(void)
{
    ShaderStorageBufferObjRefChunkTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<ShaderStorageBufferObjRefChunk>(tmpPtr);
    }

    return fc;
}

ShaderStorageBufferObjRefChunk *ShaderStorageBufferObjRefChunkBase::createEmptyLocal(BitVector bFlags)
{
    ShaderStorageBufferObjRefChunk *returnValue;

    newPtr<ShaderStorageBufferObjRefChunk>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
ShaderStorageBufferObjRefChunk *ShaderStorageBufferObjRefChunkBase::createEmpty(void)
{
    ShaderStorageBufferObjRefChunk *returnValue;

    newPtr<ShaderStorageBufferObjRefChunk>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr ShaderStorageBufferObjRefChunkBase::shallowCopyLocal(
    BitVector bFlags) const
{
    ShaderStorageBufferObjRefChunk *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const ShaderStorageBufferObjRefChunk *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr ShaderStorageBufferObjRefChunkBase::shallowCopyDependent(
    BitVector bFlags) const
{
    ShaderStorageBufferObjRefChunk *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const ShaderStorageBufferObjRefChunk *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr ShaderStorageBufferObjRefChunkBase::shallowCopy(void) const
{
    ShaderStorageBufferObjRefChunk *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const ShaderStorageBufferObjRefChunk *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

ShaderStorageBufferObjRefChunkBase::ShaderStorageBufferObjRefChunkBase(void) :
    Inherited(),
    _sfGLId                   (GLenum(0))
{
}

ShaderStorageBufferObjRefChunkBase::ShaderStorageBufferObjRefChunkBase(const ShaderStorageBufferObjRefChunkBase &source) :
    Inherited(source),
    _sfGLId                   (source._sfGLId                   )
{
}


/*-------------------------- destructors ----------------------------------*/

ShaderStorageBufferObjRefChunkBase::~ShaderStorageBufferObjRefChunkBase(void)
{
}


GetFieldHandlePtr ShaderStorageBufferObjRefChunkBase::getHandleGLId            (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfGLId,
             this->getType().getFieldDesc(GLIdFieldId),
             const_cast<ShaderStorageBufferObjRefChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ShaderStorageBufferObjRefChunkBase::editHandleGLId           (void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfGLId,
             this->getType().getFieldDesc(GLIdFieldId),
             this));


    editSField(GLIdFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void ShaderStorageBufferObjRefChunkBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    ShaderStorageBufferObjRefChunk *pThis = static_cast<ShaderStorageBufferObjRefChunk *>(this);

    pThis->execSync(static_cast<ShaderStorageBufferObjRefChunk *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *ShaderStorageBufferObjRefChunkBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    ShaderStorageBufferObjRefChunk *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const ShaderStorageBufferObjRefChunk *>(pRefAspect),
                  dynamic_cast<const ShaderStorageBufferObjRefChunk *>(this));

    return returnValue;
}
#endif

void ShaderStorageBufferObjRefChunkBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
