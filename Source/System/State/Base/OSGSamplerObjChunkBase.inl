/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SamplerObjChunk!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE



//! access the type of the class
inline
OSG::FieldContainerType &SamplerObjChunkBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 SamplerObjChunkBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 SamplerObjChunkBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/

//! Get the value of the SamplerObjChunk::_sfGLId field.

inline
GLenum &SamplerObjChunkBase::editGLId(void)
{
    editSField(GLIdFieldMask);

    return _sfGLId.getValue();
}

//! Get the value of the SamplerObjChunk::_sfGLId field.
inline
const GLenum &SamplerObjChunkBase::getGLId(void) const
{
    return _sfGLId.getValue();
}

//! Set the value of the SamplerObjChunk::_sfGLId field.
inline
void SamplerObjChunkBase::setGLId(const GLenum &value)
{
    editSField(GLIdFieldMask);

    _sfGLId.setValue(value);
}
//! Get the value of the SamplerObjChunk::_sfBorderColor field.

inline
Color4f &SamplerObjChunkBase::editBorderColor(void)
{
    editSField(BorderColorFieldMask);

    return _sfBorderColor.getValue();
}

//! Get the value of the SamplerObjChunk::_sfBorderColor field.
inline
const Color4f &SamplerObjChunkBase::getBorderColor(void) const
{
    return _sfBorderColor.getValue();
}

//! Set the value of the SamplerObjChunk::_sfBorderColor field.
inline
void SamplerObjChunkBase::setBorderColor(const Color4f &value)
{
    editSField(BorderColorFieldMask);

    _sfBorderColor.setValue(value);
}
//! Get the value of the SamplerObjChunk::_sfMinFilter field.

inline
GLenum &SamplerObjChunkBase::editMinFilter(void)
{
    editSField(MinFilterFieldMask);

    return _sfMinFilter.getValue();
}

//! Get the value of the SamplerObjChunk::_sfMinFilter field.
inline
const GLenum &SamplerObjChunkBase::getMinFilter(void) const
{
    return _sfMinFilter.getValue();
}

//! Set the value of the SamplerObjChunk::_sfMinFilter field.
inline
void SamplerObjChunkBase::setMinFilter(const GLenum &value)
{
    editSField(MinFilterFieldMask);

    _sfMinFilter.setValue(value);
}
//! Get the value of the SamplerObjChunk::_sfMagFilter field.

inline
GLenum &SamplerObjChunkBase::editMagFilter(void)
{
    editSField(MagFilterFieldMask);

    return _sfMagFilter.getValue();
}

//! Get the value of the SamplerObjChunk::_sfMagFilter field.
inline
const GLenum &SamplerObjChunkBase::getMagFilter(void) const
{
    return _sfMagFilter.getValue();
}

//! Set the value of the SamplerObjChunk::_sfMagFilter field.
inline
void SamplerObjChunkBase::setMagFilter(const GLenum &value)
{
    editSField(MagFilterFieldMask);

    _sfMagFilter.setValue(value);
}
//! Get the value of the SamplerObjChunk::_sfWrapS field.

inline
GLenum &SamplerObjChunkBase::editWrapS(void)
{
    editSField(WrapSFieldMask);

    return _sfWrapS.getValue();
}

//! Get the value of the SamplerObjChunk::_sfWrapS field.
inline
const GLenum &SamplerObjChunkBase::getWrapS(void) const
{
    return _sfWrapS.getValue();
}

//! Set the value of the SamplerObjChunk::_sfWrapS field.
inline
void SamplerObjChunkBase::setWrapS(const GLenum &value)
{
    editSField(WrapSFieldMask);

    _sfWrapS.setValue(value);
}
//! Get the value of the SamplerObjChunk::_sfWrapT field.

inline
GLenum &SamplerObjChunkBase::editWrapT(void)
{
    editSField(WrapTFieldMask);

    return _sfWrapT.getValue();
}

//! Get the value of the SamplerObjChunk::_sfWrapT field.
inline
const GLenum &SamplerObjChunkBase::getWrapT(void) const
{
    return _sfWrapT.getValue();
}

//! Set the value of the SamplerObjChunk::_sfWrapT field.
inline
void SamplerObjChunkBase::setWrapT(const GLenum &value)
{
    editSField(WrapTFieldMask);

    _sfWrapT.setValue(value);
}
//! Get the value of the SamplerObjChunk::_sfWrapR field.

inline
GLenum &SamplerObjChunkBase::editWrapR(void)
{
    editSField(WrapRFieldMask);

    return _sfWrapR.getValue();
}

//! Get the value of the SamplerObjChunk::_sfWrapR field.
inline
const GLenum &SamplerObjChunkBase::getWrapR(void) const
{
    return _sfWrapR.getValue();
}

//! Set the value of the SamplerObjChunk::_sfWrapR field.
inline
void SamplerObjChunkBase::setWrapR(const GLenum &value)
{
    editSField(WrapRFieldMask);

    _sfWrapR.setValue(value);
}
//! Get the value of the SamplerObjChunk::_sfMinLOD field.

inline
Real32 &SamplerObjChunkBase::editMinLOD(void)
{
    editSField(MinLODFieldMask);

    return _sfMinLOD.getValue();
}

//! Get the value of the SamplerObjChunk::_sfMinLOD field.
inline
      Real32  SamplerObjChunkBase::getMinLOD(void) const
{
    return _sfMinLOD.getValue();
}

//! Set the value of the SamplerObjChunk::_sfMinLOD field.
inline
void SamplerObjChunkBase::setMinLOD(const Real32 value)
{
    editSField(MinLODFieldMask);

    _sfMinLOD.setValue(value);
}
//! Get the value of the SamplerObjChunk::_sfMaxLOD field.

inline
Real32 &SamplerObjChunkBase::editMaxLOD(void)
{
    editSField(MaxLODFieldMask);

    return _sfMaxLOD.getValue();
}

//! Get the value of the SamplerObjChunk::_sfMaxLOD field.
inline
      Real32  SamplerObjChunkBase::getMaxLOD(void) const
{
    return _sfMaxLOD.getValue();
}

//! Set the value of the SamplerObjChunk::_sfMaxLOD field.
inline
void SamplerObjChunkBase::setMaxLOD(const Real32 value)
{
    editSField(MaxLODFieldMask);

    _sfMaxLOD.setValue(value);
}
//! Get the value of the SamplerObjChunk::_sfLODBias field.

inline
Real32 &SamplerObjChunkBase::editLODBias(void)
{
    editSField(LODBiasFieldMask);

    return _sfLODBias.getValue();
}

//! Get the value of the SamplerObjChunk::_sfLODBias field.
inline
      Real32  SamplerObjChunkBase::getLODBias(void) const
{
    return _sfLODBias.getValue();
}

//! Set the value of the SamplerObjChunk::_sfLODBias field.
inline
void SamplerObjChunkBase::setLODBias(const Real32 value)
{
    editSField(LODBiasFieldMask);

    _sfLODBias.setValue(value);
}
//! Get the value of the SamplerObjChunk::_sfCompareMode field.

inline
GLenum &SamplerObjChunkBase::editCompareMode(void)
{
    editSField(CompareModeFieldMask);

    return _sfCompareMode.getValue();
}

//! Get the value of the SamplerObjChunk::_sfCompareMode field.
inline
const GLenum &SamplerObjChunkBase::getCompareMode(void) const
{
    return _sfCompareMode.getValue();
}

//! Set the value of the SamplerObjChunk::_sfCompareMode field.
inline
void SamplerObjChunkBase::setCompareMode(const GLenum &value)
{
    editSField(CompareModeFieldMask);

    _sfCompareMode.setValue(value);
}
//! Get the value of the SamplerObjChunk::_sfCompareFunc field.

inline
GLenum &SamplerObjChunkBase::editCompareFunc(void)
{
    editSField(CompareFuncFieldMask);

    return _sfCompareFunc.getValue();
}

//! Get the value of the SamplerObjChunk::_sfCompareFunc field.
inline
const GLenum &SamplerObjChunkBase::getCompareFunc(void) const
{
    return _sfCompareFunc.getValue();
}

//! Set the value of the SamplerObjChunk::_sfCompareFunc field.
inline
void SamplerObjChunkBase::setCompareFunc(const GLenum &value)
{
    editSField(CompareFuncFieldMask);

    _sfCompareFunc.setValue(value);
}
//! Get the value of the SamplerObjChunk::_sfMaxAnisotropy field.

inline
Real32 &SamplerObjChunkBase::editMaxAnisotropy(void)
{
    editSField(MaxAnisotropyFieldMask);

    return _sfMaxAnisotropy.getValue();
}

//! Get the value of the SamplerObjChunk::_sfMaxAnisotropy field.
inline
      Real32  SamplerObjChunkBase::getMaxAnisotropy(void) const
{
    return _sfMaxAnisotropy.getValue();
}

//! Set the value of the SamplerObjChunk::_sfMaxAnisotropy field.
inline
void SamplerObjChunkBase::setMaxAnisotropy(const Real32 value)
{
    editSField(MaxAnisotropyFieldMask);

    _sfMaxAnisotropy.setValue(value);
}

//! Get the value of the \a index element the SamplerObjChunk::_mfTextureUnits field.
inline
      UInt32  SamplerObjChunkBase::getTextureUnits(const UInt32 index) const
{
    return _mfTextureUnits[index];
}

inline
MFUInt32           ::reference SamplerObjChunkBase::editTextureUnits(const UInt32 index)
{
    editMField(TextureUnitsFieldMask, _mfTextureUnits);

    return _mfTextureUnits[index];
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void SamplerObjChunkBase::execSync (      SamplerObjChunkBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (GLIdFieldMask & whichField))
        _sfGLId.syncWith(pFrom->_sfGLId);

    if(FieldBits::NoField != (TextureUnitsFieldMask & whichField))
        _mfTextureUnits.syncWith(pFrom->_mfTextureUnits,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (BorderColorFieldMask & whichField))
        _sfBorderColor.syncWith(pFrom->_sfBorderColor);

    if(FieldBits::NoField != (MinFilterFieldMask & whichField))
        _sfMinFilter.syncWith(pFrom->_sfMinFilter);

    if(FieldBits::NoField != (MagFilterFieldMask & whichField))
        _sfMagFilter.syncWith(pFrom->_sfMagFilter);

    if(FieldBits::NoField != (WrapSFieldMask & whichField))
        _sfWrapS.syncWith(pFrom->_sfWrapS);

    if(FieldBits::NoField != (WrapTFieldMask & whichField))
        _sfWrapT.syncWith(pFrom->_sfWrapT);

    if(FieldBits::NoField != (WrapRFieldMask & whichField))
        _sfWrapR.syncWith(pFrom->_sfWrapR);

    if(FieldBits::NoField != (MinLODFieldMask & whichField))
        _sfMinLOD.syncWith(pFrom->_sfMinLOD);

    if(FieldBits::NoField != (MaxLODFieldMask & whichField))
        _sfMaxLOD.syncWith(pFrom->_sfMaxLOD);

    if(FieldBits::NoField != (LODBiasFieldMask & whichField))
        _sfLODBias.syncWith(pFrom->_sfLODBias);

    if(FieldBits::NoField != (CompareModeFieldMask & whichField))
        _sfCompareMode.syncWith(pFrom->_sfCompareMode);

    if(FieldBits::NoField != (CompareFuncFieldMask & whichField))
        _sfCompareFunc.syncWith(pFrom->_sfCompareFunc);

    if(FieldBits::NoField != (MaxAnisotropyFieldMask & whichField))
        _sfMaxAnisotropy.syncWith(pFrom->_sfMaxAnisotropy);
}
#endif


inline
const Char8 *SamplerObjChunkBase::getClassname(void)
{
    return "SamplerObjChunk";
}
OSG_GEN_CONTAINERPTR(SamplerObjChunk);

OSG_END_NAMESPACE

