/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class MaterialDesc!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE



//! access the type of the class
inline
OSG::FieldContainerType &MaterialDescBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 MaterialDescBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 MaterialDescBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/

//! Get the value of the MaterialDesc::_sfName field.

inline
std::string &MaterialDescBase::editName(void)
{
    editSField(NameFieldMask);

    return _sfName.getValue();
}

//! Get the value of the MaterialDesc::_sfName field.
inline
const std::string &MaterialDescBase::getName(void) const
{
    return _sfName.getValue();
}

//! Set the value of the MaterialDesc::_sfName field.
inline
void MaterialDescBase::setName(const std::string &value)
{
    editSField(NameFieldMask);

    _sfName.setValue(value);
}
//! Get the value of the MaterialDesc::_sfDescHash field.

inline
UInt64 &MaterialDescBase::editDescHash(void)
{
    editSField(DescHashFieldMask);

    return _sfDescHash.getValue();
}

//! Get the value of the MaterialDesc::_sfDescHash field.
inline
      UInt64  MaterialDescBase::getDescHash(void) const
{
    return _sfDescHash.getValue();
}

//! Set the value of the MaterialDesc::_sfDescHash field.
inline
void MaterialDescBase::setDescHash(const UInt64 value)
{
    editSField(DescHashFieldMask);

    _sfDescHash.setValue(value);
}
//! Get the value of the MaterialDesc::_sfModeFlags field.

inline
UInt32 &MaterialDescBase::editModeFlags(void)
{
    editSField(ModeFlagsFieldMask);

    return _sfModeFlags.getValue();
}

//! Get the value of the MaterialDesc::_sfModeFlags field.
inline
      UInt32  MaterialDescBase::getModeFlags(void) const
{
    return _sfModeFlags.getValue();
}

//! Set the value of the MaterialDesc::_sfModeFlags field.
inline
void MaterialDescBase::setModeFlags(const UInt32 value)
{
    editSField(ModeFlagsFieldMask);

    _sfModeFlags.setValue(value);
}
//! Get the value of the MaterialDesc::_sfNumUVChannels field.

inline
UInt32 &MaterialDescBase::editNumUVChannels(void)
{
    editSField(NumUVChannelsFieldMask);

    return _sfNumUVChannels.getValue();
}

//! Get the value of the MaterialDesc::_sfNumUVChannels field.
inline
      UInt32  MaterialDescBase::getNumUVChannels(void) const
{
    return _sfNumUVChannels.getValue();
}

//! Set the value of the MaterialDesc::_sfNumUVChannels field.
inline
void MaterialDescBase::setNumUVChannels(const UInt32 value)
{
    editSField(NumUVChannelsFieldMask);

    _sfNumUVChannels.setValue(value);
}
//! Get the value of the MaterialDesc::_sfNumColorChannels field.

inline
UInt32 &MaterialDescBase::editNumColorChannels(void)
{
    editSField(NumColorChannelsFieldMask);

    return _sfNumColorChannels.getValue();
}

//! Get the value of the MaterialDesc::_sfNumColorChannels field.
inline
      UInt32  MaterialDescBase::getNumColorChannels(void) const
{
    return _sfNumColorChannels.getValue();
}

//! Set the value of the MaterialDesc::_sfNumColorChannels field.
inline
void MaterialDescBase::setNumColorChannels(const UInt32 value)
{
    editSField(NumColorChannelsFieldMask);

    _sfNumColorChannels.setValue(value);
}
//! Get the value of the MaterialDesc::_sfShadingModel field.

inline
UInt32 &MaterialDescBase::editShadingModel(void)
{
    editSField(ShadingModelFieldMask);

    return _sfShadingModel.getValue();
}

//! Get the value of the MaterialDesc::_sfShadingModel field.
inline
      UInt32  MaterialDescBase::getShadingModel(void) const
{
    return _sfShadingModel.getValue();
}

//! Set the value of the MaterialDesc::_sfShadingModel field.
inline
void MaterialDescBase::setShadingModel(const UInt32 value)
{
    editSField(ShadingModelFieldMask);

    _sfShadingModel.setValue(value);
}
//! Get the value of the MaterialDesc::_sfOverrideShadingModel field.

inline
UInt32 &MaterialDescBase::editOverrideShadingModel(void)
{
    editSField(OverrideShadingModelFieldMask);

    return _sfOverrideShadingModel.getValue();
}

//! Get the value of the MaterialDesc::_sfOverrideShadingModel field.
inline
      UInt32  MaterialDescBase::getOverrideShadingModel(void) const
{
    return _sfOverrideShadingModel.getValue();
}

//! Set the value of the MaterialDesc::_sfOverrideShadingModel field.
inline
void MaterialDescBase::setOverrideShadingModel(const UInt32 value)
{
    editSField(OverrideShadingModelFieldMask);

    _sfOverrideShadingModel.setValue(value);
}
//! Get the value of the MaterialDesc::_sfBlendMode field.

inline
UInt32 &MaterialDescBase::editBlendMode(void)
{
    editSField(BlendModeFieldMask);

    return _sfBlendMode.getValue();
}

//! Get the value of the MaterialDesc::_sfBlendMode field.
inline
      UInt32  MaterialDescBase::getBlendMode(void) const
{
    return _sfBlendMode.getValue();
}

//! Set the value of the MaterialDesc::_sfBlendMode field.
inline
void MaterialDescBase::setBlendMode(const UInt32 value)
{
    editSField(BlendModeFieldMask);

    _sfBlendMode.setValue(value);
}
//! Get the value of the MaterialDesc::_sfEmissive field.

inline
Color3f &MaterialDescBase::editEmissive(void)
{
    editSField(EmissiveFieldMask);

    return _sfEmissive.getValue();
}

//! Get the value of the MaterialDesc::_sfEmissive field.
inline
const Color3f &MaterialDescBase::getEmissive(void) const
{
    return _sfEmissive.getValue();
}

//! Set the value of the MaterialDesc::_sfEmissive field.
inline
void MaterialDescBase::setEmissive(const Color3f &value)
{
    editSField(EmissiveFieldMask);

    _sfEmissive.setValue(value);
}
//! Get the value of the MaterialDesc::_sfAlbedo field.

inline
Color3f &MaterialDescBase::editAlbedo(void)
{
    editSField(AlbedoFieldMask);

    return _sfAlbedo.getValue();
}

//! Get the value of the MaterialDesc::_sfAlbedo field.
inline
const Color3f &MaterialDescBase::getAlbedo(void) const
{
    return _sfAlbedo.getValue();
}

//! Set the value of the MaterialDesc::_sfAlbedo field.
inline
void MaterialDescBase::setAlbedo(const Color3f &value)
{
    editSField(AlbedoFieldMask);

    _sfAlbedo.setValue(value);
}
//! Get the value of the MaterialDesc::_sfSpecular field.

inline
Color3f &MaterialDescBase::editSpecular(void)
{
    editSField(SpecularFieldMask);

    return _sfSpecular.getValue();
}

//! Get the value of the MaterialDesc::_sfSpecular field.
inline
const Color3f &MaterialDescBase::getSpecular(void) const
{
    return _sfSpecular.getValue();
}

//! Set the value of the MaterialDesc::_sfSpecular field.
inline
void MaterialDescBase::setSpecular(const Color3f &value)
{
    editSField(SpecularFieldMask);

    _sfSpecular.setValue(value);
}
//! Get the value of the MaterialDesc::_sfTransparent field.

inline
Color3f &MaterialDescBase::editTransparent(void)
{
    editSField(TransparentFieldMask);

    return _sfTransparent.getValue();
}

//! Get the value of the MaterialDesc::_sfTransparent field.
inline
const Color3f &MaterialDescBase::getTransparent(void) const
{
    return _sfTransparent.getValue();
}

//! Set the value of the MaterialDesc::_sfTransparent field.
inline
void MaterialDescBase::setTransparent(const Color3f &value)
{
    editSField(TransparentFieldMask);

    _sfTransparent.setValue(value);
}
//! Get the value of the MaterialDesc::_sfReflective field.

inline
Color3f &MaterialDescBase::editReflective(void)
{
    editSField(ReflectiveFieldMask);

    return _sfReflective.getValue();
}

//! Get the value of the MaterialDesc::_sfReflective field.
inline
const Color3f &MaterialDescBase::getReflective(void) const
{
    return _sfReflective.getValue();
}

//! Set the value of the MaterialDesc::_sfReflective field.
inline
void MaterialDescBase::setReflective(const Color3f &value)
{
    editSField(ReflectiveFieldMask);

    _sfReflective.setValue(value);
}
//! Get the value of the MaterialDesc::_sfSpecularStrength field.

inline
Real32 &MaterialDescBase::editSpecularStrength(void)
{
    editSField(SpecularStrengthFieldMask);

    return _sfSpecularStrength.getValue();
}

//! Get the value of the MaterialDesc::_sfSpecularStrength field.
inline
      Real32  MaterialDescBase::getSpecularStrength(void) const
{
    return _sfSpecularStrength.getValue();
}

//! Set the value of the MaterialDesc::_sfSpecularStrength field.
inline
void MaterialDescBase::setSpecularStrength(const Real32 value)
{
    editSField(SpecularStrengthFieldMask);

    _sfSpecularStrength.setValue(value);
}
//! Get the value of the MaterialDesc::_sfEmissiveStrength field.

inline
Real32 &MaterialDescBase::editEmissiveStrength(void)
{
    editSField(EmissiveStrengthFieldMask);

    return _sfEmissiveStrength.getValue();
}

//! Get the value of the MaterialDesc::_sfEmissiveStrength field.
inline
      Real32  MaterialDescBase::getEmissiveStrength(void) const
{
    return _sfEmissiveStrength.getValue();
}

//! Set the value of the MaterialDesc::_sfEmissiveStrength field.
inline
void MaterialDescBase::setEmissiveStrength(const Real32 value)
{
    editSField(EmissiveStrengthFieldMask);

    _sfEmissiveStrength.setValue(value);
}
//! Get the value of the MaterialDesc::_sfOpacity field.

inline
Real32 &MaterialDescBase::editOpacity(void)
{
    editSField(OpacityFieldMask);

    return _sfOpacity.getValue();
}

//! Get the value of the MaterialDesc::_sfOpacity field.
inline
      Real32  MaterialDescBase::getOpacity(void) const
{
    return _sfOpacity.getValue();
}

//! Set the value of the MaterialDesc::_sfOpacity field.
inline
void MaterialDescBase::setOpacity(const Real32 value)
{
    editSField(OpacityFieldMask);

    _sfOpacity.setValue(value);
}
//! Get the value of the MaterialDesc::_sfOpacityCutOff field.

inline
Real32 &MaterialDescBase::editOpacityCutOff(void)
{
    editSField(OpacityCutOffFieldMask);

    return _sfOpacityCutOff.getValue();
}

//! Get the value of the MaterialDesc::_sfOpacityCutOff field.
inline
      Real32  MaterialDescBase::getOpacityCutOff(void) const
{
    return _sfOpacityCutOff.getValue();
}

//! Set the value of the MaterialDesc::_sfOpacityCutOff field.
inline
void MaterialDescBase::setOpacityCutOff(const Real32 value)
{
    editSField(OpacityCutOffFieldMask);

    _sfOpacityCutOff.setValue(value);
}
//! Get the value of the MaterialDesc::_sfOpacityMode field.

inline
UInt32 &MaterialDescBase::editOpacityMode(void)
{
    editSField(OpacityModeFieldMask);

    return _sfOpacityMode.getValue();
}

//! Get the value of the MaterialDesc::_sfOpacityMode field.
inline
      UInt32  MaterialDescBase::getOpacityMode(void) const
{
    return _sfOpacityMode.getValue();
}

//! Set the value of the MaterialDesc::_sfOpacityMode field.
inline
void MaterialDescBase::setOpacityMode(const UInt32 value)
{
    editSField(OpacityModeFieldMask);

    _sfOpacityMode.setValue(value);
}
//! Get the value of the MaterialDesc::_sfReflectivity field.

inline
Real32 &MaterialDescBase::editReflectivity(void)
{
    editSField(ReflectivityFieldMask);

    return _sfReflectivity.getValue();
}

//! Get the value of the MaterialDesc::_sfReflectivity field.
inline
      Real32  MaterialDescBase::getReflectivity(void) const
{
    return _sfReflectivity.getValue();
}

//! Set the value of the MaterialDesc::_sfReflectivity field.
inline
void MaterialDescBase::setReflectivity(const Real32 value)
{
    editSField(ReflectivityFieldMask);

    _sfReflectivity.setValue(value);
}
//! Get the value of the MaterialDesc::_sfReflectance field.

inline
Real32 &MaterialDescBase::editReflectance(void)
{
    editSField(ReflectanceFieldMask);

    return _sfReflectance.getValue();
}

//! Get the value of the MaterialDesc::_sfReflectance field.
inline
      Real32  MaterialDescBase::getReflectance(void) const
{
    return _sfReflectance.getValue();
}

//! Set the value of the MaterialDesc::_sfReflectance field.
inline
void MaterialDescBase::setReflectance(const Real32 value)
{
    editSField(ReflectanceFieldMask);

    _sfReflectance.setValue(value);
}
//! Get the value of the MaterialDesc::_sfBumpScaling field.

inline
Real32 &MaterialDescBase::editBumpScaling(void)
{
    editSField(BumpScalingFieldMask);

    return _sfBumpScaling.getValue();
}

//! Get the value of the MaterialDesc::_sfBumpScaling field.
inline
      Real32  MaterialDescBase::getBumpScaling(void) const
{
    return _sfBumpScaling.getValue();
}

//! Set the value of the MaterialDesc::_sfBumpScaling field.
inline
void MaterialDescBase::setBumpScaling(const Real32 value)
{
    editSField(BumpScalingFieldMask);

    _sfBumpScaling.setValue(value);
}
//! Get the value of the MaterialDesc::_sfAnisotropy field.

inline
Real32 &MaterialDescBase::editAnisotropy(void)
{
    editSField(AnisotropyFieldMask);

    return _sfAnisotropy.getValue();
}

//! Get the value of the MaterialDesc::_sfAnisotropy field.
inline
      Real32  MaterialDescBase::getAnisotropy(void) const
{
    return _sfAnisotropy.getValue();
}

//! Set the value of the MaterialDesc::_sfAnisotropy field.
inline
void MaterialDescBase::setAnisotropy(const Real32 value)
{
    editSField(AnisotropyFieldMask);

    _sfAnisotropy.setValue(value);
}
//! Get the value of the MaterialDesc::_sfRoughness field.

inline
Real32 &MaterialDescBase::editRoughness(void)
{
    editSField(RoughnessFieldMask);

    return _sfRoughness.getValue();
}

//! Get the value of the MaterialDesc::_sfRoughness field.
inline
      Real32  MaterialDescBase::getRoughness(void) const
{
    return _sfRoughness.getValue();
}

//! Set the value of the MaterialDesc::_sfRoughness field.
inline
void MaterialDescBase::setRoughness(const Real32 value)
{
    editSField(RoughnessFieldMask);

    _sfRoughness.setValue(value);
}
//! Get the value of the MaterialDesc::_sfMetalness field.

inline
Real32 &MaterialDescBase::editMetalness(void)
{
    editSField(MetalnessFieldMask);

    return _sfMetalness.getValue();
}

//! Get the value of the MaterialDesc::_sfMetalness field.
inline
      Real32  MaterialDescBase::getMetalness(void) const
{
    return _sfMetalness.getValue();
}

//! Set the value of the MaterialDesc::_sfMetalness field.
inline
void MaterialDescBase::setMetalness(const Real32 value)
{
    editSField(MetalnessFieldMask);

    _sfMetalness.setValue(value);
}
//! Get the value of the MaterialDesc::_sfClearCoatStrength field.

inline
Real32 &MaterialDescBase::editClearCoatStrength(void)
{
    editSField(ClearCoatStrengthFieldMask);

    return _sfClearCoatStrength.getValue();
}

//! Get the value of the MaterialDesc::_sfClearCoatStrength field.
inline
      Real32  MaterialDescBase::getClearCoatStrength(void) const
{
    return _sfClearCoatStrength.getValue();
}

//! Set the value of the MaterialDesc::_sfClearCoatStrength field.
inline
void MaterialDescBase::setClearCoatStrength(const Real32 value)
{
    editSField(ClearCoatStrengthFieldMask);

    _sfClearCoatStrength.setValue(value);
}
//! Get the value of the MaterialDesc::_sfClearCoatRoughness field.

inline
Real32 &MaterialDescBase::editClearCoatRoughness(void)
{
    editSField(ClearCoatRoughnessFieldMask);

    return _sfClearCoatRoughness.getValue();
}

//! Get the value of the MaterialDesc::_sfClearCoatRoughness field.
inline
      Real32  MaterialDescBase::getClearCoatRoughness(void) const
{
    return _sfClearCoatRoughness.getValue();
}

//! Set the value of the MaterialDesc::_sfClearCoatRoughness field.
inline
void MaterialDescBase::setClearCoatRoughness(const Real32 value)
{
    editSField(ClearCoatRoughnessFieldMask);

    _sfClearCoatRoughness.setValue(value);
}
//! Get the value of the MaterialDesc::_sfSheenColor field.

inline
Color3f &MaterialDescBase::editSheenColor(void)
{
    editSField(SheenColorFieldMask);

    return _sfSheenColor.getValue();
}

//! Get the value of the MaterialDesc::_sfSheenColor field.
inline
const Color3f &MaterialDescBase::getSheenColor(void) const
{
    return _sfSheenColor.getValue();
}

//! Set the value of the MaterialDesc::_sfSheenColor field.
inline
void MaterialDescBase::setSheenColor(const Color3f &value)
{
    editSField(SheenColorFieldMask);

    _sfSheenColor.setValue(value);
}
//! Get the value of the MaterialDesc::_sfSubSurfaceColor field.

inline
Color3f &MaterialDescBase::editSubSurfaceColor(void)
{
    editSField(SubSurfaceColorFieldMask);

    return _sfSubSurfaceColor.getValue();
}

//! Get the value of the MaterialDesc::_sfSubSurfaceColor field.
inline
const Color3f &MaterialDescBase::getSubSurfaceColor(void) const
{
    return _sfSubSurfaceColor.getValue();
}

//! Set the value of the MaterialDesc::_sfSubSurfaceColor field.
inline
void MaterialDescBase::setSubSurfaceColor(const Color3f &value)
{
    editSField(SubSurfaceColorFieldMask);

    _sfSubSurfaceColor.setValue(value);
}
//! Get the value of the MaterialDesc::_sfToonLevels field.

inline
Int32 &MaterialDescBase::editToonLevels(void)
{
    editSField(ToonLevelsFieldMask);

    return _sfToonLevels.getValue();
}

//! Get the value of the MaterialDesc::_sfToonLevels field.
inline
      Int32  MaterialDescBase::getToonLevels(void) const
{
    return _sfToonLevels.getValue();
}

//! Set the value of the MaterialDesc::_sfToonLevels field.
inline
void MaterialDescBase::setToonLevels(const Int32 value)
{
    editSField(ToonLevelsFieldMask);

    _sfToonLevels.setValue(value);
}
//! Get the value of the MaterialDesc::_sfGoochCool field.

inline
Color3f &MaterialDescBase::editGoochCool(void)
{
    editSField(GoochCoolFieldMask);

    return _sfGoochCool.getValue();
}

//! Get the value of the MaterialDesc::_sfGoochCool field.
inline
const Color3f &MaterialDescBase::getGoochCool(void) const
{
    return _sfGoochCool.getValue();
}

//! Set the value of the MaterialDesc::_sfGoochCool field.
inline
void MaterialDescBase::setGoochCool(const Color3f &value)
{
    editSField(GoochCoolFieldMask);

    _sfGoochCool.setValue(value);
}
//! Get the value of the MaterialDesc::_sfGoochWarm field.

inline
Color3f &MaterialDescBase::editGoochWarm(void)
{
    editSField(GoochWarmFieldMask);

    return _sfGoochWarm.getValue();
}

//! Get the value of the MaterialDesc::_sfGoochWarm field.
inline
const Color3f &MaterialDescBase::getGoochWarm(void) const
{
    return _sfGoochWarm.getValue();
}

//! Set the value of the MaterialDesc::_sfGoochWarm field.
inline
void MaterialDescBase::setGoochWarm(const Color3f &value)
{
    editSField(GoochWarmFieldMask);

    _sfGoochWarm.setValue(value);
}
//! Get the value of the MaterialDesc::_sfGoochMixin field.

inline
Real32 &MaterialDescBase::editGoochMixin(void)
{
    editSField(GoochMixinFieldMask);

    return _sfGoochMixin.getValue();
}

//! Get the value of the MaterialDesc::_sfGoochMixin field.
inline
      Real32  MaterialDescBase::getGoochMixin(void) const
{
    return _sfGoochMixin.getValue();
}

//! Set the value of the MaterialDesc::_sfGoochMixin field.
inline
void MaterialDescBase::setGoochMixin(const Real32 value)
{
    editSField(GoochMixinFieldMask);

    _sfGoochMixin.setValue(value);
}
//! Get the value of the MaterialDesc::_sfGoochCoolMixin field.

inline
Real32 &MaterialDescBase::editGoochCoolMixin(void)
{
    editSField(GoochCoolMixinFieldMask);

    return _sfGoochCoolMixin.getValue();
}

//! Get the value of the MaterialDesc::_sfGoochCoolMixin field.
inline
      Real32  MaterialDescBase::getGoochCoolMixin(void) const
{
    return _sfGoochCoolMixin.getValue();
}

//! Set the value of the MaterialDesc::_sfGoochCoolMixin field.
inline
void MaterialDescBase::setGoochCoolMixin(const Real32 value)
{
    editSField(GoochCoolMixinFieldMask);

    _sfGoochCoolMixin.setValue(value);
}
//! Get the value of the MaterialDesc::_sfGoochWarmMixin field.

inline
Real32 &MaterialDescBase::editGoochWarmMixin(void)
{
    editSField(GoochWarmMixinFieldMask);

    return _sfGoochWarmMixin.getValue();
}

//! Get the value of the MaterialDesc::_sfGoochWarmMixin field.
inline
      Real32  MaterialDescBase::getGoochWarmMixin(void) const
{
    return _sfGoochWarmMixin.getValue();
}

//! Set the value of the MaterialDesc::_sfGoochWarmMixin field.
inline
void MaterialDescBase::setGoochWarmMixin(const Real32 value)
{
    editSField(GoochWarmMixinFieldMask);

    _sfGoochWarmMixin.setValue(value);
}
//! Get the value of the MaterialDesc::_sfCullFace field.

inline
GLenum &MaterialDescBase::editCullFace(void)
{
    editSField(CullFaceFieldMask);

    return _sfCullFace.getValue();
}

//! Get the value of the MaterialDesc::_sfCullFace field.
inline
const GLenum &MaterialDescBase::getCullFace(void) const
{
    return _sfCullFace.getValue();
}

//! Set the value of the MaterialDesc::_sfCullFace field.
inline
void MaterialDescBase::setCullFace(const GLenum &value)
{
    editSField(CullFaceFieldMask);

    _sfCullFace.setValue(value);
}
//! Get the value of the MaterialDesc::_sfFrontFace field.

inline
GLenum &MaterialDescBase::editFrontFace(void)
{
    editSField(FrontFaceFieldMask);

    return _sfFrontFace.getValue();
}

//! Get the value of the MaterialDesc::_sfFrontFace field.
inline
const GLenum &MaterialDescBase::getFrontFace(void) const
{
    return _sfFrontFace.getValue();
}

//! Set the value of the MaterialDesc::_sfFrontFace field.
inline
void MaterialDescBase::setFrontFace(const GLenum &value)
{
    editSField(FrontFaceFieldMask);

    _sfFrontFace.setValue(value);
}
//! Get the value of the MaterialDesc::_sfFrontMode field.

inline
GLenum &MaterialDescBase::editFrontMode(void)
{
    editSField(FrontModeFieldMask);

    return _sfFrontMode.getValue();
}

//! Get the value of the MaterialDesc::_sfFrontMode field.
inline
const GLenum &MaterialDescBase::getFrontMode(void) const
{
    return _sfFrontMode.getValue();
}

//! Set the value of the MaterialDesc::_sfFrontMode field.
inline
void MaterialDescBase::setFrontMode(const GLenum &value)
{
    editSField(FrontModeFieldMask);

    _sfFrontMode.setValue(value);
}
//! Get the value of the MaterialDesc::_sfBackMode field.

inline
GLenum &MaterialDescBase::editBackMode(void)
{
    editSField(BackModeFieldMask);

    return _sfBackMode.getValue();
}

//! Get the value of the MaterialDesc::_sfBackMode field.
inline
const GLenum &MaterialDescBase::getBackMode(void) const
{
    return _sfBackMode.getValue();
}

//! Set the value of the MaterialDesc::_sfBackMode field.
inline
void MaterialDescBase::setBackMode(const GLenum &value)
{
    editSField(BackModeFieldMask);

    _sfBackMode.setValue(value);
}
//! Get the value of the MaterialDesc::_sfOffsetFactor field.

inline
Real32 &MaterialDescBase::editOffsetFactor(void)
{
    editSField(OffsetFactorFieldMask);

    return _sfOffsetFactor.getValue();
}

//! Get the value of the MaterialDesc::_sfOffsetFactor field.
inline
      Real32  MaterialDescBase::getOffsetFactor(void) const
{
    return _sfOffsetFactor.getValue();
}

//! Set the value of the MaterialDesc::_sfOffsetFactor field.
inline
void MaterialDescBase::setOffsetFactor(const Real32 value)
{
    editSField(OffsetFactorFieldMask);

    _sfOffsetFactor.setValue(value);
}
//! Get the value of the MaterialDesc::_sfOffsetBias field.

inline
Real32 &MaterialDescBase::editOffsetBias(void)
{
    editSField(OffsetBiasFieldMask);

    return _sfOffsetBias.getValue();
}

//! Get the value of the MaterialDesc::_sfOffsetBias field.
inline
      Real32  MaterialDescBase::getOffsetBias(void) const
{
    return _sfOffsetBias.getValue();
}

//! Set the value of the MaterialDesc::_sfOffsetBias field.
inline
void MaterialDescBase::setOffsetBias(const Real32 value)
{
    editSField(OffsetBiasFieldMask);

    _sfOffsetBias.setValue(value);
}
//! Get the value of the MaterialDesc::_sfExcludeHashingMask field.

inline
BitVector &MaterialDescBase::editExcludeHashingMask(void)
{
    editSField(ExcludeHashingMaskFieldMask);

    return _sfExcludeHashingMask.getValue();
}

//! Get the value of the MaterialDesc::_sfExcludeHashingMask field.
inline
const BitVector &MaterialDescBase::getExcludeHashingMask(void) const
{
    return _sfExcludeHashingMask.getValue();
}

//! Set the value of the MaterialDesc::_sfExcludeHashingMask field.
inline
void MaterialDescBase::setExcludeHashingMask(const BitVector &value)
{
    editSField(ExcludeHashingMaskFieldMask);

    _sfExcludeHashingMask.setValue(value);
}

//! Get the value of the \a index element the MaterialDesc::_mfUVDimension field.
inline
      UInt8  MaterialDescBase::getUVDimension(const UInt32 index) const
{
    return _mfUVDimension[index];
}

inline
MFUInt8            ::reference MaterialDescBase::editUVDimension(const UInt32 index)
{
    editMField(UVDimensionFieldMask, _mfUVDimension);

    return _mfUVDimension[index];
}



#ifdef OSG_MT_CPTR_ASPECT
inline
void MaterialDescBase::execSync (      MaterialDescBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (NameFieldMask & whichField))
        _sfName.syncWith(pFrom->_sfName);

    if(FieldBits::NoField != (DescHashFieldMask & whichField))
        _sfDescHash.syncWith(pFrom->_sfDescHash);

    if(FieldBits::NoField != (ModeFlagsFieldMask & whichField))
        _sfModeFlags.syncWith(pFrom->_sfModeFlags);

    if(FieldBits::NoField != (NumUVChannelsFieldMask & whichField))
        _sfNumUVChannels.syncWith(pFrom->_sfNumUVChannels);

    if(FieldBits::NoField != (UVDimensionFieldMask & whichField))
        _mfUVDimension.syncWith(pFrom->_mfUVDimension,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (NumColorChannelsFieldMask & whichField))
        _sfNumColorChannels.syncWith(pFrom->_sfNumColorChannels);

    if(FieldBits::NoField != (ShadingModelFieldMask & whichField))
        _sfShadingModel.syncWith(pFrom->_sfShadingModel);

    if(FieldBits::NoField != (OverrideShadingModelFieldMask & whichField))
        _sfOverrideShadingModel.syncWith(pFrom->_sfOverrideShadingModel);

    if(FieldBits::NoField != (BlendModeFieldMask & whichField))
        _sfBlendMode.syncWith(pFrom->_sfBlendMode);

    if(FieldBits::NoField != (EmissiveFieldMask & whichField))
        _sfEmissive.syncWith(pFrom->_sfEmissive);

    if(FieldBits::NoField != (AlbedoFieldMask & whichField))
        _sfAlbedo.syncWith(pFrom->_sfAlbedo);

    if(FieldBits::NoField != (SpecularFieldMask & whichField))
        _sfSpecular.syncWith(pFrom->_sfSpecular);

    if(FieldBits::NoField != (TransparentFieldMask & whichField))
        _sfTransparent.syncWith(pFrom->_sfTransparent);

    if(FieldBits::NoField != (ReflectiveFieldMask & whichField))
        _sfReflective.syncWith(pFrom->_sfReflective);

    if(FieldBits::NoField != (SpecularStrengthFieldMask & whichField))
        _sfSpecularStrength.syncWith(pFrom->_sfSpecularStrength);

    if(FieldBits::NoField != (EmissiveStrengthFieldMask & whichField))
        _sfEmissiveStrength.syncWith(pFrom->_sfEmissiveStrength);

    if(FieldBits::NoField != (OpacityFieldMask & whichField))
        _sfOpacity.syncWith(pFrom->_sfOpacity);

    if(FieldBits::NoField != (OpacityCutOffFieldMask & whichField))
        _sfOpacityCutOff.syncWith(pFrom->_sfOpacityCutOff);

    if(FieldBits::NoField != (OpacityModeFieldMask & whichField))
        _sfOpacityMode.syncWith(pFrom->_sfOpacityMode);

    if(FieldBits::NoField != (ReflectivityFieldMask & whichField))
        _sfReflectivity.syncWith(pFrom->_sfReflectivity);

    if(FieldBits::NoField != (ReflectanceFieldMask & whichField))
        _sfReflectance.syncWith(pFrom->_sfReflectance);

    if(FieldBits::NoField != (BumpScalingFieldMask & whichField))
        _sfBumpScaling.syncWith(pFrom->_sfBumpScaling);

    if(FieldBits::NoField != (AnisotropyFieldMask & whichField))
        _sfAnisotropy.syncWith(pFrom->_sfAnisotropy);

    if(FieldBits::NoField != (RoughnessFieldMask & whichField))
        _sfRoughness.syncWith(pFrom->_sfRoughness);

    if(FieldBits::NoField != (MetalnessFieldMask & whichField))
        _sfMetalness.syncWith(pFrom->_sfMetalness);

    if(FieldBits::NoField != (ClearCoatStrengthFieldMask & whichField))
        _sfClearCoatStrength.syncWith(pFrom->_sfClearCoatStrength);

    if(FieldBits::NoField != (ClearCoatRoughnessFieldMask & whichField))
        _sfClearCoatRoughness.syncWith(pFrom->_sfClearCoatRoughness);

    if(FieldBits::NoField != (SheenColorFieldMask & whichField))
        _sfSheenColor.syncWith(pFrom->_sfSheenColor);

    if(FieldBits::NoField != (SubSurfaceColorFieldMask & whichField))
        _sfSubSurfaceColor.syncWith(pFrom->_sfSubSurfaceColor);

    if(FieldBits::NoField != (ToonLevelsFieldMask & whichField))
        _sfToonLevels.syncWith(pFrom->_sfToonLevels);

    if(FieldBits::NoField != (GoochCoolFieldMask & whichField))
        _sfGoochCool.syncWith(pFrom->_sfGoochCool);

    if(FieldBits::NoField != (GoochWarmFieldMask & whichField))
        _sfGoochWarm.syncWith(pFrom->_sfGoochWarm);

    if(FieldBits::NoField != (GoochMixinFieldMask & whichField))
        _sfGoochMixin.syncWith(pFrom->_sfGoochMixin);

    if(FieldBits::NoField != (GoochCoolMixinFieldMask & whichField))
        _sfGoochCoolMixin.syncWith(pFrom->_sfGoochCoolMixin);

    if(FieldBits::NoField != (GoochWarmMixinFieldMask & whichField))
        _sfGoochWarmMixin.syncWith(pFrom->_sfGoochWarmMixin);

    if(FieldBits::NoField != (CullFaceFieldMask & whichField))
        _sfCullFace.syncWith(pFrom->_sfCullFace);

    if(FieldBits::NoField != (FrontFaceFieldMask & whichField))
        _sfFrontFace.syncWith(pFrom->_sfFrontFace);

    if(FieldBits::NoField != (FrontModeFieldMask & whichField))
        _sfFrontMode.syncWith(pFrom->_sfFrontMode);

    if(FieldBits::NoField != (BackModeFieldMask & whichField))
        _sfBackMode.syncWith(pFrom->_sfBackMode);

    if(FieldBits::NoField != (OffsetFactorFieldMask & whichField))
        _sfOffsetFactor.syncWith(pFrom->_sfOffsetFactor);

    if(FieldBits::NoField != (OffsetBiasFieldMask & whichField))
        _sfOffsetBias.syncWith(pFrom->_sfOffsetBias);

    if(FieldBits::NoField != (TextureDescFieldMask & whichField))
        _mfTextureDesc.syncWith(pFrom->_mfTextureDesc,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (ExcludeHashingMaskFieldMask & whichField))
        _sfExcludeHashingMask.syncWith(pFrom->_sfExcludeHashingMask);
}
#endif


inline
const Char8 *MaterialDescBase::getClassname(void)
{
    return "MaterialDesc";
}
OSG_GEN_CONTAINERPTR(MaterialDesc);

OSG_END_NAMESPACE

