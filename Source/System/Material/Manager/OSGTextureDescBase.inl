/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TextureDesc!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE



//! access the type of the class
inline
OSG::FieldContainerType &TextureDescBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 TextureDescBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 TextureDescBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/

//! Get the value of the TextureDesc::_sfTextureType field.

inline
UInt32 &TextureDescBase::editTextureType(void)
{
    editSField(TextureTypeFieldMask);

    return _sfTextureType.getValue();
}

//! Get the value of the TextureDesc::_sfTextureType field.
inline
      UInt32  TextureDescBase::getTextureType(void) const
{
    return _sfTextureType.getValue();
}

//! Set the value of the TextureDesc::_sfTextureType field.
inline
void TextureDescBase::setTextureType(const UInt32 value)
{
    editSField(TextureTypeFieldMask);

    _sfTextureType.setValue(value);
}
//! Get the value of the TextureDesc::_sfSwizzle field.

inline
std::string &TextureDescBase::editSwizzle(void)
{
    editSField(SwizzleFieldMask);

    return _sfSwizzle.getValue();
}

//! Get the value of the TextureDesc::_sfSwizzle field.
inline
const std::string &TextureDescBase::getSwizzle(void) const
{
    return _sfSwizzle.getValue();
}

//! Set the value of the TextureDesc::_sfSwizzle field.
inline
void TextureDescBase::setSwizzle(const std::string &value)
{
    editSField(SwizzleFieldMask);

    _sfSwizzle.setValue(value);
}
//! Get the value of the TextureDesc::_sfIsSRGBTexture field.

inline
bool &TextureDescBase::editIsSRGBTexture(void)
{
    editSField(IsSRGBTextureFieldMask);

    return _sfIsSRGBTexture.getValue();
}

//! Get the value of the TextureDesc::_sfIsSRGBTexture field.
inline
      bool  TextureDescBase::getIsSRGBTexture(void) const
{
    return _sfIsSRGBTexture.getValue();
}

//! Set the value of the TextureDesc::_sfIsSRGBTexture field.
inline
void TextureDescBase::setIsSRGBTexture(const bool value)
{
    editSField(IsSRGBTextureFieldMask);

    _sfIsSRGBTexture.setValue(value);
}
//! Get the value of the TextureDesc::_sfTexUnit field.

inline
Int32 &TextureDescBase::editTexUnit(void)
{
    editSField(TexUnitFieldMask);

    return _sfTexUnit.getValue();
}

//! Get the value of the TextureDesc::_sfTexUnit field.
inline
      Int32  TextureDescBase::getTexUnit(void) const
{
    return _sfTexUnit.getValue();
}

//! Set the value of the TextureDesc::_sfTexUnit field.
inline
void TextureDescBase::setTexUnit(const Int32 value)
{
    editSField(TexUnitFieldMask);

    _sfTexUnit.setValue(value);
}
//! Get the value of the TextureDesc::_sfUVChannel field.

inline
UInt32 &TextureDescBase::editUVChannel(void)
{
    editSField(UVChannelFieldMask);

    return _sfUVChannel.getValue();
}

//! Get the value of the TextureDesc::_sfUVChannel field.
inline
      UInt32  TextureDescBase::getUVChannel(void) const
{
    return _sfUVChannel.getValue();
}

//! Set the value of the TextureDesc::_sfUVChannel field.
inline
void TextureDescBase::setUVChannel(const UInt32 value)
{
    editSField(UVChannelFieldMask);

    _sfUVChannel.setValue(value);
}
//! Get the value of the TextureDesc::_sfMappingMode field.

inline
UInt32 &TextureDescBase::editMappingMode(void)
{
    editSField(MappingModeFieldMask);

    return _sfMappingMode.getValue();
}

//! Get the value of the TextureDesc::_sfMappingMode field.
inline
      UInt32  TextureDescBase::getMappingMode(void) const
{
    return _sfMappingMode.getValue();
}

//! Set the value of the TextureDesc::_sfMappingMode field.
inline
void TextureDescBase::setMappingMode(const UInt32 value)
{
    editSField(MappingModeFieldMask);

    _sfMappingMode.setValue(value);
}
//! Get the value of the TextureDesc::_sfMapAxis field.

inline
Vec3f &TextureDescBase::editMapAxis(void)
{
    editSField(MapAxisFieldMask);

    return _sfMapAxis.getValue();
}

//! Get the value of the TextureDesc::_sfMapAxis field.
inline
const Vec3f &TextureDescBase::getMapAxis(void) const
{
    return _sfMapAxis.getValue();
}

//! Set the value of the TextureDesc::_sfMapAxis field.
inline
void TextureDescBase::setMapAxis(const Vec3f &value)
{
    editSField(MapAxisFieldMask);

    _sfMapAxis.setValue(value);
}
//! Get the value of the TextureDesc::_sfEnvironmentMapType field.

inline
UInt32 &TextureDescBase::editEnvironmentMapType(void)
{
    editSField(EnvironmentMapTypeFieldMask);

    return _sfEnvironmentMapType.getValue();
}

//! Get the value of the TextureDesc::_sfEnvironmentMapType field.
inline
      UInt32  TextureDescBase::getEnvironmentMapType(void) const
{
    return _sfEnvironmentMapType.getValue();
}

//! Set the value of the TextureDesc::_sfEnvironmentMapType field.
inline
void TextureDescBase::setEnvironmentMapType(const UInt32 value)
{
    editSField(EnvironmentMapTypeFieldMask);

    _sfEnvironmentMapType.setValue(value);
}
//! Get the value of the TextureDesc::_sfBlendFactor field.

inline
Real32 &TextureDescBase::editBlendFactor(void)
{
    editSField(BlendFactorFieldMask);

    return _sfBlendFactor.getValue();
}

//! Get the value of the TextureDesc::_sfBlendFactor field.
inline
      Real32  TextureDescBase::getBlendFactor(void) const
{
    return _sfBlendFactor.getValue();
}

//! Set the value of the TextureDesc::_sfBlendFactor field.
inline
void TextureDescBase::setBlendFactor(const Real32 value)
{
    editSField(BlendFactorFieldMask);

    _sfBlendFactor.setValue(value);
}
//! Get the value of the TextureDesc::_sfOperation field.

inline
UInt32 &TextureDescBase::editOperation(void)
{
    editSField(OperationFieldMask);

    return _sfOperation.getValue();
}

//! Get the value of the TextureDesc::_sfOperation field.
inline
      UInt32  TextureDescBase::getOperation(void) const
{
    return _sfOperation.getValue();
}

//! Set the value of the TextureDesc::_sfOperation field.
inline
void TextureDescBase::setOperation(const UInt32 value)
{
    editSField(OperationFieldMask);

    _sfOperation.setValue(value);
}
//! Get the value of the TextureDesc::_sfWrapS field.

inline
GLenum &TextureDescBase::editWrapS(void)
{
    editSField(WrapSFieldMask);

    return _sfWrapS.getValue();
}

//! Get the value of the TextureDesc::_sfWrapS field.
inline
const GLenum &TextureDescBase::getWrapS(void) const
{
    return _sfWrapS.getValue();
}

//! Set the value of the TextureDesc::_sfWrapS field.
inline
void TextureDescBase::setWrapS(const GLenum &value)
{
    editSField(WrapSFieldMask);

    _sfWrapS.setValue(value);
}
//! Get the value of the TextureDesc::_sfWrapT field.

inline
GLenum &TextureDescBase::editWrapT(void)
{
    editSField(WrapTFieldMask);

    return _sfWrapT.getValue();
}

//! Get the value of the TextureDesc::_sfWrapT field.
inline
const GLenum &TextureDescBase::getWrapT(void) const
{
    return _sfWrapT.getValue();
}

//! Set the value of the TextureDesc::_sfWrapT field.
inline
void TextureDescBase::setWrapT(const GLenum &value)
{
    editSField(WrapTFieldMask);

    _sfWrapT.setValue(value);
}
//! Get the value of the TextureDesc::_sfWrapR field.

inline
GLenum &TextureDescBase::editWrapR(void)
{
    editSField(WrapRFieldMask);

    return _sfWrapR.getValue();
}

//! Get the value of the TextureDesc::_sfWrapR field.
inline
const GLenum &TextureDescBase::getWrapR(void) const
{
    return _sfWrapR.getValue();
}

//! Set the value of the TextureDesc::_sfWrapR field.
inline
void TextureDescBase::setWrapR(const GLenum &value)
{
    editSField(WrapRFieldMask);

    _sfWrapR.setValue(value);
}
//! Get the value of the TextureDesc::_sfTextureFlags field.

inline
UInt32 &TextureDescBase::editTextureFlags(void)
{
    editSField(TextureFlagsFieldMask);

    return _sfTextureFlags.getValue();
}

//! Get the value of the TextureDesc::_sfTextureFlags field.
inline
      UInt32  TextureDescBase::getTextureFlags(void) const
{
    return _sfTextureFlags.getValue();
}

//! Set the value of the TextureDesc::_sfTextureFlags field.
inline
void TextureDescBase::setTextureFlags(const UInt32 value)
{
    editSField(TextureFlagsFieldMask);

    _sfTextureFlags.setValue(value);
}
//! Get the value of the TextureDesc::_sfMinFilter field.

inline
GLenum &TextureDescBase::editMinFilter(void)
{
    editSField(MinFilterFieldMask);

    return _sfMinFilter.getValue();
}

//! Get the value of the TextureDesc::_sfMinFilter field.
inline
const GLenum &TextureDescBase::getMinFilter(void) const
{
    return _sfMinFilter.getValue();
}

//! Set the value of the TextureDesc::_sfMinFilter field.
inline
void TextureDescBase::setMinFilter(const GLenum &value)
{
    editSField(MinFilterFieldMask);

    _sfMinFilter.setValue(value);
}
//! Get the value of the TextureDesc::_sfMagFilter field.

inline
GLenum &TextureDescBase::editMagFilter(void)
{
    editSField(MagFilterFieldMask);

    return _sfMagFilter.getValue();
}

//! Get the value of the TextureDesc::_sfMagFilter field.
inline
const GLenum &TextureDescBase::getMagFilter(void) const
{
    return _sfMagFilter.getValue();
}

//! Set the value of the TextureDesc::_sfMagFilter field.
inline
void TextureDescBase::setMagFilter(const GLenum &value)
{
    editSField(MagFilterFieldMask);

    _sfMagFilter.setValue(value);
}
//! Get the value of the TextureDesc::_sfInternalFormat field.

inline
GLenum &TextureDescBase::editInternalFormat(void)
{
    editSField(InternalFormatFieldMask);

    return _sfInternalFormat.getValue();
}

//! Get the value of the TextureDesc::_sfInternalFormat field.
inline
const GLenum &TextureDescBase::getInternalFormat(void) const
{
    return _sfInternalFormat.getValue();
}

//! Set the value of the TextureDesc::_sfInternalFormat field.
inline
void TextureDescBase::setInternalFormat(const GLenum &value)
{
    editSField(InternalFormatFieldMask);

    _sfInternalFormat.setValue(value);
}
//! Get the value of the TextureDesc::_sfExternalFormat field.

inline
GLenum &TextureDescBase::editExternalFormat(void)
{
    editSField(ExternalFormatFieldMask);

    return _sfExternalFormat.getValue();
}

//! Get the value of the TextureDesc::_sfExternalFormat field.
inline
const GLenum &TextureDescBase::getExternalFormat(void) const
{
    return _sfExternalFormat.getValue();
}

//! Set the value of the TextureDesc::_sfExternalFormat field.
inline
void TextureDescBase::setExternalFormat(const GLenum &value)
{
    editSField(ExternalFormatFieldMask);

    _sfExternalFormat.setValue(value);
}
//! Get the value of the TextureDesc::_sfAnisotropy field.

inline
Real32 &TextureDescBase::editAnisotropy(void)
{
    editSField(AnisotropyFieldMask);

    return _sfAnisotropy.getValue();
}

//! Get the value of the TextureDesc::_sfAnisotropy field.
inline
      Real32  TextureDescBase::getAnisotropy(void) const
{
    return _sfAnisotropy.getValue();
}

//! Set the value of the TextureDesc::_sfAnisotropy field.
inline
void TextureDescBase::setAnisotropy(const Real32 value)
{
    editSField(AnisotropyFieldMask);

    _sfAnisotropy.setValue(value);
}
//! Get the value of the TextureDesc::_sfMirrorFlags field.

inline
UInt32 &TextureDescBase::editMirrorFlags(void)
{
    editSField(MirrorFlagsFieldMask);

    return _sfMirrorFlags.getValue();
}

//! Get the value of the TextureDesc::_sfMirrorFlags field.
inline
      UInt32  TextureDescBase::getMirrorFlags(void) const
{
    return _sfMirrorFlags.getValue();
}

//! Set the value of the TextureDesc::_sfMirrorFlags field.
inline
void TextureDescBase::setMirrorFlags(const UInt32 value)
{
    editSField(MirrorFlagsFieldMask);

    _sfMirrorFlags.setValue(value);
}
//! Get the value of the TextureDesc::_sfScale field.

inline
Vec2f &TextureDescBase::editScale(void)
{
    editSField(ScaleFieldMask);

    return _sfScale.getValue();
}

//! Get the value of the TextureDesc::_sfScale field.
inline
const Vec2f &TextureDescBase::getScale(void) const
{
    return _sfScale.getValue();
}

//! Set the value of the TextureDesc::_sfScale field.
inline
void TextureDescBase::setScale(const Vec2f &value)
{
    editSField(ScaleFieldMask);

    _sfScale.setValue(value);
}
//! Get the value of the TextureDesc::_sfTranslate field.

inline
Vec2f &TextureDescBase::editTranslate(void)
{
    editSField(TranslateFieldMask);

    return _sfTranslate.getValue();
}

//! Get the value of the TextureDesc::_sfTranslate field.
inline
const Vec2f &TextureDescBase::getTranslate(void) const
{
    return _sfTranslate.getValue();
}

//! Set the value of the TextureDesc::_sfTranslate field.
inline
void TextureDescBase::setTranslate(const Vec2f &value)
{
    editSField(TranslateFieldMask);

    _sfTranslate.setValue(value);
}
//! Get the value of the TextureDesc::_sfRotate field.

inline
Real32 &TextureDescBase::editRotate(void)
{
    editSField(RotateFieldMask);

    return _sfRotate.getValue();
}

//! Get the value of the TextureDesc::_sfRotate field.
inline
      Real32  TextureDescBase::getRotate(void) const
{
    return _sfRotate.getValue();
}

//! Set the value of the TextureDesc::_sfRotate field.
inline
void TextureDescBase::setRotate(const Real32 value)
{
    editSField(RotateFieldMask);

    _sfRotate.setValue(value);
}
//! Get the value of the TextureDesc::_sfHasUVTransform field.

inline
bool &TextureDescBase::editHasUVTransform(void)
{
    editSField(HasUVTransformFieldMask);

    return _sfHasUVTransform.getValue();
}

//! Get the value of the TextureDesc::_sfHasUVTransform field.
inline
      bool  TextureDescBase::getHasUVTransform(void) const
{
    return _sfHasUVTransform.getValue();
}

//! Set the value of the TextureDesc::_sfHasUVTransform field.
inline
void TextureDescBase::setHasUVTransform(const bool value)
{
    editSField(HasUVTransformFieldMask);

    _sfHasUVTransform.setValue(value);
}
//! Get the value of the TextureDesc::_sfBorderColor field.

inline
Color4f &TextureDescBase::editBorderColor(void)
{
    editSField(BorderColorFieldMask);

    return _sfBorderColor.getValue();
}

//! Get the value of the TextureDesc::_sfBorderColor field.
inline
const Color4f &TextureDescBase::getBorderColor(void) const
{
    return _sfBorderColor.getValue();
}

//! Set the value of the TextureDesc::_sfBorderColor field.
inline
void TextureDescBase::setBorderColor(const Color4f &value)
{
    editSField(BorderColorFieldMask);

    _sfBorderColor.setValue(value);
}

//! Get the value of the \a index element the TextureDesc::_mfFilename field.
inline
const std::string &TextureDescBase::getFilename(const UInt32 index) const
{
    return _mfFilename[index];
}

inline
MFString           ::reference TextureDescBase::editFilename(const UInt32 index)
{
    editMField(FilenameFieldMask, _mfFilename);

    return _mfFilename[index];
}



#ifdef OSG_MT_CPTR_ASPECT
inline
void TextureDescBase::execSync (      TextureDescBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (TextureTypeFieldMask & whichField))
        _sfTextureType.syncWith(pFrom->_sfTextureType);

    if(FieldBits::NoField != (SwizzleFieldMask & whichField))
        _sfSwizzle.syncWith(pFrom->_sfSwizzle);

    if(FieldBits::NoField != (IsSRGBTextureFieldMask & whichField))
        _sfIsSRGBTexture.syncWith(pFrom->_sfIsSRGBTexture);

    if(FieldBits::NoField != (FilenameFieldMask & whichField))
        _mfFilename.syncWith(pFrom->_mfFilename,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (TexUnitFieldMask & whichField))
        _sfTexUnit.syncWith(pFrom->_sfTexUnit);

    if(FieldBits::NoField != (UVChannelFieldMask & whichField))
        _sfUVChannel.syncWith(pFrom->_sfUVChannel);

    if(FieldBits::NoField != (MappingModeFieldMask & whichField))
        _sfMappingMode.syncWith(pFrom->_sfMappingMode);

    if(FieldBits::NoField != (MapAxisFieldMask & whichField))
        _sfMapAxis.syncWith(pFrom->_sfMapAxis);

    if(FieldBits::NoField != (EnvironmentMapTypeFieldMask & whichField))
        _sfEnvironmentMapType.syncWith(pFrom->_sfEnvironmentMapType);

    if(FieldBits::NoField != (BlendFactorFieldMask & whichField))
        _sfBlendFactor.syncWith(pFrom->_sfBlendFactor);

    if(FieldBits::NoField != (OperationFieldMask & whichField))
        _sfOperation.syncWith(pFrom->_sfOperation);

    if(FieldBits::NoField != (WrapSFieldMask & whichField))
        _sfWrapS.syncWith(pFrom->_sfWrapS);

    if(FieldBits::NoField != (WrapTFieldMask & whichField))
        _sfWrapT.syncWith(pFrom->_sfWrapT);

    if(FieldBits::NoField != (WrapRFieldMask & whichField))
        _sfWrapR.syncWith(pFrom->_sfWrapR);

    if(FieldBits::NoField != (TextureFlagsFieldMask & whichField))
        _sfTextureFlags.syncWith(pFrom->_sfTextureFlags);

    if(FieldBits::NoField != (MinFilterFieldMask & whichField))
        _sfMinFilter.syncWith(pFrom->_sfMinFilter);

    if(FieldBits::NoField != (MagFilterFieldMask & whichField))
        _sfMagFilter.syncWith(pFrom->_sfMagFilter);

    if(FieldBits::NoField != (InternalFormatFieldMask & whichField))
        _sfInternalFormat.syncWith(pFrom->_sfInternalFormat);

    if(FieldBits::NoField != (ExternalFormatFieldMask & whichField))
        _sfExternalFormat.syncWith(pFrom->_sfExternalFormat);

    if(FieldBits::NoField != (AnisotropyFieldMask & whichField))
        _sfAnisotropy.syncWith(pFrom->_sfAnisotropy);

    if(FieldBits::NoField != (MirrorFlagsFieldMask & whichField))
        _sfMirrorFlags.syncWith(pFrom->_sfMirrorFlags);

    if(FieldBits::NoField != (ScaleFieldMask & whichField))
        _sfScale.syncWith(pFrom->_sfScale);

    if(FieldBits::NoField != (TranslateFieldMask & whichField))
        _sfTranslate.syncWith(pFrom->_sfTranslate);

    if(FieldBits::NoField != (RotateFieldMask & whichField))
        _sfRotate.syncWith(pFrom->_sfRotate);

    if(FieldBits::NoField != (HasUVTransformFieldMask & whichField))
        _sfHasUVTransform.syncWith(pFrom->_sfHasUVTransform);

    if(FieldBits::NoField != (BorderColorFieldMask & whichField))
        _sfBorderColor.syncWith(pFrom->_sfBorderColor);

    if(FieldBits::NoField != (TexImageFieldMask & whichField))
        _mfTexImage.syncWith(pFrom->_mfTexImage,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (ImageMapFieldMask & whichField))
        _sfImageMap.syncWith(pFrom->_sfImageMap);
}
#endif


inline
const Char8 *TextureDescBase::getClassname(void)
{
    return "TextureDesc";
}
OSG_GEN_CONTAINERPTR(TextureDesc);

OSG_END_NAMESPACE

