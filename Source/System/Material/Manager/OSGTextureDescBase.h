/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TextureDesc
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGTEXTUREDESCBASE_H_
#define _OSGTEXTUREDESCBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGSystemDef.h"

//#include "OSGBaseTypes.h"

#include "OSGFieldContainer.h" // Parent

#include "OSGSysFields.h"               // TextureType type
#include "OSGBaseFields.h"              // Swizzle type
#include "OSGVecFields.h"               // MapAxis type
#include "OSGImageFields.h"             // TexImage type
#include "OSGHashKeyToFieldContainerMapFields.h" // ImageMap type

#include "OSGTextureDescFields.h"

OSG_BEGIN_NAMESPACE


class TextureDesc;

//! \brief TextureDesc Base Class.

class OSG_SYSTEM_DLLMAPPING TextureDescBase : public FieldContainer
{
  public:

    typedef FieldContainer Inherited;
    typedef FieldContainer ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(TextureDesc);

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        TextureTypeFieldId = Inherited::NextFieldId,
        SwizzleFieldId = TextureTypeFieldId + 1,
        IsSRGBTextureFieldId = SwizzleFieldId + 1,
        FilenameFieldId = IsSRGBTextureFieldId + 1,
        TexUnitFieldId = FilenameFieldId + 1,
        UVChannelFieldId = TexUnitFieldId + 1,
        MappingModeFieldId = UVChannelFieldId + 1,
        MapAxisFieldId = MappingModeFieldId + 1,
        EnvironmentMapTypeFieldId = MapAxisFieldId + 1,
        BlendFactorFieldId = EnvironmentMapTypeFieldId + 1,
        OperationFieldId = BlendFactorFieldId + 1,
        WrapSFieldId = OperationFieldId + 1,
        WrapTFieldId = WrapSFieldId + 1,
        WrapRFieldId = WrapTFieldId + 1,
        TextureFlagsFieldId = WrapRFieldId + 1,
        MinFilterFieldId = TextureFlagsFieldId + 1,
        MagFilterFieldId = MinFilterFieldId + 1,
        InternalFormatFieldId = MagFilterFieldId + 1,
        ExternalFormatFieldId = InternalFormatFieldId + 1,
        AnisotropyFieldId = ExternalFormatFieldId + 1,
        MirrorFlagsFieldId = AnisotropyFieldId + 1,
        ScaleFieldId = MirrorFlagsFieldId + 1,
        TranslateFieldId = ScaleFieldId + 1,
        RotateFieldId = TranslateFieldId + 1,
        HasUVTransformFieldId = RotateFieldId + 1,
        BorderColorFieldId = HasUVTransformFieldId + 1,
        TexImageFieldId = BorderColorFieldId + 1,
        ImageMapFieldId = TexImageFieldId + 1,
        NextFieldId = ImageMapFieldId + 1
    };

    static const OSG::BitVector TextureTypeFieldMask =
        (TypeTraits<BitVector>::One << TextureTypeFieldId);
    static const OSG::BitVector SwizzleFieldMask =
        (TypeTraits<BitVector>::One << SwizzleFieldId);
    static const OSG::BitVector IsSRGBTextureFieldMask =
        (TypeTraits<BitVector>::One << IsSRGBTextureFieldId);
    static const OSG::BitVector FilenameFieldMask =
        (TypeTraits<BitVector>::One << FilenameFieldId);
    static const OSG::BitVector TexUnitFieldMask =
        (TypeTraits<BitVector>::One << TexUnitFieldId);
    static const OSG::BitVector UVChannelFieldMask =
        (TypeTraits<BitVector>::One << UVChannelFieldId);
    static const OSG::BitVector MappingModeFieldMask =
        (TypeTraits<BitVector>::One << MappingModeFieldId);
    static const OSG::BitVector MapAxisFieldMask =
        (TypeTraits<BitVector>::One << MapAxisFieldId);
    static const OSG::BitVector EnvironmentMapTypeFieldMask =
        (TypeTraits<BitVector>::One << EnvironmentMapTypeFieldId);
    static const OSG::BitVector BlendFactorFieldMask =
        (TypeTraits<BitVector>::One << BlendFactorFieldId);
    static const OSG::BitVector OperationFieldMask =
        (TypeTraits<BitVector>::One << OperationFieldId);
    static const OSG::BitVector WrapSFieldMask =
        (TypeTraits<BitVector>::One << WrapSFieldId);
    static const OSG::BitVector WrapTFieldMask =
        (TypeTraits<BitVector>::One << WrapTFieldId);
    static const OSG::BitVector WrapRFieldMask =
        (TypeTraits<BitVector>::One << WrapRFieldId);
    static const OSG::BitVector TextureFlagsFieldMask =
        (TypeTraits<BitVector>::One << TextureFlagsFieldId);
    static const OSG::BitVector MinFilterFieldMask =
        (TypeTraits<BitVector>::One << MinFilterFieldId);
    static const OSG::BitVector MagFilterFieldMask =
        (TypeTraits<BitVector>::One << MagFilterFieldId);
    static const OSG::BitVector InternalFormatFieldMask =
        (TypeTraits<BitVector>::One << InternalFormatFieldId);
    static const OSG::BitVector ExternalFormatFieldMask =
        (TypeTraits<BitVector>::One << ExternalFormatFieldId);
    static const OSG::BitVector AnisotropyFieldMask =
        (TypeTraits<BitVector>::One << AnisotropyFieldId);
    static const OSG::BitVector MirrorFlagsFieldMask =
        (TypeTraits<BitVector>::One << MirrorFlagsFieldId);
    static const OSG::BitVector ScaleFieldMask =
        (TypeTraits<BitVector>::One << ScaleFieldId);
    static const OSG::BitVector TranslateFieldMask =
        (TypeTraits<BitVector>::One << TranslateFieldId);
    static const OSG::BitVector RotateFieldMask =
        (TypeTraits<BitVector>::One << RotateFieldId);
    static const OSG::BitVector HasUVTransformFieldMask =
        (TypeTraits<BitVector>::One << HasUVTransformFieldId);
    static const OSG::BitVector BorderColorFieldMask =
        (TypeTraits<BitVector>::One << BorderColorFieldId);
    static const OSG::BitVector TexImageFieldMask =
        (TypeTraits<BitVector>::One << TexImageFieldId);
    static const OSG::BitVector ImageMapFieldMask =
        (TypeTraits<BitVector>::One << ImageMapFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFUInt32          SFTextureTypeType;
    typedef SFString          SFSwizzleType;
    typedef SFBool            SFIsSRGBTextureType;
    typedef MFString          MFFilenameType;
    typedef SFInt32           SFTexUnitType;
    typedef SFUInt32          SFUVChannelType;
    typedef SFUInt32          SFMappingModeType;
    typedef SFVec3f           SFMapAxisType;
    typedef SFUInt32          SFEnvironmentMapTypeType;
    typedef SFReal32          SFBlendFactorType;
    typedef SFUInt32          SFOperationType;
    typedef SFGLenum          SFWrapSType;
    typedef SFGLenum          SFWrapTType;
    typedef SFGLenum          SFWrapRType;
    typedef SFUInt32          SFTextureFlagsType;
    typedef SFGLenum          SFMinFilterType;
    typedef SFGLenum          SFMagFilterType;
    typedef SFGLenum          SFInternalFormatType;
    typedef SFGLenum          SFExternalFormatType;
    typedef SFReal32          SFAnisotropyType;
    typedef SFUInt32          SFMirrorFlagsType;
    typedef SFVec2f           SFScaleType;
    typedef SFVec2f           SFTranslateType;
    typedef SFReal32          SFRotateType;
    typedef SFBool            SFHasUVTransformType;
    typedef SFColor4f         SFBorderColorType;
    typedef MFUnrecImagePtr   MFTexImageType;
    typedef SFUnrecHashKeyToFieldContainerMapPtr SFImageMapType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  SFUInt32            *editSFTextureType    (void);
            const SFUInt32            *getSFTextureType     (void) const;

                  SFString            *editSFSwizzle        (void);
            const SFString            *getSFSwizzle         (void) const;

                  SFBool              *editSFIsSRGBTexture  (void);
            const SFBool              *getSFIsSRGBTexture   (void) const;

                  MFString            *editMFFilename       (void);
            const MFString            *getMFFilename        (void) const;

                  SFInt32             *editSFTexUnit        (void);
            const SFInt32             *getSFTexUnit         (void) const;

                  SFUInt32            *editSFUVChannel      (void);
            const SFUInt32            *getSFUVChannel       (void) const;

                  SFUInt32            *editSFMappingMode    (void);
            const SFUInt32            *getSFMappingMode     (void) const;

                  SFVec3f             *editSFMapAxis        (void);
            const SFVec3f             *getSFMapAxis         (void) const;

                  SFUInt32            *editSFEnvironmentMapType(void);
            const SFUInt32            *getSFEnvironmentMapType (void) const;

                  SFReal32            *editSFBlendFactor    (void);
            const SFReal32            *getSFBlendFactor     (void) const;

                  SFUInt32            *editSFOperation      (void);
            const SFUInt32            *getSFOperation       (void) const;

                  SFGLenum            *editSFWrapS          (void);
            const SFGLenum            *getSFWrapS           (void) const;

                  SFGLenum            *editSFWrapT          (void);
            const SFGLenum            *getSFWrapT           (void) const;

                  SFGLenum            *editSFWrapR          (void);
            const SFGLenum            *getSFWrapR           (void) const;

                  SFUInt32            *editSFTextureFlags   (void);
            const SFUInt32            *getSFTextureFlags    (void) const;

                  SFGLenum            *editSFMinFilter      (void);
            const SFGLenum            *getSFMinFilter       (void) const;

                  SFGLenum            *editSFMagFilter      (void);
            const SFGLenum            *getSFMagFilter       (void) const;

                  SFGLenum            *editSFInternalFormat (void);
            const SFGLenum            *getSFInternalFormat  (void) const;

                  SFGLenum            *editSFExternalFormat (void);
            const SFGLenum            *getSFExternalFormat  (void) const;

                  SFReal32            *editSFAnisotropy     (void);
            const SFReal32            *getSFAnisotropy      (void) const;

                  SFUInt32            *editSFMirrorFlags    (void);
            const SFUInt32            *getSFMirrorFlags     (void) const;

                  SFVec2f             *editSFScale          (void);
            const SFVec2f             *getSFScale           (void) const;

                  SFVec2f             *editSFTranslate      (void);
            const SFVec2f             *getSFTranslate       (void) const;

                  SFReal32            *editSFRotate         (void);
            const SFReal32            *getSFRotate          (void) const;

                  SFBool              *editSFHasUVTransform (void);
            const SFBool              *getSFHasUVTransform  (void) const;

                  SFColor4f           *editSFBorderColor    (void);
            const SFColor4f           *getSFBorderColor     (void) const;
            const MFUnrecImagePtr     *getMFTexImage       (void) const;
                  MFUnrecImagePtr     *editMFTexImage       (void);
            const SFUnrecHashKeyToFieldContainerMapPtr *getSFImageMap       (void) const;
                  SFUnrecHashKeyToFieldContainerMapPtr *editSFImageMap       (void);


                  UInt32              &editTextureType    (void);
                  UInt32               getTextureType     (void) const;

                  std::string         &editSwizzle        (void);
            const std::string         &getSwizzle         (void) const;

                  bool                &editIsSRGBTexture  (void);
                  bool                 getIsSRGBTexture   (void) const;

            MFString           ::reference       editFilename       (const UInt32 index);
            const std::string         &getFilename        (const UInt32 index) const;

                  Int32               &editTexUnit        (void);
                  Int32                getTexUnit         (void) const;

                  UInt32              &editUVChannel      (void);
                  UInt32               getUVChannel       (void) const;

                  UInt32              &editMappingMode    (void);
                  UInt32               getMappingMode     (void) const;

                  Vec3f               &editMapAxis        (void);
            const Vec3f               &getMapAxis         (void) const;

                  UInt32              &editEnvironmentMapType(void);
                  UInt32               getEnvironmentMapType (void) const;

                  Real32              &editBlendFactor    (void);
                  Real32               getBlendFactor     (void) const;

                  UInt32              &editOperation      (void);
                  UInt32               getOperation       (void) const;

                  GLenum              &editWrapS          (void);
            const GLenum              &getWrapS           (void) const;

                  GLenum              &editWrapT          (void);
            const GLenum              &getWrapT           (void) const;

                  GLenum              &editWrapR          (void);
            const GLenum              &getWrapR           (void) const;

                  UInt32              &editTextureFlags   (void);
                  UInt32               getTextureFlags    (void) const;

                  GLenum              &editMinFilter      (void);
            const GLenum              &getMinFilter       (void) const;

                  GLenum              &editMagFilter      (void);
            const GLenum              &getMagFilter       (void) const;

                  GLenum              &editInternalFormat (void);
            const GLenum              &getInternalFormat  (void) const;

                  GLenum              &editExternalFormat (void);
            const GLenum              &getExternalFormat  (void) const;

                  Real32              &editAnisotropy     (void);
                  Real32               getAnisotropy      (void) const;

                  UInt32              &editMirrorFlags    (void);
                  UInt32               getMirrorFlags     (void) const;

                  Vec2f               &editScale          (void);
            const Vec2f               &getScale           (void) const;

                  Vec2f               &editTranslate      (void);
            const Vec2f               &getTranslate       (void) const;

                  Real32              &editRotate         (void);
                  Real32               getRotate          (void) const;

                  bool                &editHasUVTransform (void);
                  bool                 getHasUVTransform  (void) const;

                  Color4f             &editBorderColor    (void);
            const Color4f             &getBorderColor     (void) const;

                  Image * getTexImage       (const UInt32 index) const;

                  HashKeyToFieldContainerMap * getImageMap       (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setTextureType    (const UInt32 value);
            void setSwizzle        (const std::string &value);
            void setIsSRGBTexture  (const bool value);
            void setTexUnit        (const Int32 value);
            void setUVChannel      (const UInt32 value);
            void setMappingMode    (const UInt32 value);
            void setMapAxis        (const Vec3f &value);
            void setEnvironmentMapType(const UInt32 value);
            void setBlendFactor    (const Real32 value);
            void setOperation      (const UInt32 value);
            void setWrapS          (const GLenum &value);
            void setWrapT          (const GLenum &value);
            void setWrapR          (const GLenum &value);
            void setTextureFlags   (const UInt32 value);
            void setMinFilter      (const GLenum &value);
            void setMagFilter      (const GLenum &value);
            void setInternalFormat (const GLenum &value);
            void setExternalFormat (const GLenum &value);
            void setAnisotropy     (const Real32 value);
            void setMirrorFlags    (const UInt32 value);
            void setScale          (const Vec2f &value);
            void setTranslate      (const Vec2f &value);
            void setRotate         (const Real32 value);
            void setHasUVTransform (const bool value);
            void setBorderColor    (const Color4f &value);
            void setImageMap       (HashKeyToFieldContainerMap * const value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    void pushToTexImage            (Image * const value   );
    void assignTexImage           (const MFUnrecImagePtr   &value);
    void removeFromTexImage (UInt32               uiIndex );
    void removeObjFromTexImage(Image * const value   );
    void clearTexImage              (void                         );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual SizeT  getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  TextureDescTransitPtr  create          (void);
    static  TextureDesc           *createEmpty     (void);

    static  TextureDescTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  TextureDesc            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  TextureDescTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFUInt32          _sfTextureType;
    SFString          _sfSwizzle;
    SFBool            _sfIsSRGBTexture;
    MFString          _mfFilename;
    SFInt32           _sfTexUnit;
    SFUInt32          _sfUVChannel;
    SFUInt32          _sfMappingMode;
    SFVec3f           _sfMapAxis;
    SFUInt32          _sfEnvironmentMapType;
    SFReal32          _sfBlendFactor;
    SFUInt32          _sfOperation;
    SFGLenum          _sfWrapS;
    SFGLenum          _sfWrapT;
    SFGLenum          _sfWrapR;
    SFUInt32          _sfTextureFlags;
    SFGLenum          _sfMinFilter;
    SFGLenum          _sfMagFilter;
    SFGLenum          _sfInternalFormat;
    SFGLenum          _sfExternalFormat;
    SFReal32          _sfAnisotropy;
    SFUInt32          _sfMirrorFlags;
    SFVec2f           _sfScale;
    SFVec2f           _sfTranslate;
    SFReal32          _sfRotate;
    SFBool            _sfHasUVTransform;
    SFColor4f         _sfBorderColor;
    MFUnrecImagePtr   _mfTexImage;
    SFUnrecHashKeyToFieldContainerMapPtr _sfImageMap;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    TextureDescBase(void);
    TextureDescBase(const TextureDescBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~TextureDescBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const TextureDesc *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

     GetFieldHandlePtr  getHandleTextureType     (void) const;
     EditFieldHandlePtr editHandleTextureType    (void);
     GetFieldHandlePtr  getHandleSwizzle         (void) const;
     EditFieldHandlePtr editHandleSwizzle        (void);
     GetFieldHandlePtr  getHandleIsSRGBTexture   (void) const;
     EditFieldHandlePtr editHandleIsSRGBTexture  (void);
     GetFieldHandlePtr  getHandleFilename        (void) const;
     EditFieldHandlePtr editHandleFilename       (void);
     GetFieldHandlePtr  getHandleTexUnit         (void) const;
     EditFieldHandlePtr editHandleTexUnit        (void);
     GetFieldHandlePtr  getHandleUVChannel       (void) const;
     EditFieldHandlePtr editHandleUVChannel      (void);
     GetFieldHandlePtr  getHandleMappingMode     (void) const;
     EditFieldHandlePtr editHandleMappingMode    (void);
     GetFieldHandlePtr  getHandleMapAxis         (void) const;
     EditFieldHandlePtr editHandleMapAxis        (void);
     GetFieldHandlePtr  getHandleEnvironmentMapType (void) const;
     EditFieldHandlePtr editHandleEnvironmentMapType(void);
     GetFieldHandlePtr  getHandleBlendFactor     (void) const;
     EditFieldHandlePtr editHandleBlendFactor    (void);
     GetFieldHandlePtr  getHandleOperation       (void) const;
     EditFieldHandlePtr editHandleOperation      (void);
     GetFieldHandlePtr  getHandleWrapS           (void) const;
     EditFieldHandlePtr editHandleWrapS          (void);
     GetFieldHandlePtr  getHandleWrapT           (void) const;
     EditFieldHandlePtr editHandleWrapT          (void);
     GetFieldHandlePtr  getHandleWrapR           (void) const;
     EditFieldHandlePtr editHandleWrapR          (void);
     GetFieldHandlePtr  getHandleTextureFlags    (void) const;
     EditFieldHandlePtr editHandleTextureFlags   (void);
     GetFieldHandlePtr  getHandleMinFilter       (void) const;
     EditFieldHandlePtr editHandleMinFilter      (void);
     GetFieldHandlePtr  getHandleMagFilter       (void) const;
     EditFieldHandlePtr editHandleMagFilter      (void);
     GetFieldHandlePtr  getHandleInternalFormat  (void) const;
     EditFieldHandlePtr editHandleInternalFormat (void);
     GetFieldHandlePtr  getHandleExternalFormat  (void) const;
     EditFieldHandlePtr editHandleExternalFormat (void);
     GetFieldHandlePtr  getHandleAnisotropy      (void) const;
     EditFieldHandlePtr editHandleAnisotropy     (void);
     GetFieldHandlePtr  getHandleMirrorFlags     (void) const;
     EditFieldHandlePtr editHandleMirrorFlags    (void);
     GetFieldHandlePtr  getHandleScale           (void) const;
     EditFieldHandlePtr editHandleScale          (void);
     GetFieldHandlePtr  getHandleTranslate       (void) const;
     EditFieldHandlePtr editHandleTranslate      (void);
     GetFieldHandlePtr  getHandleRotate          (void) const;
     EditFieldHandlePtr editHandleRotate         (void);
     GetFieldHandlePtr  getHandleHasUVTransform  (void) const;
     EditFieldHandlePtr editHandleHasUVTransform (void);
     GetFieldHandlePtr  getHandleBorderColor     (void) const;
     EditFieldHandlePtr editHandleBorderColor    (void);
     GetFieldHandlePtr  getHandleTexImage        (void) const;
     EditFieldHandlePtr editHandleTexImage       (void);
     GetFieldHandlePtr  getHandleImageMap        (void) const;
     EditFieldHandlePtr editHandleImageMap       (void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      TextureDescBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const TextureDescBase &source);
};

typedef TextureDescBase *TextureDescBaseP;

OSG_END_NAMESPACE

#endif /* _OSGTEXTUREDESCBASE_H_ */
