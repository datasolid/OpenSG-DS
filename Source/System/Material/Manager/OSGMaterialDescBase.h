/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class MaterialDesc
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGMATERIALDESCBASE_H_
#define _OSGMATERIALDESCBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGSystemDef.h"

//#include "OSGBaseTypes.h"

#include "OSGFieldContainer.h" // Parent

#include "OSGBaseFields.h"              // Name type
#include "OSGSysFields.h"               // DescHash type
#include "OSGTextureDescFields.h"       // TextureDesc type

#include "OSGMaterialDescFields.h"

OSG_BEGIN_NAMESPACE


class MaterialDesc;

//! \brief MaterialDesc Base Class.

class OSG_SYSTEM_DLLMAPPING MaterialDescBase : public FieldContainer
{
  public:

    typedef FieldContainer Inherited;
    typedef FieldContainer ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(MaterialDesc);

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        NameFieldId = Inherited::NextFieldId,
        DescHashFieldId = NameFieldId + 1,
        ModeFlagsFieldId = DescHashFieldId + 1,
        NumUVChannelsFieldId = ModeFlagsFieldId + 1,
        UVDimensionFieldId = NumUVChannelsFieldId + 1,
        NumColorChannelsFieldId = UVDimensionFieldId + 1,
        ShadingModelFieldId = NumColorChannelsFieldId + 1,
        OverrideShadingModelFieldId = ShadingModelFieldId + 1,
        BlendModeFieldId = OverrideShadingModelFieldId + 1,
        EmissiveFieldId = BlendModeFieldId + 1,
        AlbedoFieldId = EmissiveFieldId + 1,
        SpecularFieldId = AlbedoFieldId + 1,
        TransparentFieldId = SpecularFieldId + 1,
        ReflectiveFieldId = TransparentFieldId + 1,
        SpecularStrengthFieldId = ReflectiveFieldId + 1,
        EmissiveStrengthFieldId = SpecularStrengthFieldId + 1,
        OpacityFieldId = EmissiveStrengthFieldId + 1,
        OpacityCutOffFieldId = OpacityFieldId + 1,
        OpacityModeFieldId = OpacityCutOffFieldId + 1,
        ReflectivityFieldId = OpacityModeFieldId + 1,
        ReflectanceFieldId = ReflectivityFieldId + 1,
        BumpScalingFieldId = ReflectanceFieldId + 1,
        AnisotropyFieldId = BumpScalingFieldId + 1,
        RoughnessFieldId = AnisotropyFieldId + 1,
        MetalnessFieldId = RoughnessFieldId + 1,
        ClearCoatStrengthFieldId = MetalnessFieldId + 1,
        ClearCoatRoughnessFieldId = ClearCoatStrengthFieldId + 1,
        SheenColorFieldId = ClearCoatRoughnessFieldId + 1,
        SubSurfaceColorFieldId = SheenColorFieldId + 1,
        ToonLevelsFieldId = SubSurfaceColorFieldId + 1,
        GoochCoolFieldId = ToonLevelsFieldId + 1,
        GoochWarmFieldId = GoochCoolFieldId + 1,
        GoochMixinFieldId = GoochWarmFieldId + 1,
        GoochCoolMixinFieldId = GoochMixinFieldId + 1,
        GoochWarmMixinFieldId = GoochCoolMixinFieldId + 1,
        CullFaceFieldId = GoochWarmMixinFieldId + 1,
        FrontFaceFieldId = CullFaceFieldId + 1,
        FrontModeFieldId = FrontFaceFieldId + 1,
        BackModeFieldId = FrontModeFieldId + 1,
        OffsetFactorFieldId = BackModeFieldId + 1,
        OffsetBiasFieldId = OffsetFactorFieldId + 1,
        TextureDescFieldId = OffsetBiasFieldId + 1,
        ExcludeHashingMaskFieldId = TextureDescFieldId + 1,
        NextFieldId = ExcludeHashingMaskFieldId + 1
    };

    static const OSG::BitVector NameFieldMask =
        (TypeTraits<BitVector>::One << NameFieldId);
    static const OSG::BitVector DescHashFieldMask =
        (TypeTraits<BitVector>::One << DescHashFieldId);
    static const OSG::BitVector ModeFlagsFieldMask =
        (TypeTraits<BitVector>::One << ModeFlagsFieldId);
    static const OSG::BitVector NumUVChannelsFieldMask =
        (TypeTraits<BitVector>::One << NumUVChannelsFieldId);
    static const OSG::BitVector UVDimensionFieldMask =
        (TypeTraits<BitVector>::One << UVDimensionFieldId);
    static const OSG::BitVector NumColorChannelsFieldMask =
        (TypeTraits<BitVector>::One << NumColorChannelsFieldId);
    static const OSG::BitVector ShadingModelFieldMask =
        (TypeTraits<BitVector>::One << ShadingModelFieldId);
    static const OSG::BitVector OverrideShadingModelFieldMask =
        (TypeTraits<BitVector>::One << OverrideShadingModelFieldId);
    static const OSG::BitVector BlendModeFieldMask =
        (TypeTraits<BitVector>::One << BlendModeFieldId);
    static const OSG::BitVector EmissiveFieldMask =
        (TypeTraits<BitVector>::One << EmissiveFieldId);
    static const OSG::BitVector AlbedoFieldMask =
        (TypeTraits<BitVector>::One << AlbedoFieldId);
    static const OSG::BitVector SpecularFieldMask =
        (TypeTraits<BitVector>::One << SpecularFieldId);
    static const OSG::BitVector TransparentFieldMask =
        (TypeTraits<BitVector>::One << TransparentFieldId);
    static const OSG::BitVector ReflectiveFieldMask =
        (TypeTraits<BitVector>::One << ReflectiveFieldId);
    static const OSG::BitVector SpecularStrengthFieldMask =
        (TypeTraits<BitVector>::One << SpecularStrengthFieldId);
    static const OSG::BitVector EmissiveStrengthFieldMask =
        (TypeTraits<BitVector>::One << EmissiveStrengthFieldId);
    static const OSG::BitVector OpacityFieldMask =
        (TypeTraits<BitVector>::One << OpacityFieldId);
    static const OSG::BitVector OpacityCutOffFieldMask =
        (TypeTraits<BitVector>::One << OpacityCutOffFieldId);
    static const OSG::BitVector OpacityModeFieldMask =
        (TypeTraits<BitVector>::One << OpacityModeFieldId);
    static const OSG::BitVector ReflectivityFieldMask =
        (TypeTraits<BitVector>::One << ReflectivityFieldId);
    static const OSG::BitVector ReflectanceFieldMask =
        (TypeTraits<BitVector>::One << ReflectanceFieldId);
    static const OSG::BitVector BumpScalingFieldMask =
        (TypeTraits<BitVector>::One << BumpScalingFieldId);
    static const OSG::BitVector AnisotropyFieldMask =
        (TypeTraits<BitVector>::One << AnisotropyFieldId);
    static const OSG::BitVector RoughnessFieldMask =
        (TypeTraits<BitVector>::One << RoughnessFieldId);
    static const OSG::BitVector MetalnessFieldMask =
        (TypeTraits<BitVector>::One << MetalnessFieldId);
    static const OSG::BitVector ClearCoatStrengthFieldMask =
        (TypeTraits<BitVector>::One << ClearCoatStrengthFieldId);
    static const OSG::BitVector ClearCoatRoughnessFieldMask =
        (TypeTraits<BitVector>::One << ClearCoatRoughnessFieldId);
    static const OSG::BitVector SheenColorFieldMask =
        (TypeTraits<BitVector>::One << SheenColorFieldId);
    static const OSG::BitVector SubSurfaceColorFieldMask =
        (TypeTraits<BitVector>::One << SubSurfaceColorFieldId);
    static const OSG::BitVector ToonLevelsFieldMask =
        (TypeTraits<BitVector>::One << ToonLevelsFieldId);
    static const OSG::BitVector GoochCoolFieldMask =
        (TypeTraits<BitVector>::One << GoochCoolFieldId);
    static const OSG::BitVector GoochWarmFieldMask =
        (TypeTraits<BitVector>::One << GoochWarmFieldId);
    static const OSG::BitVector GoochMixinFieldMask =
        (TypeTraits<BitVector>::One << GoochMixinFieldId);
    static const OSG::BitVector GoochCoolMixinFieldMask =
        (TypeTraits<BitVector>::One << GoochCoolMixinFieldId);
    static const OSG::BitVector GoochWarmMixinFieldMask =
        (TypeTraits<BitVector>::One << GoochWarmMixinFieldId);
    static const OSG::BitVector CullFaceFieldMask =
        (TypeTraits<BitVector>::One << CullFaceFieldId);
    static const OSG::BitVector FrontFaceFieldMask =
        (TypeTraits<BitVector>::One << FrontFaceFieldId);
    static const OSG::BitVector FrontModeFieldMask =
        (TypeTraits<BitVector>::One << FrontModeFieldId);
    static const OSG::BitVector BackModeFieldMask =
        (TypeTraits<BitVector>::One << BackModeFieldId);
    static const OSG::BitVector OffsetFactorFieldMask =
        (TypeTraits<BitVector>::One << OffsetFactorFieldId);
    static const OSG::BitVector OffsetBiasFieldMask =
        (TypeTraits<BitVector>::One << OffsetBiasFieldId);
    static const OSG::BitVector TextureDescFieldMask =
        (TypeTraits<BitVector>::One << TextureDescFieldId);
    static const OSG::BitVector ExcludeHashingMaskFieldMask =
        (TypeTraits<BitVector>::One << ExcludeHashingMaskFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFString          SFNameType;
    typedef SFUInt64          SFDescHashType;
    typedef SFUInt32          SFModeFlagsType;
    typedef SFUInt32          SFNumUVChannelsType;
    typedef MFUInt8           MFUVDimensionType;
    typedef SFUInt32          SFNumColorChannelsType;
    typedef SFUInt32          SFShadingModelType;
    typedef SFUInt32          SFOverrideShadingModelType;
    typedef SFUInt32          SFBlendModeType;
    typedef SFColor3f         SFEmissiveType;
    typedef SFColor3f         SFAlbedoType;
    typedef SFColor3f         SFSpecularType;
    typedef SFColor3f         SFTransparentType;
    typedef SFColor3f         SFReflectiveType;
    typedef SFReal32          SFSpecularStrengthType;
    typedef SFReal32          SFEmissiveStrengthType;
    typedef SFReal32          SFOpacityType;
    typedef SFReal32          SFOpacityCutOffType;
    typedef SFUInt32          SFOpacityModeType;
    typedef SFReal32          SFReflectivityType;
    typedef SFReal32          SFReflectanceType;
    typedef SFReal32          SFBumpScalingType;
    typedef SFReal32          SFAnisotropyType;
    typedef SFReal32          SFRoughnessType;
    typedef SFReal32          SFMetalnessType;
    typedef SFReal32          SFClearCoatStrengthType;
    typedef SFReal32          SFClearCoatRoughnessType;
    typedef SFColor3f         SFSheenColorType;
    typedef SFColor3f         SFSubSurfaceColorType;
    typedef SFInt32           SFToonLevelsType;
    typedef SFColor3f         SFGoochCoolType;
    typedef SFColor3f         SFGoochWarmType;
    typedef SFReal32          SFGoochMixinType;
    typedef SFReal32          SFGoochCoolMixinType;
    typedef SFReal32          SFGoochWarmMixinType;
    typedef SFGLenum          SFCullFaceType;
    typedef SFGLenum          SFFrontFaceType;
    typedef SFGLenum          SFFrontModeType;
    typedef SFGLenum          SFBackModeType;
    typedef SFReal32          SFOffsetFactorType;
    typedef SFReal32          SFOffsetBiasType;
    typedef MFUnrecTextureDescPtr MFTextureDescType;
    typedef SFBitVector       SFExcludeHashingMaskType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  SFString            *editSFName           (void);
            const SFString            *getSFName            (void) const;

                  SFUInt64            *editSFDescHash       (void);
            const SFUInt64            *getSFDescHash        (void) const;

                  SFUInt32            *editSFNumUVChannels  (void);
            const SFUInt32            *getSFNumUVChannels   (void) const;

                  MFUInt8             *editMFUVDimension    (void);
            const MFUInt8             *getMFUVDimension     (void) const;

                  SFUInt32            *editSFNumColorChannels(void);
            const SFUInt32            *getSFNumColorChannels (void) const;

                  SFUInt32            *editSFShadingModel   (void);
            const SFUInt32            *getSFShadingModel    (void) const;

                  SFUInt32            *editSFOverrideShadingModel(void);
            const SFUInt32            *getSFOverrideShadingModel (void) const;

                  SFUInt32            *editSFBlendMode      (void);
            const SFUInt32            *getSFBlendMode       (void) const;

                  SFColor3f           *editSFEmissive       (void);
            const SFColor3f           *getSFEmissive        (void) const;

                  SFColor3f           *editSFAlbedo         (void);
            const SFColor3f           *getSFAlbedo          (void) const;

                  SFColor3f           *editSFSpecular       (void);
            const SFColor3f           *getSFSpecular        (void) const;

                  SFColor3f           *editSFTransparent    (void);
            const SFColor3f           *getSFTransparent     (void) const;

                  SFColor3f           *editSFReflective     (void);
            const SFColor3f           *getSFReflective      (void) const;

                  SFReal32            *editSFSpecularStrength(void);
            const SFReal32            *getSFSpecularStrength (void) const;

                  SFReal32            *editSFEmissiveStrength(void);
            const SFReal32            *getSFEmissiveStrength (void) const;

                  SFReal32            *editSFOpacity        (void);
            const SFReal32            *getSFOpacity         (void) const;

                  SFReal32            *editSFOpacityCutOff  (void);
            const SFReal32            *getSFOpacityCutOff   (void) const;

                  SFUInt32            *editSFOpacityMode    (void);
            const SFUInt32            *getSFOpacityMode     (void) const;

                  SFReal32            *editSFReflectivity   (void);
            const SFReal32            *getSFReflectivity    (void) const;

                  SFReal32            *editSFReflectance    (void);
            const SFReal32            *getSFReflectance     (void) const;

                  SFReal32            *editSFBumpScaling    (void);
            const SFReal32            *getSFBumpScaling     (void) const;

                  SFReal32            *editSFAnisotropy     (void);
            const SFReal32            *getSFAnisotropy      (void) const;

                  SFReal32            *editSFRoughness      (void);
            const SFReal32            *getSFRoughness       (void) const;

                  SFReal32            *editSFMetalness      (void);
            const SFReal32            *getSFMetalness       (void) const;

                  SFReal32            *editSFClearCoatStrength(void);
            const SFReal32            *getSFClearCoatStrength (void) const;

                  SFReal32            *editSFClearCoatRoughness(void);
            const SFReal32            *getSFClearCoatRoughness (void) const;

                  SFColor3f           *editSFSheenColor     (void);
            const SFColor3f           *getSFSheenColor      (void) const;

                  SFColor3f           *editSFSubSurfaceColor(void);
            const SFColor3f           *getSFSubSurfaceColor (void) const;

                  SFInt32             *editSFToonLevels     (void);
            const SFInt32             *getSFToonLevels      (void) const;

                  SFColor3f           *editSFGoochCool      (void);
            const SFColor3f           *getSFGoochCool       (void) const;

                  SFColor3f           *editSFGoochWarm      (void);
            const SFColor3f           *getSFGoochWarm       (void) const;

                  SFReal32            *editSFGoochMixin     (void);
            const SFReal32            *getSFGoochMixin      (void) const;

                  SFReal32            *editSFGoochCoolMixin (void);
            const SFReal32            *getSFGoochCoolMixin  (void) const;

                  SFReal32            *editSFGoochWarmMixin (void);
            const SFReal32            *getSFGoochWarmMixin  (void) const;

                  SFGLenum            *editSFCullFace       (void);
            const SFGLenum            *getSFCullFace        (void) const;

                  SFGLenum            *editSFFrontFace      (void);
            const SFGLenum            *getSFFrontFace       (void) const;

                  SFGLenum            *editSFFrontMode      (void);
            const SFGLenum            *getSFFrontMode       (void) const;

                  SFGLenum            *editSFBackMode       (void);
            const SFGLenum            *getSFBackMode        (void) const;

                  SFReal32            *editSFOffsetFactor   (void);
            const SFReal32            *getSFOffsetFactor    (void) const;

                  SFReal32            *editSFOffsetBias     (void);
            const SFReal32            *getSFOffsetBias      (void) const;
            const MFUnrecTextureDescPtr *getMFTextureDesc    (void) const;
                  MFUnrecTextureDescPtr *editMFTextureDesc    (void);

                  SFBitVector         *editSFExcludeHashingMask(void);
            const SFBitVector         *getSFExcludeHashingMask (void) const;


                  std::string         &editName           (void);
            const std::string         &getName            (void) const;

                  UInt64              &editDescHash       (void);
                  UInt64               getDescHash        (void) const;

                  UInt32              &editNumUVChannels  (void);
                  UInt32               getNumUVChannels   (void) const;

            MFUInt8            ::reference       editUVDimension    (const UInt32 index);
                  UInt8                getUVDimension     (const UInt32 index) const;

                  UInt32              &editNumColorChannels(void);
                  UInt32               getNumColorChannels (void) const;

                  UInt32              &editShadingModel   (void);
                  UInt32               getShadingModel    (void) const;

                  UInt32              &editOverrideShadingModel(void);
                  UInt32               getOverrideShadingModel (void) const;

                  UInt32              &editBlendMode      (void);
                  UInt32               getBlendMode       (void) const;

                  Color3f             &editEmissive       (void);
            const Color3f             &getEmissive        (void) const;

                  Color3f             &editAlbedo         (void);
            const Color3f             &getAlbedo          (void) const;

                  Color3f             &editSpecular       (void);
            const Color3f             &getSpecular        (void) const;

                  Color3f             &editTransparent    (void);
            const Color3f             &getTransparent     (void) const;

                  Color3f             &editReflective     (void);
            const Color3f             &getReflective      (void) const;

                  Real32              &editSpecularStrength(void);
                  Real32               getSpecularStrength (void) const;

                  Real32              &editEmissiveStrength(void);
                  Real32               getEmissiveStrength (void) const;

                  Real32              &editOpacity        (void);
                  Real32               getOpacity         (void) const;

                  Real32              &editOpacityCutOff  (void);
                  Real32               getOpacityCutOff   (void) const;

                  UInt32              &editOpacityMode    (void);
                  UInt32               getOpacityMode     (void) const;

                  Real32              &editReflectivity   (void);
                  Real32               getReflectivity    (void) const;

                  Real32              &editReflectance    (void);
                  Real32               getReflectance     (void) const;

                  Real32              &editBumpScaling    (void);
                  Real32               getBumpScaling     (void) const;

                  Real32              &editAnisotropy     (void);
                  Real32               getAnisotropy      (void) const;

                  Real32              &editRoughness      (void);
                  Real32               getRoughness       (void) const;

                  Real32              &editMetalness      (void);
                  Real32               getMetalness       (void) const;

                  Real32              &editClearCoatStrength(void);
                  Real32               getClearCoatStrength (void) const;

                  Real32              &editClearCoatRoughness(void);
                  Real32               getClearCoatRoughness (void) const;

                  Color3f             &editSheenColor     (void);
            const Color3f             &getSheenColor      (void) const;

                  Color3f             &editSubSurfaceColor(void);
            const Color3f             &getSubSurfaceColor (void) const;

                  Int32               &editToonLevels     (void);
                  Int32                getToonLevels      (void) const;

                  Color3f             &editGoochCool      (void);
            const Color3f             &getGoochCool       (void) const;

                  Color3f             &editGoochWarm      (void);
            const Color3f             &getGoochWarm       (void) const;

                  Real32              &editGoochMixin     (void);
                  Real32               getGoochMixin      (void) const;

                  Real32              &editGoochCoolMixin (void);
                  Real32               getGoochCoolMixin  (void) const;

                  Real32              &editGoochWarmMixin (void);
                  Real32               getGoochWarmMixin  (void) const;

                  GLenum              &editCullFace       (void);
            const GLenum              &getCullFace        (void) const;

                  GLenum              &editFrontFace      (void);
            const GLenum              &getFrontFace       (void) const;

                  GLenum              &editFrontMode      (void);
            const GLenum              &getFrontMode       (void) const;

                  GLenum              &editBackMode       (void);
            const GLenum              &getBackMode        (void) const;

                  Real32              &editOffsetFactor   (void);
                  Real32               getOffsetFactor    (void) const;

                  Real32              &editOffsetBias     (void);
                  Real32               getOffsetBias      (void) const;

                  TextureDesc * getTextureDesc    (const UInt32 index) const;

                  BitVector           &editExcludeHashingMask(void);
            const BitVector           &getExcludeHashingMask (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setName           (const std::string &value);
            void setDescHash       (const UInt64 value);
            void setNumUVChannels  (const UInt32 value);
            void setNumColorChannels(const UInt32 value);
            void setShadingModel   (const UInt32 value);
            void setOverrideShadingModel(const UInt32 value);
            void setBlendMode      (const UInt32 value);
            void setEmissive       (const Color3f &value);
            void setAlbedo         (const Color3f &value);
            void setSpecular       (const Color3f &value);
            void setTransparent    (const Color3f &value);
            void setReflective     (const Color3f &value);
            void setSpecularStrength(const Real32 value);
            void setEmissiveStrength(const Real32 value);
            void setOpacity        (const Real32 value);
            void setOpacityCutOff  (const Real32 value);
            void setOpacityMode    (const UInt32 value);
            void setReflectivity   (const Real32 value);
            void setReflectance    (const Real32 value);
            void setBumpScaling    (const Real32 value);
            void setAnisotropy     (const Real32 value);
            void setRoughness      (const Real32 value);
            void setMetalness      (const Real32 value);
            void setClearCoatStrength(const Real32 value);
            void setClearCoatRoughness(const Real32 value);
            void setSheenColor     (const Color3f &value);
            void setSubSurfaceColor(const Color3f &value);
            void setToonLevels     (const Int32 value);
            void setGoochCool      (const Color3f &value);
            void setGoochWarm      (const Color3f &value);
            void setGoochMixin     (const Real32 value);
            void setGoochCoolMixin (const Real32 value);
            void setGoochWarmMixin (const Real32 value);
            void setCullFace       (const GLenum &value);
            void setFrontFace      (const GLenum &value);
            void setFrontMode      (const GLenum &value);
            void setBackMode       (const GLenum &value);
            void setOffsetFactor   (const Real32 value);
            void setOffsetBias     (const Real32 value);
            void setExcludeHashingMask(const BitVector &value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    void pushToTextureDesc           (TextureDesc * const value   );
    void assignTextureDesc          (const MFUnrecTextureDescPtr &value);
    void removeFromTextureDesc (UInt32               uiIndex );
    void removeObjFromTextureDesc(TextureDesc * const value   );
    void clearTextureDesc            (void                         );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual SizeT  getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  MaterialDescTransitPtr  create          (void);
    static  MaterialDesc           *createEmpty     (void);

    static  MaterialDescTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  MaterialDesc            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  MaterialDescTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFString          _sfName;
    SFUInt64          _sfDescHash;
    SFUInt32          _sfModeFlags;
    SFUInt32          _sfNumUVChannels;
    MFUInt8           _mfUVDimension;
    SFUInt32          _sfNumColorChannels;
    SFUInt32          _sfShadingModel;
    SFUInt32          _sfOverrideShadingModel;
    SFUInt32          _sfBlendMode;
    SFColor3f         _sfEmissive;
    SFColor3f         _sfAlbedo;
    SFColor3f         _sfSpecular;
    SFColor3f         _sfTransparent;
    SFColor3f         _sfReflective;
    SFReal32          _sfSpecularStrength;
    SFReal32          _sfEmissiveStrength;
    SFReal32          _sfOpacity;
    SFReal32          _sfOpacityCutOff;
    SFUInt32          _sfOpacityMode;
    SFReal32          _sfReflectivity;
    SFReal32          _sfReflectance;
    SFReal32          _sfBumpScaling;
    SFReal32          _sfAnisotropy;
    SFReal32          _sfRoughness;
    SFReal32          _sfMetalness;
    SFReal32          _sfClearCoatStrength;
    SFReal32          _sfClearCoatRoughness;
    SFColor3f         _sfSheenColor;
    SFColor3f         _sfSubSurfaceColor;
    SFInt32           _sfToonLevels;
    SFColor3f         _sfGoochCool;
    SFColor3f         _sfGoochWarm;
    SFReal32          _sfGoochMixin;
    SFReal32          _sfGoochCoolMixin;
    SFReal32          _sfGoochWarmMixin;
    SFGLenum          _sfCullFace;
    SFGLenum          _sfFrontFace;
    SFGLenum          _sfFrontMode;
    SFGLenum          _sfBackMode;
    SFReal32          _sfOffsetFactor;
    SFReal32          _sfOffsetBias;
    MFUnrecTextureDescPtr _mfTextureDesc;
    SFBitVector       _sfExcludeHashingMask;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    MaterialDescBase(void);
    MaterialDescBase(const MaterialDescBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~MaterialDescBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const MaterialDesc *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

     GetFieldHandlePtr  getHandleName            (void) const;
     EditFieldHandlePtr editHandleName           (void);
     GetFieldHandlePtr  getHandleDescHash        (void) const;
     EditFieldHandlePtr editHandleDescHash       (void);
     GetFieldHandlePtr  getHandleModeFlags       (void) const;
     EditFieldHandlePtr editHandleModeFlags      (void);
     GetFieldHandlePtr  getHandleNumUVChannels   (void) const;
     EditFieldHandlePtr editHandleNumUVChannels  (void);
     GetFieldHandlePtr  getHandleUVDimension     (void) const;
     EditFieldHandlePtr editHandleUVDimension    (void);
     GetFieldHandlePtr  getHandleNumColorChannels (void) const;
     EditFieldHandlePtr editHandleNumColorChannels(void);
     GetFieldHandlePtr  getHandleShadingModel    (void) const;
     EditFieldHandlePtr editHandleShadingModel   (void);
     GetFieldHandlePtr  getHandleOverrideShadingModel (void) const;
     EditFieldHandlePtr editHandleOverrideShadingModel(void);
     GetFieldHandlePtr  getHandleBlendMode       (void) const;
     EditFieldHandlePtr editHandleBlendMode      (void);
     GetFieldHandlePtr  getHandleEmissive        (void) const;
     EditFieldHandlePtr editHandleEmissive       (void);
     GetFieldHandlePtr  getHandleAlbedo          (void) const;
     EditFieldHandlePtr editHandleAlbedo         (void);
     GetFieldHandlePtr  getHandleSpecular        (void) const;
     EditFieldHandlePtr editHandleSpecular       (void);
     GetFieldHandlePtr  getHandleTransparent     (void) const;
     EditFieldHandlePtr editHandleTransparent    (void);
     GetFieldHandlePtr  getHandleReflective      (void) const;
     EditFieldHandlePtr editHandleReflective     (void);
     GetFieldHandlePtr  getHandleSpecularStrength (void) const;
     EditFieldHandlePtr editHandleSpecularStrength(void);
     GetFieldHandlePtr  getHandleEmissiveStrength (void) const;
     EditFieldHandlePtr editHandleEmissiveStrength(void);
     GetFieldHandlePtr  getHandleOpacity         (void) const;
     EditFieldHandlePtr editHandleOpacity        (void);
     GetFieldHandlePtr  getHandleOpacityCutOff   (void) const;
     EditFieldHandlePtr editHandleOpacityCutOff  (void);
     GetFieldHandlePtr  getHandleOpacityMode     (void) const;
     EditFieldHandlePtr editHandleOpacityMode    (void);
     GetFieldHandlePtr  getHandleReflectivity    (void) const;
     EditFieldHandlePtr editHandleReflectivity   (void);
     GetFieldHandlePtr  getHandleReflectance     (void) const;
     EditFieldHandlePtr editHandleReflectance    (void);
     GetFieldHandlePtr  getHandleBumpScaling     (void) const;
     EditFieldHandlePtr editHandleBumpScaling    (void);
     GetFieldHandlePtr  getHandleAnisotropy      (void) const;
     EditFieldHandlePtr editHandleAnisotropy     (void);
     GetFieldHandlePtr  getHandleRoughness       (void) const;
     EditFieldHandlePtr editHandleRoughness      (void);
     GetFieldHandlePtr  getHandleMetalness       (void) const;
     EditFieldHandlePtr editHandleMetalness      (void);
     GetFieldHandlePtr  getHandleClearCoatStrength (void) const;
     EditFieldHandlePtr editHandleClearCoatStrength(void);
     GetFieldHandlePtr  getHandleClearCoatRoughness (void) const;
     EditFieldHandlePtr editHandleClearCoatRoughness(void);
     GetFieldHandlePtr  getHandleSheenColor      (void) const;
     EditFieldHandlePtr editHandleSheenColor     (void);
     GetFieldHandlePtr  getHandleSubSurfaceColor (void) const;
     EditFieldHandlePtr editHandleSubSurfaceColor(void);
     GetFieldHandlePtr  getHandleToonLevels      (void) const;
     EditFieldHandlePtr editHandleToonLevels     (void);
     GetFieldHandlePtr  getHandleGoochCool       (void) const;
     EditFieldHandlePtr editHandleGoochCool      (void);
     GetFieldHandlePtr  getHandleGoochWarm       (void) const;
     EditFieldHandlePtr editHandleGoochWarm      (void);
     GetFieldHandlePtr  getHandleGoochMixin      (void) const;
     EditFieldHandlePtr editHandleGoochMixin     (void);
     GetFieldHandlePtr  getHandleGoochCoolMixin  (void) const;
     EditFieldHandlePtr editHandleGoochCoolMixin (void);
     GetFieldHandlePtr  getHandleGoochWarmMixin  (void) const;
     EditFieldHandlePtr editHandleGoochWarmMixin (void);
     GetFieldHandlePtr  getHandleCullFace        (void) const;
     EditFieldHandlePtr editHandleCullFace       (void);
     GetFieldHandlePtr  getHandleFrontFace       (void) const;
     EditFieldHandlePtr editHandleFrontFace      (void);
     GetFieldHandlePtr  getHandleFrontMode       (void) const;
     EditFieldHandlePtr editHandleFrontMode      (void);
     GetFieldHandlePtr  getHandleBackMode        (void) const;
     EditFieldHandlePtr editHandleBackMode       (void);
     GetFieldHandlePtr  getHandleOffsetFactor    (void) const;
     EditFieldHandlePtr editHandleOffsetFactor   (void);
     GetFieldHandlePtr  getHandleOffsetBias      (void) const;
     EditFieldHandlePtr editHandleOffsetBias     (void);
     GetFieldHandlePtr  getHandleTextureDesc     (void) const;
     EditFieldHandlePtr editHandleTextureDesc    (void);
     GetFieldHandlePtr  getHandleExcludeHashingMask (void) const;
     EditFieldHandlePtr editHandleExcludeHashingMask(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  SFUInt32            *editSFModeFlags      (void);
            const SFUInt32            *getSFModeFlags       (void) const;


                  UInt32              &editModeFlags      (void);
                  UInt32               getModeFlags       (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setModeFlags      (const UInt32 value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      MaterialDescBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const MaterialDescBase &source);
};

typedef MaterialDescBase *MaterialDescBaseP;

OSG_END_NAMESPACE

#endif /* _OSGMATERIALDESCBASE_H_ */
