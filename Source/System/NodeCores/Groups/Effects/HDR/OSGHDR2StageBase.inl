/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class HDR2Stage!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE



//! access the type of the class
inline
OSG::FieldContainerType &HDR2StageBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 HDR2StageBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 HDR2StageBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/

//! Get the value of the HDR2Stage::_sfActivate field.

inline
bool &HDR2StageBase::editActivate(void)
{
    editSField(ActivateFieldMask);

    return _sfActivate.getValue();
}

//! Get the value of the HDR2Stage::_sfActivate field.
inline
      bool  HDR2StageBase::getActivate(void) const
{
    return _sfActivate.getValue();
}

//! Set the value of the HDR2Stage::_sfActivate field.
inline
void HDR2StageBase::setActivate(const bool value)
{
    editSField(ActivateFieldMask);

    _sfActivate.setValue(value);
}
//! Get the value of the HDR2Stage::_sfApplyGamma field.

inline
bool &HDR2StageBase::editApplyGamma(void)
{
    editSField(ApplyGammaFieldMask);

    return _sfApplyGamma.getValue();
}

//! Get the value of the HDR2Stage::_sfApplyGamma field.
inline
      bool  HDR2StageBase::getApplyGamma(void) const
{
    return _sfApplyGamma.getValue();
}

//! Set the value of the HDR2Stage::_sfApplyGamma field.
inline
void HDR2StageBase::setApplyGamma(const bool value)
{
    editSField(ApplyGammaFieldMask);

    _sfApplyGamma.setValue(value);
}
//! Get the value of the HDR2Stage::_sfAccurateGamma field.

inline
bool &HDR2StageBase::editAccurateGamma(void)
{
    editSField(AccurateGammaFieldMask);

    return _sfAccurateGamma.getValue();
}

//! Get the value of the HDR2Stage::_sfAccurateGamma field.
inline
      bool  HDR2StageBase::getAccurateGamma(void) const
{
    return _sfAccurateGamma.getValue();
}

//! Set the value of the HDR2Stage::_sfAccurateGamma field.
inline
void HDR2StageBase::setAccurateGamma(const bool value)
{
    editSField(AccurateGammaFieldMask);

    _sfAccurateGamma.setValue(value);
}
//! Get the value of the HDR2Stage::_sfGamma field.

inline
Real32 &HDR2StageBase::editGamma(void)
{
    editSField(GammaFieldMask);

    return _sfGamma.getValue();
}

//! Get the value of the HDR2Stage::_sfGamma field.
inline
      Real32  HDR2StageBase::getGamma(void) const
{
    return _sfGamma.getValue();
}

//! Set the value of the HDR2Stage::_sfGamma field.
inline
void HDR2StageBase::setGamma(const Real32 value)
{
    editSField(GammaFieldMask);

    _sfGamma.setValue(value);
}
//! Get the value of the HDR2Stage::_sfAdjustLuminance field.

inline
bool &HDR2StageBase::editAdjustLuminance(void)
{
    editSField(AdjustLuminanceFieldMask);

    return _sfAdjustLuminance.getValue();
}

//! Get the value of the HDR2Stage::_sfAdjustLuminance field.
inline
      bool  HDR2StageBase::getAdjustLuminance(void) const
{
    return _sfAdjustLuminance.getValue();
}

//! Set the value of the HDR2Stage::_sfAdjustLuminance field.
inline
void HDR2StageBase::setAdjustLuminance(const bool value)
{
    editSField(AdjustLuminanceFieldMask);

    _sfAdjustLuminance.setValue(value);
}
//! Get the value of the HDR2Stage::_sfTau field.

inline
Real32 &HDR2StageBase::editTau(void)
{
    editSField(TauFieldMask);

    return _sfTau.getValue();
}

//! Get the value of the HDR2Stage::_sfTau field.
inline
      Real32  HDR2StageBase::getTau(void) const
{
    return _sfTau.getValue();
}

//! Set the value of the HDR2Stage::_sfTau field.
inline
void HDR2StageBase::setTau(const Real32 value)
{
    editSField(TauFieldMask);

    _sfTau.setValue(value);
}
//! Get the value of the HDR2Stage::_sfPerformBloom field.

inline
bool &HDR2StageBase::editPerformBloom(void)
{
    editSField(PerformBloomFieldMask);

    return _sfPerformBloom.getValue();
}

//! Get the value of the HDR2Stage::_sfPerformBloom field.
inline
      bool  HDR2StageBase::getPerformBloom(void) const
{
    return _sfPerformBloom.getValue();
}

//! Set the value of the HDR2Stage::_sfPerformBloom field.
inline
void HDR2StageBase::setPerformBloom(const bool value)
{
    editSField(PerformBloomFieldMask);

    _sfPerformBloom.setValue(value);
}
//! Get the value of the HDR2Stage::_sfBloomThreshold field.

inline
Real32 &HDR2StageBase::editBloomThreshold(void)
{
    editSField(BloomThresholdFieldMask);

    return _sfBloomThreshold.getValue();
}

//! Get the value of the HDR2Stage::_sfBloomThreshold field.
inline
      Real32  HDR2StageBase::getBloomThreshold(void) const
{
    return _sfBloomThreshold.getValue();
}

//! Set the value of the HDR2Stage::_sfBloomThreshold field.
inline
void HDR2StageBase::setBloomThreshold(const Real32 value)
{
    editSField(BloomThresholdFieldMask);

    _sfBloomThreshold.setValue(value);
}
//! Get the value of the HDR2Stage::_sfBloomBackground field.

inline
bool &HDR2StageBase::editBloomBackground(void)
{
    editSField(BloomBackgroundFieldMask);

    return _sfBloomBackground.getValue();
}

//! Get the value of the HDR2Stage::_sfBloomBackground field.
inline
      bool  HDR2StageBase::getBloomBackground(void) const
{
    return _sfBloomBackground.getValue();
}

//! Set the value of the HDR2Stage::_sfBloomBackground field.
inline
void HDR2StageBase::setBloomBackground(const bool value)
{
    editSField(BloomBackgroundFieldMask);

    _sfBloomBackground.setValue(value);
}
//! Get the value of the HDR2Stage::_sfBloomMagnitude field.

inline
Real32 &HDR2StageBase::editBloomMagnitude(void)
{
    editSField(BloomMagnitudeFieldMask);

    return _sfBloomMagnitude.getValue();
}

//! Get the value of the HDR2Stage::_sfBloomMagnitude field.
inline
      Real32  HDR2StageBase::getBloomMagnitude(void) const
{
    return _sfBloomMagnitude.getValue();
}

//! Set the value of the HDR2Stage::_sfBloomMagnitude field.
inline
void HDR2StageBase::setBloomMagnitude(const Real32 value)
{
    editSField(BloomMagnitudeFieldMask);

    _sfBloomMagnitude.setValue(value);
}
//! Get the value of the HDR2Stage::_sfNumTaps field.

inline
Int32 &HDR2StageBase::editNumTaps(void)
{
    editSField(NumTapsFieldMask);

    return _sfNumTaps.getValue();
}

//! Get the value of the HDR2Stage::_sfNumTaps field.
inline
      Int32  HDR2StageBase::getNumTaps(void) const
{
    return _sfNumTaps.getValue();
}

//! Set the value of the HDR2Stage::_sfNumTaps field.
inline
void HDR2StageBase::setNumTaps(const Int32 value)
{
    editSField(NumTapsFieldMask);

    _sfNumTaps.setValue(value);
}
//! Get the value of the HDR2Stage::_sfBlurGaussSigma field.

inline
Real32 &HDR2StageBase::editBlurGaussSigma(void)
{
    editSField(BlurGaussSigmaFieldMask);

    return _sfBlurGaussSigma.getValue();
}

//! Get the value of the HDR2Stage::_sfBlurGaussSigma field.
inline
      Real32  HDR2StageBase::getBlurGaussSigma(void) const
{
    return _sfBlurGaussSigma.getValue();
}

//! Set the value of the HDR2Stage::_sfBlurGaussSigma field.
inline
void HDR2StageBase::setBlurGaussSigma(const Real32 value)
{
    editSField(BlurGaussSigmaFieldMask);

    _sfBlurGaussSigma.setValue(value);
}
//! Get the value of the HDR2Stage::_sfToneMappingMode field.

inline
UInt32 &HDR2StageBase::editToneMappingMode(void)
{
    editSField(ToneMappingModeFieldMask);

    return _sfToneMappingMode.getValue();
}

//! Get the value of the HDR2Stage::_sfToneMappingMode field.
inline
      UInt32  HDR2StageBase::getToneMappingMode(void) const
{
    return _sfToneMappingMode.getValue();
}

//! Set the value of the HDR2Stage::_sfToneMappingMode field.
inline
void HDR2StageBase::setToneMappingMode(const UInt32 value)
{
    editSField(ToneMappingModeFieldMask);

    _sfToneMappingMode.setValue(value);
}
//! Get the value of the HDR2Stage::_sfForceBackground field.

inline
bool &HDR2StageBase::editForceBackground(void)
{
    editSField(ForceBackgroundFieldMask);

    return _sfForceBackground.getValue();
}

//! Get the value of the HDR2Stage::_sfForceBackground field.
inline
      bool  HDR2StageBase::getForceBackground(void) const
{
    return _sfForceBackground.getValue();
}

//! Set the value of the HDR2Stage::_sfForceBackground field.
inline
void HDR2StageBase::setForceBackground(const bool value)
{
    editSField(ForceBackgroundFieldMask);

    _sfForceBackground.setValue(value);
}
//! Get the value of the HDR2Stage::_sfUse_ITU_R_BT_709 field.

inline
bool &HDR2StageBase::editUse_ITU_R_BT_709(void)
{
    editSField(Use_ITU_R_BT_709FieldMask);

    return _sfUse_ITU_R_BT_709.getValue();
}

//! Get the value of the HDR2Stage::_sfUse_ITU_R_BT_709 field.
inline
      bool  HDR2StageBase::getUse_ITU_R_BT_709(void) const
{
    return _sfUse_ITU_R_BT_709.getValue();
}

//! Set the value of the HDR2Stage::_sfUse_ITU_R_BT_709 field.
inline
void HDR2StageBase::setUse_ITU_R_BT_709(const bool value)
{
    editSField(Use_ITU_R_BT_709FieldMask);

    _sfUse_ITU_R_BT_709.setValue(value);
}
//! Get the value of the HDR2Stage::_sfAutoExposureMode field.

inline
UInt32 &HDR2StageBase::editAutoExposureMode(void)
{
    editSField(AutoExposureModeFieldMask);

    return _sfAutoExposureMode.getValue();
}

//! Get the value of the HDR2Stage::_sfAutoExposureMode field.
inline
      UInt32  HDR2StageBase::getAutoExposureMode(void) const
{
    return _sfAutoExposureMode.getValue();
}

//! Set the value of the HDR2Stage::_sfAutoExposureMode field.
inline
void HDR2StageBase::setAutoExposureMode(const UInt32 value)
{
    editSField(AutoExposureModeFieldMask);

    _sfAutoExposureMode.setValue(value);
}
//! Get the value of the HDR2Stage::_sfExposure field.

inline
Real32 &HDR2StageBase::editExposure(void)
{
    editSField(ExposureFieldMask);

    return _sfExposure.getValue();
}

//! Get the value of the HDR2Stage::_sfExposure field.
inline
      Real32  HDR2StageBase::getExposure(void) const
{
    return _sfExposure.getValue();
}

//! Set the value of the HDR2Stage::_sfExposure field.
inline
void HDR2StageBase::setExposure(const Real32 value)
{
    editSField(ExposureFieldMask);

    _sfExposure.setValue(value);
}
//! Get the value of the HDR2Stage::_sfKeyValue field.

inline
Real32 &HDR2StageBase::editKeyValue(void)
{
    editSField(KeyValueFieldMask);

    return _sfKeyValue.getValue();
}

//! Get the value of the HDR2Stage::_sfKeyValue field.
inline
      Real32  HDR2StageBase::getKeyValue(void) const
{
    return _sfKeyValue.getValue();
}

//! Set the value of the HDR2Stage::_sfKeyValue field.
inline
void HDR2StageBase::setKeyValue(const Real32 value)
{
    editSField(KeyValueFieldMask);

    _sfKeyValue.setValue(value);
}
//! Get the value of the HDR2Stage::_sfApertureFNumber field.

inline
Real32 &HDR2StageBase::editApertureFNumber(void)
{
    editSField(ApertureFNumberFieldMask);

    return _sfApertureFNumber.getValue();
}

//! Get the value of the HDR2Stage::_sfApertureFNumber field.
inline
      Real32  HDR2StageBase::getApertureFNumber(void) const
{
    return _sfApertureFNumber.getValue();
}

//! Set the value of the HDR2Stage::_sfApertureFNumber field.
inline
void HDR2StageBase::setApertureFNumber(const Real32 value)
{
    editSField(ApertureFNumberFieldMask);

    _sfApertureFNumber.setValue(value);
}
//! Get the value of the HDR2Stage::_sfShutterSpeed field.

inline
Real32 &HDR2StageBase::editShutterSpeed(void)
{
    editSField(ShutterSpeedFieldMask);

    return _sfShutterSpeed.getValue();
}

//! Get the value of the HDR2Stage::_sfShutterSpeed field.
inline
      Real32  HDR2StageBase::getShutterSpeed(void) const
{
    return _sfShutterSpeed.getValue();
}

//! Set the value of the HDR2Stage::_sfShutterSpeed field.
inline
void HDR2StageBase::setShutterSpeed(const Real32 value)
{
    editSField(ShutterSpeedFieldMask);

    _sfShutterSpeed.setValue(value);
}
//! Get the value of the HDR2Stage::_sfISO field.

inline
Real32 &HDR2StageBase::editISO(void)
{
    editSField(ISOFieldMask);

    return _sfISO.getValue();
}

//! Get the value of the HDR2Stage::_sfISO field.
inline
      Real32  HDR2StageBase::getISO(void) const
{
    return _sfISO.getValue();
}

//! Set the value of the HDR2Stage::_sfISO field.
inline
void HDR2StageBase::setISO(const Real32 value)
{
    editSField(ISOFieldMask);

    _sfISO.setValue(value);
}
//! Get the value of the HDR2Stage::_sfWhiteLevel field.

inline
Real32 &HDR2StageBase::editWhiteLevel(void)
{
    editSField(WhiteLevelFieldMask);

    return _sfWhiteLevel.getValue();
}

//! Get the value of the HDR2Stage::_sfWhiteLevel field.
inline
      Real32  HDR2StageBase::getWhiteLevel(void) const
{
    return _sfWhiteLevel.getValue();
}

//! Set the value of the HDR2Stage::_sfWhiteLevel field.
inline
void HDR2StageBase::setWhiteLevel(const Real32 value)
{
    editSField(WhiteLevelFieldMask);

    _sfWhiteLevel.setValue(value);
}
//! Get the value of the HDR2Stage::_sfSaturation field.

inline
Real32 &HDR2StageBase::editSaturation(void)
{
    editSField(SaturationFieldMask);

    return _sfSaturation.getValue();
}

//! Get the value of the HDR2Stage::_sfSaturation field.
inline
      Real32  HDR2StageBase::getSaturation(void) const
{
    return _sfSaturation.getValue();
}

//! Set the value of the HDR2Stage::_sfSaturation field.
inline
void HDR2StageBase::setSaturation(const Real32 value)
{
    editSField(SaturationFieldMask);

    _sfSaturation.setValue(value);
}
//! Get the value of the HDR2Stage::_sfUseLinChromCorrection field.

inline
bool &HDR2StageBase::editUseLinChromCorrection(void)
{
    editSField(UseLinChromCorrectionFieldMask);

    return _sfUseLinChromCorrection.getValue();
}

//! Get the value of the HDR2Stage::_sfUseLinChromCorrection field.
inline
      bool  HDR2StageBase::getUseLinChromCorrection(void) const
{
    return _sfUseLinChromCorrection.getValue();
}

//! Set the value of the HDR2Stage::_sfUseLinChromCorrection field.
inline
void HDR2StageBase::setUseLinChromCorrection(const bool value)
{
    editSField(UseLinChromCorrectionFieldMask);

    _sfUseLinChromCorrection.setValue(value);
}
//! Get the value of the HDR2Stage::_sfFilterColor field.

inline
Color3f &HDR2StageBase::editFilterColor(void)
{
    editSField(FilterColorFieldMask);

    return _sfFilterColor.getValue();
}

//! Get the value of the HDR2Stage::_sfFilterColor field.
inline
const Color3f &HDR2StageBase::getFilterColor(void) const
{
    return _sfFilterColor.getValue();
}

//! Set the value of the HDR2Stage::_sfFilterColor field.
inline
void HDR2StageBase::setFilterColor(const Color3f &value)
{
    editSField(FilterColorFieldMask);

    _sfFilterColor.setValue(value);
}
//! Get the value of the HDR2Stage::_sfContrast field.

inline
Real32 &HDR2StageBase::editContrast(void)
{
    editSField(ContrastFieldMask);

    return _sfContrast.getValue();
}

//! Get the value of the HDR2Stage::_sfContrast field.
inline
      Real32  HDR2StageBase::getContrast(void) const
{
    return _sfContrast.getValue();
}

//! Set the value of the HDR2Stage::_sfContrast field.
inline
void HDR2StageBase::setContrast(const Real32 value)
{
    editSField(ContrastFieldMask);

    _sfContrast.setValue(value);
}
//! Get the value of the HDR2Stage::_sfShadowLiftColor field.

inline
Color3f &HDR2StageBase::editShadowLiftColor(void)
{
    editSField(ShadowLiftColorFieldMask);

    return _sfShadowLiftColor.getValue();
}

//! Get the value of the HDR2Stage::_sfShadowLiftColor field.
inline
const Color3f &HDR2StageBase::getShadowLiftColor(void) const
{
    return _sfShadowLiftColor.getValue();
}

//! Set the value of the HDR2Stage::_sfShadowLiftColor field.
inline
void HDR2StageBase::setShadowLiftColor(const Color3f &value)
{
    editSField(ShadowLiftColorFieldMask);

    _sfShadowLiftColor.setValue(value);
}
//! Get the value of the HDR2Stage::_sfMidToneGammaColor field.

inline
Color3f &HDR2StageBase::editMidToneGammaColor(void)
{
    editSField(MidToneGammaColorFieldMask);

    return _sfMidToneGammaColor.getValue();
}

//! Get the value of the HDR2Stage::_sfMidToneGammaColor field.
inline
const Color3f &HDR2StageBase::getMidToneGammaColor(void) const
{
    return _sfMidToneGammaColor.getValue();
}

//! Set the value of the HDR2Stage::_sfMidToneGammaColor field.
inline
void HDR2StageBase::setMidToneGammaColor(const Color3f &value)
{
    editSField(MidToneGammaColorFieldMask);

    _sfMidToneGammaColor.setValue(value);
}
//! Get the value of the HDR2Stage::_sfHighlightGainColor field.

inline
Color3f &HDR2StageBase::editHighlightGainColor(void)
{
    editSField(HighlightGainColorFieldMask);

    return _sfHighlightGainColor.getValue();
}

//! Get the value of the HDR2Stage::_sfHighlightGainColor field.
inline
const Color3f &HDR2StageBase::getHighlightGainColor(void) const
{
    return _sfHighlightGainColor.getValue();
}

//! Set the value of the HDR2Stage::_sfHighlightGainColor field.
inline
void HDR2StageBase::setHighlightGainColor(const Color3f &value)
{
    editSField(HighlightGainColorFieldMask);

    _sfHighlightGainColor.setValue(value);
}
//! Get the value of the HDR2Stage::_sfDragoBias field.

inline
Real32 &HDR2StageBase::editDragoBias(void)
{
    editSField(DragoBiasFieldMask);

    return _sfDragoBias.getValue();
}

//! Get the value of the HDR2Stage::_sfDragoBias field.
inline
      Real32  HDR2StageBase::getDragoBias(void) const
{
    return _sfDragoBias.getValue();
}

//! Set the value of the HDR2Stage::_sfDragoBias field.
inline
void HDR2StageBase::setDragoBias(const Real32 value)
{
    editSField(DragoBiasFieldMask);

    _sfDragoBias.setValue(value);
}
//! Get the value of the HDR2Stage::_sfTarget field.

inline
UInt32 &HDR2StageBase::editTarget(void)
{
    editSField(TargetFieldMask);

    return _sfTarget.getValue();
}

//! Get the value of the HDR2Stage::_sfTarget field.
inline
      UInt32  HDR2StageBase::getTarget(void) const
{
    return _sfTarget.getValue();
}

//! Set the value of the HDR2Stage::_sfTarget field.
inline
void HDR2StageBase::setTarget(const UInt32 value)
{
    editSField(TargetFieldMask);

    _sfTarget.setValue(value);
}
//! Get the value of the HDR2Stage::_sfPerformDithering field.

inline
bool &HDR2StageBase::editPerformDithering(void)
{
    editSField(PerformDitheringFieldMask);

    return _sfPerformDithering.getValue();
}

//! Get the value of the HDR2Stage::_sfPerformDithering field.
inline
      bool  HDR2StageBase::getPerformDithering(void) const
{
    return _sfPerformDithering.getValue();
}

//! Set the value of the HDR2Stage::_sfPerformDithering field.
inline
void HDR2StageBase::setPerformDithering(const bool value)
{
    editSField(PerformDitheringFieldMask);

    _sfPerformDithering.setValue(value);
}
//! Get the value of the HDR2Stage::_sfCarryDepth field.

inline
bool &HDR2StageBase::editCarryDepth(void)
{
    editSField(CarryDepthFieldMask);

    return _sfCarryDepth.getValue();
}

//! Get the value of the HDR2Stage::_sfCarryDepth field.
inline
      bool  HDR2StageBase::getCarryDepth(void) const
{
    return _sfCarryDepth.getValue();
}

//! Set the value of the HDR2Stage::_sfCarryDepth field.
inline
void HDR2StageBase::setCarryDepth(const bool value)
{
    editSField(CarryDepthFieldMask);

    _sfCarryDepth.setValue(value);
}
//! Get the value of the HDR2Stage::_sfColorBufferInternalFormat field.

inline
GLenum &HDR2StageBase::editColorBufferInternalFormat(void)
{
    editSField(ColorBufferInternalFormatFieldMask);

    return _sfColorBufferInternalFormat.getValue();
}

//! Get the value of the HDR2Stage::_sfColorBufferInternalFormat field.
inline
const GLenum &HDR2StageBase::getColorBufferInternalFormat(void) const
{
    return _sfColorBufferInternalFormat.getValue();
}

//! Set the value of the HDR2Stage::_sfColorBufferInternalFormat field.
inline
void HDR2StageBase::setColorBufferInternalFormat(const GLenum &value)
{
    editSField(ColorBufferInternalFormatFieldMask);

    _sfColorBufferInternalFormat.setValue(value);
}
//! Get the value of the HDR2Stage::_sfColorBufferPixelFormat field.

inline
GLenum &HDR2StageBase::editColorBufferPixelFormat(void)
{
    editSField(ColorBufferPixelFormatFieldMask);

    return _sfColorBufferPixelFormat.getValue();
}

//! Get the value of the HDR2Stage::_sfColorBufferPixelFormat field.
inline
const GLenum &HDR2StageBase::getColorBufferPixelFormat(void) const
{
    return _sfColorBufferPixelFormat.getValue();
}

//! Set the value of the HDR2Stage::_sfColorBufferPixelFormat field.
inline
void HDR2StageBase::setColorBufferPixelFormat(const GLenum &value)
{
    editSField(ColorBufferPixelFormatFieldMask);

    _sfColorBufferPixelFormat.setValue(value);
}
//! Get the value of the HDR2Stage::_sfColorBufferType field.

inline
GLenum &HDR2StageBase::editColorBufferType(void)
{
    editSField(ColorBufferTypeFieldMask);

    return _sfColorBufferType.getValue();
}

//! Get the value of the HDR2Stage::_sfColorBufferType field.
inline
const GLenum &HDR2StageBase::getColorBufferType(void) const
{
    return _sfColorBufferType.getValue();
}

//! Set the value of the HDR2Stage::_sfColorBufferType field.
inline
void HDR2StageBase::setColorBufferType(const GLenum &value)
{
    editSField(ColorBufferTypeFieldMask);

    _sfColorBufferType.setValue(value);
}
//! Get the value of the HDR2Stage::_sfDepthBufferInternalFormat field.

inline
GLenum &HDR2StageBase::editDepthBufferInternalFormat(void)
{
    editSField(DepthBufferInternalFormatFieldMask);

    return _sfDepthBufferInternalFormat.getValue();
}

//! Get the value of the HDR2Stage::_sfDepthBufferInternalFormat field.
inline
const GLenum &HDR2StageBase::getDepthBufferInternalFormat(void) const
{
    return _sfDepthBufferInternalFormat.getValue();
}

//! Set the value of the HDR2Stage::_sfDepthBufferInternalFormat field.
inline
void HDR2StageBase::setDepthBufferInternalFormat(const GLenum &value)
{
    editSField(DepthBufferInternalFormatFieldMask);

    _sfDepthBufferInternalFormat.setValue(value);
}
//! Get the value of the HDR2Stage::_sfDepthBufferPixelFormat field.

inline
GLenum &HDR2StageBase::editDepthBufferPixelFormat(void)
{
    editSField(DepthBufferPixelFormatFieldMask);

    return _sfDepthBufferPixelFormat.getValue();
}

//! Get the value of the HDR2Stage::_sfDepthBufferPixelFormat field.
inline
const GLenum &HDR2StageBase::getDepthBufferPixelFormat(void) const
{
    return _sfDepthBufferPixelFormat.getValue();
}

//! Set the value of the HDR2Stage::_sfDepthBufferPixelFormat field.
inline
void HDR2StageBase::setDepthBufferPixelFormat(const GLenum &value)
{
    editSField(DepthBufferPixelFormatFieldMask);

    _sfDepthBufferPixelFormat.setValue(value);
}
//! Get the value of the HDR2Stage::_sfDepthBufferType field.

inline
GLenum &HDR2StageBase::editDepthBufferType(void)
{
    editSField(DepthBufferTypeFieldMask);

    return _sfDepthBufferType.getValue();
}

//! Get the value of the HDR2Stage::_sfDepthBufferType field.
inline
const GLenum &HDR2StageBase::getDepthBufferType(void) const
{
    return _sfDepthBufferType.getValue();
}

//! Set the value of the HDR2Stage::_sfDepthBufferType field.
inline
void HDR2StageBase::setDepthBufferType(const GLenum &value)
{
    editSField(DepthBufferTypeFieldMask);

    _sfDepthBufferType.setValue(value);
}
//! Get the value of the HDR2Stage::_sfLumBufferInternalFormat field.

inline
GLenum &HDR2StageBase::editLumBufferInternalFormat(void)
{
    editSField(LumBufferInternalFormatFieldMask);

    return _sfLumBufferInternalFormat.getValue();
}

//! Get the value of the HDR2Stage::_sfLumBufferInternalFormat field.
inline
const GLenum &HDR2StageBase::getLumBufferInternalFormat(void) const
{
    return _sfLumBufferInternalFormat.getValue();
}

//! Set the value of the HDR2Stage::_sfLumBufferInternalFormat field.
inline
void HDR2StageBase::setLumBufferInternalFormat(const GLenum &value)
{
    editSField(LumBufferInternalFormatFieldMask);

    _sfLumBufferInternalFormat.setValue(value);
}
//! Get the value of the HDR2Stage::_sfLumBufferPixelFormat field.

inline
GLenum &HDR2StageBase::editLumBufferPixelFormat(void)
{
    editSField(LumBufferPixelFormatFieldMask);

    return _sfLumBufferPixelFormat.getValue();
}

//! Get the value of the HDR2Stage::_sfLumBufferPixelFormat field.
inline
const GLenum &HDR2StageBase::getLumBufferPixelFormat(void) const
{
    return _sfLumBufferPixelFormat.getValue();
}

//! Set the value of the HDR2Stage::_sfLumBufferPixelFormat field.
inline
void HDR2StageBase::setLumBufferPixelFormat(const GLenum &value)
{
    editSField(LumBufferPixelFormatFieldMask);

    _sfLumBufferPixelFormat.setValue(value);
}
//! Get the value of the HDR2Stage::_sfLumBufferType field.

inline
GLenum &HDR2StageBase::editLumBufferType(void)
{
    editSField(LumBufferTypeFieldMask);

    return _sfLumBufferType.getValue();
}

//! Get the value of the HDR2Stage::_sfLumBufferType field.
inline
const GLenum &HDR2StageBase::getLumBufferType(void) const
{
    return _sfLumBufferType.getValue();
}

//! Set the value of the HDR2Stage::_sfLumBufferType field.
inline
void HDR2StageBase::setLumBufferType(const GLenum &value)
{
    editSField(LumBufferTypeFieldMask);

    _sfLumBufferType.setValue(value);
}
//! Get the value of the HDR2Stage::_sfImageBufferInternalFormat field.

inline
GLenum &HDR2StageBase::editImageBufferInternalFormat(void)
{
    editSField(ImageBufferInternalFormatFieldMask);

    return _sfImageBufferInternalFormat.getValue();
}

//! Get the value of the HDR2Stage::_sfImageBufferInternalFormat field.
inline
const GLenum &HDR2StageBase::getImageBufferInternalFormat(void) const
{
    return _sfImageBufferInternalFormat.getValue();
}

//! Set the value of the HDR2Stage::_sfImageBufferInternalFormat field.
inline
void HDR2StageBase::setImageBufferInternalFormat(const GLenum &value)
{
    editSField(ImageBufferInternalFormatFieldMask);

    _sfImageBufferInternalFormat.setValue(value);
}
//! Get the value of the HDR2Stage::_sfImageBufferPixelFormat field.

inline
GLenum &HDR2StageBase::editImageBufferPixelFormat(void)
{
    editSField(ImageBufferPixelFormatFieldMask);

    return _sfImageBufferPixelFormat.getValue();
}

//! Get the value of the HDR2Stage::_sfImageBufferPixelFormat field.
inline
const GLenum &HDR2StageBase::getImageBufferPixelFormat(void) const
{
    return _sfImageBufferPixelFormat.getValue();
}

//! Set the value of the HDR2Stage::_sfImageBufferPixelFormat field.
inline
void HDR2StageBase::setImageBufferPixelFormat(const GLenum &value)
{
    editSField(ImageBufferPixelFormatFieldMask);

    _sfImageBufferPixelFormat.setValue(value);
}
//! Get the value of the HDR2Stage::_sfImageBufferType field.

inline
GLenum &HDR2StageBase::editImageBufferType(void)
{
    editSField(ImageBufferTypeFieldMask);

    return _sfImageBufferType.getValue();
}

//! Get the value of the HDR2Stage::_sfImageBufferType field.
inline
const GLenum &HDR2StageBase::getImageBufferType(void) const
{
    return _sfImageBufferType.getValue();
}

//! Set the value of the HDR2Stage::_sfImageBufferType field.
inline
void HDR2StageBase::setImageBufferType(const GLenum &value)
{
    editSField(ImageBufferTypeFieldMask);

    _sfImageBufferType.setValue(value);
}
//! Get the value of the HDR2Stage::_sfNumSamples field.

inline
Int32 &HDR2StageBase::editNumSamples(void)
{
    editSField(NumSamplesFieldMask);

    return _sfNumSamples.getValue();
}

//! Get the value of the HDR2Stage::_sfNumSamples field.
inline
      Int32  HDR2StageBase::getNumSamples(void) const
{
    return _sfNumSamples.getValue();
}

//! Set the value of the HDR2Stage::_sfNumSamples field.
inline
void HDR2StageBase::setNumSamples(const Int32 value)
{
    editSField(NumSamplesFieldMask);

    _sfNumSamples.setValue(value);
}
//! Get the value of the HDR2Stage::_sfMipmapLevel field.

inline
Int32 &HDR2StageBase::editMipmapLevel(void)
{
    editSField(MipmapLevelFieldMask);

    return _sfMipmapLevel.getValue();
}

//! Get the value of the HDR2Stage::_sfMipmapLevel field.
inline
      Int32  HDR2StageBase::getMipmapLevel(void) const
{
    return _sfMipmapLevel.getValue();
}

//! Set the value of the HDR2Stage::_sfMipmapLevel field.
inline
void HDR2StageBase::setMipmapLevel(const Int32 value)
{
    editSField(MipmapLevelFieldMask);

    _sfMipmapLevel.setValue(value);
}

//! Get the value of the \a index element the HDR2Stage::_mfFilmicCurveParameters field.
inline
      Real32  HDR2StageBase::getFilmicCurveParameters(const UInt32 index) const
{
    return _mfFilmicCurveParameters[index];
}

inline
MFReal32           ::reference HDR2StageBase::editFilmicCurveParameters(const UInt32 index)
{
    editMField(FilmicCurveParametersFieldMask, _mfFilmicCurveParameters);

    return _mfFilmicCurveParameters[index];
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void HDR2StageBase::execSync (      HDR2StageBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (ActivateFieldMask & whichField))
        _sfActivate.syncWith(pFrom->_sfActivate);

    if(FieldBits::NoField != (ApplyGammaFieldMask & whichField))
        _sfApplyGamma.syncWith(pFrom->_sfApplyGamma);

    if(FieldBits::NoField != (AccurateGammaFieldMask & whichField))
        _sfAccurateGamma.syncWith(pFrom->_sfAccurateGamma);

    if(FieldBits::NoField != (GammaFieldMask & whichField))
        _sfGamma.syncWith(pFrom->_sfGamma);

    if(FieldBits::NoField != (AdjustLuminanceFieldMask & whichField))
        _sfAdjustLuminance.syncWith(pFrom->_sfAdjustLuminance);

    if(FieldBits::NoField != (TauFieldMask & whichField))
        _sfTau.syncWith(pFrom->_sfTau);

    if(FieldBits::NoField != (PerformBloomFieldMask & whichField))
        _sfPerformBloom.syncWith(pFrom->_sfPerformBloom);

    if(FieldBits::NoField != (BloomThresholdFieldMask & whichField))
        _sfBloomThreshold.syncWith(pFrom->_sfBloomThreshold);

    if(FieldBits::NoField != (BloomBackgroundFieldMask & whichField))
        _sfBloomBackground.syncWith(pFrom->_sfBloomBackground);

    if(FieldBits::NoField != (BloomMagnitudeFieldMask & whichField))
        _sfBloomMagnitude.syncWith(pFrom->_sfBloomMagnitude);

    if(FieldBits::NoField != (NumTapsFieldMask & whichField))
        _sfNumTaps.syncWith(pFrom->_sfNumTaps);

    if(FieldBits::NoField != (BlurGaussSigmaFieldMask & whichField))
        _sfBlurGaussSigma.syncWith(pFrom->_sfBlurGaussSigma);

    if(FieldBits::NoField != (ToneMappingModeFieldMask & whichField))
        _sfToneMappingMode.syncWith(pFrom->_sfToneMappingMode);

    if(FieldBits::NoField != (ForceBackgroundFieldMask & whichField))
        _sfForceBackground.syncWith(pFrom->_sfForceBackground);

    if(FieldBits::NoField != (Use_ITU_R_BT_709FieldMask & whichField))
        _sfUse_ITU_R_BT_709.syncWith(pFrom->_sfUse_ITU_R_BT_709);

    if(FieldBits::NoField != (AutoExposureModeFieldMask & whichField))
        _sfAutoExposureMode.syncWith(pFrom->_sfAutoExposureMode);

    if(FieldBits::NoField != (ExposureFieldMask & whichField))
        _sfExposure.syncWith(pFrom->_sfExposure);

    if(FieldBits::NoField != (KeyValueFieldMask & whichField))
        _sfKeyValue.syncWith(pFrom->_sfKeyValue);

    if(FieldBits::NoField != (ApertureFNumberFieldMask & whichField))
        _sfApertureFNumber.syncWith(pFrom->_sfApertureFNumber);

    if(FieldBits::NoField != (ShutterSpeedFieldMask & whichField))
        _sfShutterSpeed.syncWith(pFrom->_sfShutterSpeed);

    if(FieldBits::NoField != (ISOFieldMask & whichField))
        _sfISO.syncWith(pFrom->_sfISO);

    if(FieldBits::NoField != (WhiteLevelFieldMask & whichField))
        _sfWhiteLevel.syncWith(pFrom->_sfWhiteLevel);

    if(FieldBits::NoField != (SaturationFieldMask & whichField))
        _sfSaturation.syncWith(pFrom->_sfSaturation);

    if(FieldBits::NoField != (UseLinChromCorrectionFieldMask & whichField))
        _sfUseLinChromCorrection.syncWith(pFrom->_sfUseLinChromCorrection);

    if(FieldBits::NoField != (FilterColorFieldMask & whichField))
        _sfFilterColor.syncWith(pFrom->_sfFilterColor);

    if(FieldBits::NoField != (ContrastFieldMask & whichField))
        _sfContrast.syncWith(pFrom->_sfContrast);

    if(FieldBits::NoField != (ShadowLiftColorFieldMask & whichField))
        _sfShadowLiftColor.syncWith(pFrom->_sfShadowLiftColor);

    if(FieldBits::NoField != (MidToneGammaColorFieldMask & whichField))
        _sfMidToneGammaColor.syncWith(pFrom->_sfMidToneGammaColor);

    if(FieldBits::NoField != (HighlightGainColorFieldMask & whichField))
        _sfHighlightGainColor.syncWith(pFrom->_sfHighlightGainColor);

    if(FieldBits::NoField != (FilmicCurveParametersFieldMask & whichField))
        _mfFilmicCurveParameters.syncWith(pFrom->_mfFilmicCurveParameters,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (DragoBiasFieldMask & whichField))
        _sfDragoBias.syncWith(pFrom->_sfDragoBias);

    if(FieldBits::NoField != (TargetFieldMask & whichField))
        _sfTarget.syncWith(pFrom->_sfTarget);

    if(FieldBits::NoField != (PerformDitheringFieldMask & whichField))
        _sfPerformDithering.syncWith(pFrom->_sfPerformDithering);

    if(FieldBits::NoField != (CarryDepthFieldMask & whichField))
        _sfCarryDepth.syncWith(pFrom->_sfCarryDepth);

    if(FieldBits::NoField != (ColorBufferInternalFormatFieldMask & whichField))
        _sfColorBufferInternalFormat.syncWith(pFrom->_sfColorBufferInternalFormat);

    if(FieldBits::NoField != (ColorBufferPixelFormatFieldMask & whichField))
        _sfColorBufferPixelFormat.syncWith(pFrom->_sfColorBufferPixelFormat);

    if(FieldBits::NoField != (ColorBufferTypeFieldMask & whichField))
        _sfColorBufferType.syncWith(pFrom->_sfColorBufferType);

    if(FieldBits::NoField != (DepthBufferInternalFormatFieldMask & whichField))
        _sfDepthBufferInternalFormat.syncWith(pFrom->_sfDepthBufferInternalFormat);

    if(FieldBits::NoField != (DepthBufferPixelFormatFieldMask & whichField))
        _sfDepthBufferPixelFormat.syncWith(pFrom->_sfDepthBufferPixelFormat);

    if(FieldBits::NoField != (DepthBufferTypeFieldMask & whichField))
        _sfDepthBufferType.syncWith(pFrom->_sfDepthBufferType);

    if(FieldBits::NoField != (LumBufferInternalFormatFieldMask & whichField))
        _sfLumBufferInternalFormat.syncWith(pFrom->_sfLumBufferInternalFormat);

    if(FieldBits::NoField != (LumBufferPixelFormatFieldMask & whichField))
        _sfLumBufferPixelFormat.syncWith(pFrom->_sfLumBufferPixelFormat);

    if(FieldBits::NoField != (LumBufferTypeFieldMask & whichField))
        _sfLumBufferType.syncWith(pFrom->_sfLumBufferType);

    if(FieldBits::NoField != (ImageBufferInternalFormatFieldMask & whichField))
        _sfImageBufferInternalFormat.syncWith(pFrom->_sfImageBufferInternalFormat);

    if(FieldBits::NoField != (ImageBufferPixelFormatFieldMask & whichField))
        _sfImageBufferPixelFormat.syncWith(pFrom->_sfImageBufferPixelFormat);

    if(FieldBits::NoField != (ImageBufferTypeFieldMask & whichField))
        _sfImageBufferType.syncWith(pFrom->_sfImageBufferType);

    if(FieldBits::NoField != (NumSamplesFieldMask & whichField))
        _sfNumSamples.syncWith(pFrom->_sfNumSamples);

    if(FieldBits::NoField != (MipmapLevelFieldMask & whichField))
        _sfMipmapLevel.syncWith(pFrom->_sfMipmapLevel);
}
#endif


inline
const Char8 *HDR2StageBase::getClassname(void)
{
    return "HDR2Stage";
}
OSG_GEN_CONTAINERPTR(HDR2Stage);

OSG_END_NAMESPACE

