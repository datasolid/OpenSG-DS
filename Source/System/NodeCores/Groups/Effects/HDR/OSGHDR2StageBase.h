/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class HDR2Stage
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGHDR2STAGEBASE_H_
#define _OSGHDR2STAGEBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGEffectGroupsDef.h"

//#include "OSGBaseTypes.h"

#include "OSGStage.h" // Parent

#include "OSGSysFields.h"               // Activate type
#include "OSGBaseFields.h"              // FilterColor type

#include "OSGHDR2StageFields.h"

OSG_BEGIN_NAMESPACE


class HDR2Stage;

//! \brief HDR2Stage Base Class.

class OSG_EFFECTGROUPS_DLLMAPPING HDR2StageBase : public Stage
{
  public:

    typedef Stage Inherited;
    typedef Stage ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(HDR2Stage);

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        ActivateFieldId = Inherited::NextFieldId,
        ApplyGammaFieldId = ActivateFieldId + 1,
        AccurateGammaFieldId = ApplyGammaFieldId + 1,
        GammaFieldId = AccurateGammaFieldId + 1,
        AdjustLuminanceFieldId = GammaFieldId + 1,
        TauFieldId = AdjustLuminanceFieldId + 1,
        PerformBloomFieldId = TauFieldId + 1,
        BloomThresholdFieldId = PerformBloomFieldId + 1,
        BloomBackgroundFieldId = BloomThresholdFieldId + 1,
        BloomMagnitudeFieldId = BloomBackgroundFieldId + 1,
        NumTapsFieldId = BloomMagnitudeFieldId + 1,
        BlurGaussSigmaFieldId = NumTapsFieldId + 1,
        ToneMappingModeFieldId = BlurGaussSigmaFieldId + 1,
        ForceBackgroundFieldId = ToneMappingModeFieldId + 1,
        Use_ITU_R_BT_709FieldId = ForceBackgroundFieldId + 1,
        AutoExposureModeFieldId = Use_ITU_R_BT_709FieldId + 1,
        ExposureFieldId = AutoExposureModeFieldId + 1,
        KeyValueFieldId = ExposureFieldId + 1,
        ApertureFNumberFieldId = KeyValueFieldId + 1,
        ShutterSpeedFieldId = ApertureFNumberFieldId + 1,
        ISOFieldId = ShutterSpeedFieldId + 1,
        WhiteLevelFieldId = ISOFieldId + 1,
        SaturationFieldId = WhiteLevelFieldId + 1,
        UseLinChromCorrectionFieldId = SaturationFieldId + 1,
        FilterColorFieldId = UseLinChromCorrectionFieldId + 1,
        ContrastFieldId = FilterColorFieldId + 1,
        ShadowLiftColorFieldId = ContrastFieldId + 1,
        MidToneGammaColorFieldId = ShadowLiftColorFieldId + 1,
        HighlightGainColorFieldId = MidToneGammaColorFieldId + 1,
        FilmicCurveParametersFieldId = HighlightGainColorFieldId + 1,
        DragoBiasFieldId = FilmicCurveParametersFieldId + 1,
        TargetFieldId = DragoBiasFieldId + 1,
        PerformDitheringFieldId = TargetFieldId + 1,
        CarryDepthFieldId = PerformDitheringFieldId + 1,
        ColorBufferInternalFormatFieldId = CarryDepthFieldId + 1,
        ColorBufferPixelFormatFieldId = ColorBufferInternalFormatFieldId + 1,
        ColorBufferTypeFieldId = ColorBufferPixelFormatFieldId + 1,
        DepthBufferInternalFormatFieldId = ColorBufferTypeFieldId + 1,
        DepthBufferPixelFormatFieldId = DepthBufferInternalFormatFieldId + 1,
        DepthBufferTypeFieldId = DepthBufferPixelFormatFieldId + 1,
        LumBufferInternalFormatFieldId = DepthBufferTypeFieldId + 1,
        LumBufferPixelFormatFieldId = LumBufferInternalFormatFieldId + 1,
        LumBufferTypeFieldId = LumBufferPixelFormatFieldId + 1,
        ImageBufferInternalFormatFieldId = LumBufferTypeFieldId + 1,
        ImageBufferPixelFormatFieldId = ImageBufferInternalFormatFieldId + 1,
        ImageBufferTypeFieldId = ImageBufferPixelFormatFieldId + 1,
        NumSamplesFieldId = ImageBufferTypeFieldId + 1,
        MipmapLevelFieldId = NumSamplesFieldId + 1,
        NextFieldId = MipmapLevelFieldId + 1
    };

    static const OSG::BitVector ActivateFieldMask =
        (TypeTraits<BitVector>::One << ActivateFieldId);
    static const OSG::BitVector ApplyGammaFieldMask =
        (TypeTraits<BitVector>::One << ApplyGammaFieldId);
    static const OSG::BitVector AccurateGammaFieldMask =
        (TypeTraits<BitVector>::One << AccurateGammaFieldId);
    static const OSG::BitVector GammaFieldMask =
        (TypeTraits<BitVector>::One << GammaFieldId);
    static const OSG::BitVector AdjustLuminanceFieldMask =
        (TypeTraits<BitVector>::One << AdjustLuminanceFieldId);
    static const OSG::BitVector TauFieldMask =
        (TypeTraits<BitVector>::One << TauFieldId);
    static const OSG::BitVector PerformBloomFieldMask =
        (TypeTraits<BitVector>::One << PerformBloomFieldId);
    static const OSG::BitVector BloomThresholdFieldMask =
        (TypeTraits<BitVector>::One << BloomThresholdFieldId);
    static const OSG::BitVector BloomBackgroundFieldMask =
        (TypeTraits<BitVector>::One << BloomBackgroundFieldId);
    static const OSG::BitVector BloomMagnitudeFieldMask =
        (TypeTraits<BitVector>::One << BloomMagnitudeFieldId);
    static const OSG::BitVector NumTapsFieldMask =
        (TypeTraits<BitVector>::One << NumTapsFieldId);
    static const OSG::BitVector BlurGaussSigmaFieldMask =
        (TypeTraits<BitVector>::One << BlurGaussSigmaFieldId);
    static const OSG::BitVector ToneMappingModeFieldMask =
        (TypeTraits<BitVector>::One << ToneMappingModeFieldId);
    static const OSG::BitVector ForceBackgroundFieldMask =
        (TypeTraits<BitVector>::One << ForceBackgroundFieldId);
    static const OSG::BitVector Use_ITU_R_BT_709FieldMask =
        (TypeTraits<BitVector>::One << Use_ITU_R_BT_709FieldId);
    static const OSG::BitVector AutoExposureModeFieldMask =
        (TypeTraits<BitVector>::One << AutoExposureModeFieldId);
    static const OSG::BitVector ExposureFieldMask =
        (TypeTraits<BitVector>::One << ExposureFieldId);
    static const OSG::BitVector KeyValueFieldMask =
        (TypeTraits<BitVector>::One << KeyValueFieldId);
    static const OSG::BitVector ApertureFNumberFieldMask =
        (TypeTraits<BitVector>::One << ApertureFNumberFieldId);
    static const OSG::BitVector ShutterSpeedFieldMask =
        (TypeTraits<BitVector>::One << ShutterSpeedFieldId);
    static const OSG::BitVector ISOFieldMask =
        (TypeTraits<BitVector>::One << ISOFieldId);
    static const OSG::BitVector WhiteLevelFieldMask =
        (TypeTraits<BitVector>::One << WhiteLevelFieldId);
    static const OSG::BitVector SaturationFieldMask =
        (TypeTraits<BitVector>::One << SaturationFieldId);
    static const OSG::BitVector UseLinChromCorrectionFieldMask =
        (TypeTraits<BitVector>::One << UseLinChromCorrectionFieldId);
    static const OSG::BitVector FilterColorFieldMask =
        (TypeTraits<BitVector>::One << FilterColorFieldId);
    static const OSG::BitVector ContrastFieldMask =
        (TypeTraits<BitVector>::One << ContrastFieldId);
    static const OSG::BitVector ShadowLiftColorFieldMask =
        (TypeTraits<BitVector>::One << ShadowLiftColorFieldId);
    static const OSG::BitVector MidToneGammaColorFieldMask =
        (TypeTraits<BitVector>::One << MidToneGammaColorFieldId);
    static const OSG::BitVector HighlightGainColorFieldMask =
        (TypeTraits<BitVector>::One << HighlightGainColorFieldId);
    static const OSG::BitVector FilmicCurveParametersFieldMask =
        (TypeTraits<BitVector>::One << FilmicCurveParametersFieldId);
    static const OSG::BitVector DragoBiasFieldMask =
        (TypeTraits<BitVector>::One << DragoBiasFieldId);
    static const OSG::BitVector TargetFieldMask =
        (TypeTraits<BitVector>::One << TargetFieldId);
    static const OSG::BitVector PerformDitheringFieldMask =
        (TypeTraits<BitVector>::One << PerformDitheringFieldId);
    static const OSG::BitVector CarryDepthFieldMask =
        (TypeTraits<BitVector>::One << CarryDepthFieldId);
    static const OSG::BitVector ColorBufferInternalFormatFieldMask =
        (TypeTraits<BitVector>::One << ColorBufferInternalFormatFieldId);
    static const OSG::BitVector ColorBufferPixelFormatFieldMask =
        (TypeTraits<BitVector>::One << ColorBufferPixelFormatFieldId);
    static const OSG::BitVector ColorBufferTypeFieldMask =
        (TypeTraits<BitVector>::One << ColorBufferTypeFieldId);
    static const OSG::BitVector DepthBufferInternalFormatFieldMask =
        (TypeTraits<BitVector>::One << DepthBufferInternalFormatFieldId);
    static const OSG::BitVector DepthBufferPixelFormatFieldMask =
        (TypeTraits<BitVector>::One << DepthBufferPixelFormatFieldId);
    static const OSG::BitVector DepthBufferTypeFieldMask =
        (TypeTraits<BitVector>::One << DepthBufferTypeFieldId);
    static const OSG::BitVector LumBufferInternalFormatFieldMask =
        (TypeTraits<BitVector>::One << LumBufferInternalFormatFieldId);
    static const OSG::BitVector LumBufferPixelFormatFieldMask =
        (TypeTraits<BitVector>::One << LumBufferPixelFormatFieldId);
    static const OSG::BitVector LumBufferTypeFieldMask =
        (TypeTraits<BitVector>::One << LumBufferTypeFieldId);
    static const OSG::BitVector ImageBufferInternalFormatFieldMask =
        (TypeTraits<BitVector>::One << ImageBufferInternalFormatFieldId);
    static const OSG::BitVector ImageBufferPixelFormatFieldMask =
        (TypeTraits<BitVector>::One << ImageBufferPixelFormatFieldId);
    static const OSG::BitVector ImageBufferTypeFieldMask =
        (TypeTraits<BitVector>::One << ImageBufferTypeFieldId);
    static const OSG::BitVector NumSamplesFieldMask =
        (TypeTraits<BitVector>::One << NumSamplesFieldId);
    static const OSG::BitVector MipmapLevelFieldMask =
        (TypeTraits<BitVector>::One << MipmapLevelFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFBool            SFActivateType;
    typedef SFBool            SFApplyGammaType;
    typedef SFBool            SFAccurateGammaType;
    typedef SFReal32          SFGammaType;
    typedef SFBool            SFAdjustLuminanceType;
    typedef SFReal32          SFTauType;
    typedef SFBool            SFPerformBloomType;
    typedef SFReal32          SFBloomThresholdType;
    typedef SFBool            SFBloomBackgroundType;
    typedef SFReal32          SFBloomMagnitudeType;
    typedef SFInt32           SFNumTapsType;
    typedef SFReal32          SFBlurGaussSigmaType;
    typedef SFUInt32          SFToneMappingModeType;
    typedef SFBool            SFForceBackgroundType;
    typedef SFBool            SFUse_ITU_R_BT_709Type;
    typedef SFUInt32          SFAutoExposureModeType;
    typedef SFReal32          SFExposureType;
    typedef SFReal32          SFKeyValueType;
    typedef SFReal32          SFApertureFNumberType;
    typedef SFReal32          SFShutterSpeedType;
    typedef SFReal32          SFISOType;
    typedef SFReal32          SFWhiteLevelType;
    typedef SFReal32          SFSaturationType;
    typedef SFBool            SFUseLinChromCorrectionType;
    typedef SFColor3f         SFFilterColorType;
    typedef SFReal32          SFContrastType;
    typedef SFColor3f         SFShadowLiftColorType;
    typedef SFColor3f         SFMidToneGammaColorType;
    typedef SFColor3f         SFHighlightGainColorType;
    typedef MFReal32          MFFilmicCurveParametersType;
    typedef SFReal32          SFDragoBiasType;
    typedef SFUInt32          SFTargetType;
    typedef SFBool            SFPerformDitheringType;
    typedef SFBool            SFCarryDepthType;
    typedef SFGLenum          SFColorBufferInternalFormatType;
    typedef SFGLenum          SFColorBufferPixelFormatType;
    typedef SFGLenum          SFColorBufferTypeType;
    typedef SFGLenum          SFDepthBufferInternalFormatType;
    typedef SFGLenum          SFDepthBufferPixelFormatType;
    typedef SFGLenum          SFDepthBufferTypeType;
    typedef SFGLenum          SFLumBufferInternalFormatType;
    typedef SFGLenum          SFLumBufferPixelFormatType;
    typedef SFGLenum          SFLumBufferTypeType;
    typedef SFGLenum          SFImageBufferInternalFormatType;
    typedef SFGLenum          SFImageBufferPixelFormatType;
    typedef SFGLenum          SFImageBufferTypeType;
    typedef SFInt32           SFNumSamplesType;
    typedef SFInt32           SFMipmapLevelType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  SFBool              *editSFActivate       (void);
            const SFBool              *getSFActivate        (void) const;

                  SFBool              *editSFApplyGamma     (void);
            const SFBool              *getSFApplyGamma      (void) const;

                  SFBool              *editSFAccurateGamma  (void);
            const SFBool              *getSFAccurateGamma   (void) const;

                  SFReal32            *editSFGamma          (void);
            const SFReal32            *getSFGamma           (void) const;

                  SFBool              *editSFAdjustLuminance(void);
            const SFBool              *getSFAdjustLuminance (void) const;

                  SFReal32            *editSFTau            (void);
            const SFReal32            *getSFTau             (void) const;

                  SFBool              *editSFPerformBloom   (void);
            const SFBool              *getSFPerformBloom    (void) const;

                  SFReal32            *editSFBloomThreshold (void);
            const SFReal32            *getSFBloomThreshold  (void) const;

                  SFBool              *editSFBloomBackground(void);
            const SFBool              *getSFBloomBackground (void) const;

                  SFReal32            *editSFBloomMagnitude (void);
            const SFReal32            *getSFBloomMagnitude  (void) const;

                  SFInt32             *editSFNumTaps        (void);
            const SFInt32             *getSFNumTaps         (void) const;

                  SFReal32            *editSFBlurGaussSigma (void);
            const SFReal32            *getSFBlurGaussSigma  (void) const;

                  SFUInt32            *editSFToneMappingMode(void);
            const SFUInt32            *getSFToneMappingMode (void) const;

                  SFBool              *editSFForceBackground(void);
            const SFBool              *getSFForceBackground (void) const;

                  SFBool              *editSFUse_ITU_R_BT_709(void);
            const SFBool              *getSFUse_ITU_R_BT_709 (void) const;

                  SFUInt32            *editSFAutoExposureMode(void);
            const SFUInt32            *getSFAutoExposureMode (void) const;

                  SFReal32            *editSFExposure       (void);
            const SFReal32            *getSFExposure        (void) const;

                  SFReal32            *editSFKeyValue       (void);
            const SFReal32            *getSFKeyValue        (void) const;

                  SFReal32            *editSFApertureFNumber(void);
            const SFReal32            *getSFApertureFNumber (void) const;

                  SFReal32            *editSFShutterSpeed   (void);
            const SFReal32            *getSFShutterSpeed    (void) const;

                  SFReal32            *editSFISO            (void);
            const SFReal32            *getSFISO             (void) const;

                  SFReal32            *editSFWhiteLevel     (void);
            const SFReal32            *getSFWhiteLevel      (void) const;

                  SFReal32            *editSFSaturation     (void);
            const SFReal32            *getSFSaturation      (void) const;

                  SFBool              *editSFUseLinChromCorrection(void);
            const SFBool              *getSFUseLinChromCorrection (void) const;

                  SFColor3f           *editSFFilterColor    (void);
            const SFColor3f           *getSFFilterColor     (void) const;

                  SFReal32            *editSFContrast       (void);
            const SFReal32            *getSFContrast        (void) const;

                  SFColor3f           *editSFShadowLiftColor(void);
            const SFColor3f           *getSFShadowLiftColor (void) const;

                  SFColor3f           *editSFMidToneGammaColor(void);
            const SFColor3f           *getSFMidToneGammaColor (void) const;

                  SFColor3f           *editSFHighlightGainColor(void);
            const SFColor3f           *getSFHighlightGainColor (void) const;

                  SFReal32            *editSFDragoBias      (void);
            const SFReal32            *getSFDragoBias       (void) const;

                  SFUInt32            *editSFTarget         (void);
            const SFUInt32            *getSFTarget          (void) const;

                  SFBool              *editSFPerformDithering(void);
            const SFBool              *getSFPerformDithering (void) const;

                  SFBool              *editSFCarryDepth     (void);
            const SFBool              *getSFCarryDepth      (void) const;

                  SFGLenum            *editSFColorBufferInternalFormat(void);
            const SFGLenum            *getSFColorBufferInternalFormat (void) const;

                  SFGLenum            *editSFColorBufferPixelFormat(void);
            const SFGLenum            *getSFColorBufferPixelFormat (void) const;

                  SFGLenum            *editSFColorBufferType(void);
            const SFGLenum            *getSFColorBufferType (void) const;

                  SFGLenum            *editSFDepthBufferInternalFormat(void);
            const SFGLenum            *getSFDepthBufferInternalFormat (void) const;

                  SFGLenum            *editSFDepthBufferPixelFormat(void);
            const SFGLenum            *getSFDepthBufferPixelFormat (void) const;

                  SFGLenum            *editSFDepthBufferType(void);
            const SFGLenum            *getSFDepthBufferType (void) const;

                  SFGLenum            *editSFLumBufferInternalFormat(void);
            const SFGLenum            *getSFLumBufferInternalFormat (void) const;

                  SFGLenum            *editSFLumBufferPixelFormat(void);
            const SFGLenum            *getSFLumBufferPixelFormat (void) const;

                  SFGLenum            *editSFLumBufferType  (void);
            const SFGLenum            *getSFLumBufferType   (void) const;

                  SFGLenum            *editSFImageBufferInternalFormat(void);
            const SFGLenum            *getSFImageBufferInternalFormat (void) const;

                  SFGLenum            *editSFImageBufferPixelFormat(void);
            const SFGLenum            *getSFImageBufferPixelFormat (void) const;

                  SFGLenum            *editSFImageBufferType(void);
            const SFGLenum            *getSFImageBufferType (void) const;

                  SFInt32             *editSFNumSamples     (void);
            const SFInt32             *getSFNumSamples      (void) const;

                  SFInt32             *editSFMipmapLevel    (void);
            const SFInt32             *getSFMipmapLevel     (void) const;


                  bool                &editActivate       (void);
                  bool                 getActivate        (void) const;

                  bool                &editApplyGamma     (void);
                  bool                 getApplyGamma      (void) const;

                  bool                &editAccurateGamma  (void);
                  bool                 getAccurateGamma   (void) const;

                  Real32              &editGamma          (void);
                  Real32               getGamma           (void) const;

                  bool                &editAdjustLuminance(void);
                  bool                 getAdjustLuminance (void) const;

                  Real32              &editTau            (void);
                  Real32               getTau             (void) const;

                  bool                &editPerformBloom   (void);
                  bool                 getPerformBloom    (void) const;

                  Real32              &editBloomThreshold (void);
                  Real32               getBloomThreshold  (void) const;

                  bool                &editBloomBackground(void);
                  bool                 getBloomBackground (void) const;

                  Real32              &editBloomMagnitude (void);
                  Real32               getBloomMagnitude  (void) const;

                  Int32               &editNumTaps        (void);
                  Int32                getNumTaps         (void) const;

                  Real32              &editBlurGaussSigma (void);
                  Real32               getBlurGaussSigma  (void) const;

                  UInt32              &editToneMappingMode(void);
                  UInt32               getToneMappingMode (void) const;

                  bool                &editForceBackground(void);
                  bool                 getForceBackground (void) const;

                  bool                &editUse_ITU_R_BT_709(void);
                  bool                 getUse_ITU_R_BT_709 (void) const;

                  UInt32              &editAutoExposureMode(void);
                  UInt32               getAutoExposureMode (void) const;

                  Real32              &editExposure       (void);
                  Real32               getExposure        (void) const;

                  Real32              &editKeyValue       (void);
                  Real32               getKeyValue        (void) const;

                  Real32              &editApertureFNumber(void);
                  Real32               getApertureFNumber (void) const;

                  Real32              &editShutterSpeed   (void);
                  Real32               getShutterSpeed    (void) const;

                  Real32              &editISO            (void);
                  Real32               getISO             (void) const;

                  Real32              &editWhiteLevel     (void);
                  Real32               getWhiteLevel      (void) const;

                  Real32              &editSaturation     (void);
                  Real32               getSaturation      (void) const;

                  bool                &editUseLinChromCorrection(void);
                  bool                 getUseLinChromCorrection (void) const;

                  Color3f             &editFilterColor    (void);
            const Color3f             &getFilterColor     (void) const;

                  Real32              &editContrast       (void);
                  Real32               getContrast        (void) const;

                  Color3f             &editShadowLiftColor(void);
            const Color3f             &getShadowLiftColor (void) const;

                  Color3f             &editMidToneGammaColor(void);
            const Color3f             &getMidToneGammaColor (void) const;

                  Color3f             &editHighlightGainColor(void);
            const Color3f             &getHighlightGainColor (void) const;

                  Real32              &editDragoBias      (void);
                  Real32               getDragoBias       (void) const;

                  UInt32              &editTarget         (void);
                  UInt32               getTarget          (void) const;

                  bool                &editPerformDithering(void);
                  bool                 getPerformDithering (void) const;

                  bool                &editCarryDepth     (void);
                  bool                 getCarryDepth      (void) const;

                  GLenum              &editColorBufferInternalFormat(void);
            const GLenum              &getColorBufferInternalFormat (void) const;

                  GLenum              &editColorBufferPixelFormat(void);
            const GLenum              &getColorBufferPixelFormat (void) const;

                  GLenum              &editColorBufferType(void);
            const GLenum              &getColorBufferType (void) const;

                  GLenum              &editDepthBufferInternalFormat(void);
            const GLenum              &getDepthBufferInternalFormat (void) const;

                  GLenum              &editDepthBufferPixelFormat(void);
            const GLenum              &getDepthBufferPixelFormat (void) const;

                  GLenum              &editDepthBufferType(void);
            const GLenum              &getDepthBufferType (void) const;

                  GLenum              &editLumBufferInternalFormat(void);
            const GLenum              &getLumBufferInternalFormat (void) const;

                  GLenum              &editLumBufferPixelFormat(void);
            const GLenum              &getLumBufferPixelFormat (void) const;

                  GLenum              &editLumBufferType  (void);
            const GLenum              &getLumBufferType   (void) const;

                  GLenum              &editImageBufferInternalFormat(void);
            const GLenum              &getImageBufferInternalFormat (void) const;

                  GLenum              &editImageBufferPixelFormat(void);
            const GLenum              &getImageBufferPixelFormat (void) const;

                  GLenum              &editImageBufferType(void);
            const GLenum              &getImageBufferType (void) const;

                  Int32               &editNumSamples     (void);
                  Int32                getNumSamples      (void) const;

                  Int32               &editMipmapLevel    (void);
                  Int32                getMipmapLevel     (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setActivate       (const bool value);
            void setApplyGamma     (const bool value);
            void setAccurateGamma  (const bool value);
            void setGamma          (const Real32 value);
            void setAdjustLuminance(const bool value);
            void setTau            (const Real32 value);
            void setPerformBloom   (const bool value);
            void setBloomThreshold (const Real32 value);
            void setBloomBackground(const bool value);
            void setBloomMagnitude (const Real32 value);
            void setNumTaps        (const Int32 value);
            void setBlurGaussSigma (const Real32 value);
            void setToneMappingMode(const UInt32 value);
            void setForceBackground(const bool value);
            void setUse_ITU_R_BT_709(const bool value);
            void setAutoExposureMode(const UInt32 value);
            void setExposure       (const Real32 value);
            void setKeyValue       (const Real32 value);
            void setApertureFNumber(const Real32 value);
            void setShutterSpeed   (const Real32 value);
            void setISO            (const Real32 value);
            void setWhiteLevel     (const Real32 value);
            void setSaturation     (const Real32 value);
            void setUseLinChromCorrection(const bool value);
            void setFilterColor    (const Color3f &value);
            void setContrast       (const Real32 value);
            void setShadowLiftColor(const Color3f &value);
            void setMidToneGammaColor(const Color3f &value);
            void setHighlightGainColor(const Color3f &value);
            void setDragoBias      (const Real32 value);
            void setTarget         (const UInt32 value);
            void setPerformDithering(const bool value);
            void setCarryDepth     (const bool value);
            void setColorBufferInternalFormat(const GLenum &value);
            void setColorBufferPixelFormat(const GLenum &value);
            void setColorBufferType(const GLenum &value);
            void setDepthBufferInternalFormat(const GLenum &value);
            void setDepthBufferPixelFormat(const GLenum &value);
            void setDepthBufferType(const GLenum &value);
            void setLumBufferInternalFormat(const GLenum &value);
            void setLumBufferPixelFormat(const GLenum &value);
            void setLumBufferType  (const GLenum &value);
            void setImageBufferInternalFormat(const GLenum &value);
            void setImageBufferPixelFormat(const GLenum &value);
            void setImageBufferType(const GLenum &value);
            void setNumSamples     (const Int32 value);
            void setMipmapLevel    (const Int32 value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual SizeT  getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  HDR2StageTransitPtr  create          (void);
    static  HDR2Stage           *createEmpty     (void);

    static  HDR2StageTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  HDR2Stage            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  HDR2StageTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFBool            _sfActivate;
    SFBool            _sfApplyGamma;
    SFBool            _sfAccurateGamma;
    SFReal32          _sfGamma;
    SFBool            _sfAdjustLuminance;
    SFReal32          _sfTau;
    SFBool            _sfPerformBloom;
    SFReal32          _sfBloomThreshold;
    SFBool            _sfBloomBackground;
    SFReal32          _sfBloomMagnitude;
    SFInt32           _sfNumTaps;
    SFReal32          _sfBlurGaussSigma;
    SFUInt32          _sfToneMappingMode;
    SFBool            _sfForceBackground;
    SFBool            _sfUse_ITU_R_BT_709;
    SFUInt32          _sfAutoExposureMode;
    SFReal32          _sfExposure;
    SFReal32          _sfKeyValue;
    SFReal32          _sfApertureFNumber;
    SFReal32          _sfShutterSpeed;
    SFReal32          _sfISO;
    SFReal32          _sfWhiteLevel;
    SFReal32          _sfSaturation;
    SFBool            _sfUseLinChromCorrection;
    SFColor3f         _sfFilterColor;
    SFReal32          _sfContrast;
    SFColor3f         _sfShadowLiftColor;
    SFColor3f         _sfMidToneGammaColor;
    SFColor3f         _sfHighlightGainColor;
    MFReal32          _mfFilmicCurveParameters;
    SFReal32          _sfDragoBias;
    SFUInt32          _sfTarget;
    SFBool            _sfPerformDithering;
    SFBool            _sfCarryDepth;
    SFGLenum          _sfColorBufferInternalFormat;
    SFGLenum          _sfColorBufferPixelFormat;
    SFGLenum          _sfColorBufferType;
    SFGLenum          _sfDepthBufferInternalFormat;
    SFGLenum          _sfDepthBufferPixelFormat;
    SFGLenum          _sfDepthBufferType;
    SFGLenum          _sfLumBufferInternalFormat;
    SFGLenum          _sfLumBufferPixelFormat;
    SFGLenum          _sfLumBufferType;
    SFGLenum          _sfImageBufferInternalFormat;
    SFGLenum          _sfImageBufferPixelFormat;
    SFGLenum          _sfImageBufferType;
    SFInt32           _sfNumSamples;
    SFInt32           _sfMipmapLevel;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    HDR2StageBase(void);
    HDR2StageBase(const HDR2StageBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~HDR2StageBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

     GetFieldHandlePtr  getHandleActivate        (void) const;
     EditFieldHandlePtr editHandleActivate       (void);
     GetFieldHandlePtr  getHandleApplyGamma      (void) const;
     EditFieldHandlePtr editHandleApplyGamma     (void);
     GetFieldHandlePtr  getHandleAccurateGamma   (void) const;
     EditFieldHandlePtr editHandleAccurateGamma  (void);
     GetFieldHandlePtr  getHandleGamma           (void) const;
     EditFieldHandlePtr editHandleGamma          (void);
     GetFieldHandlePtr  getHandleAdjustLuminance (void) const;
     EditFieldHandlePtr editHandleAdjustLuminance(void);
     GetFieldHandlePtr  getHandleTau             (void) const;
     EditFieldHandlePtr editHandleTau            (void);
     GetFieldHandlePtr  getHandlePerformBloom    (void) const;
     EditFieldHandlePtr editHandlePerformBloom   (void);
     GetFieldHandlePtr  getHandleBloomThreshold  (void) const;
     EditFieldHandlePtr editHandleBloomThreshold (void);
     GetFieldHandlePtr  getHandleBloomBackground (void) const;
     EditFieldHandlePtr editHandleBloomBackground(void);
     GetFieldHandlePtr  getHandleBloomMagnitude  (void) const;
     EditFieldHandlePtr editHandleBloomMagnitude (void);
     GetFieldHandlePtr  getHandleNumTaps         (void) const;
     EditFieldHandlePtr editHandleNumTaps        (void);
     GetFieldHandlePtr  getHandleBlurGaussSigma  (void) const;
     EditFieldHandlePtr editHandleBlurGaussSigma (void);
     GetFieldHandlePtr  getHandleToneMappingMode (void) const;
     EditFieldHandlePtr editHandleToneMappingMode(void);
     GetFieldHandlePtr  getHandleForceBackground (void) const;
     EditFieldHandlePtr editHandleForceBackground(void);
     GetFieldHandlePtr  getHandleUse_ITU_R_BT_709 (void) const;
     EditFieldHandlePtr editHandleUse_ITU_R_BT_709(void);
     GetFieldHandlePtr  getHandleAutoExposureMode (void) const;
     EditFieldHandlePtr editHandleAutoExposureMode(void);
     GetFieldHandlePtr  getHandleExposure        (void) const;
     EditFieldHandlePtr editHandleExposure       (void);
     GetFieldHandlePtr  getHandleKeyValue        (void) const;
     EditFieldHandlePtr editHandleKeyValue       (void);
     GetFieldHandlePtr  getHandleApertureFNumber (void) const;
     EditFieldHandlePtr editHandleApertureFNumber(void);
     GetFieldHandlePtr  getHandleShutterSpeed    (void) const;
     EditFieldHandlePtr editHandleShutterSpeed   (void);
     GetFieldHandlePtr  getHandleISO             (void) const;
     EditFieldHandlePtr editHandleISO            (void);
     GetFieldHandlePtr  getHandleWhiteLevel      (void) const;
     EditFieldHandlePtr editHandleWhiteLevel     (void);
     GetFieldHandlePtr  getHandleSaturation      (void) const;
     EditFieldHandlePtr editHandleSaturation     (void);
     GetFieldHandlePtr  getHandleUseLinChromCorrection (void) const;
     EditFieldHandlePtr editHandleUseLinChromCorrection(void);
     GetFieldHandlePtr  getHandleFilterColor     (void) const;
     EditFieldHandlePtr editHandleFilterColor    (void);
     GetFieldHandlePtr  getHandleContrast        (void) const;
     EditFieldHandlePtr editHandleContrast       (void);
     GetFieldHandlePtr  getHandleShadowLiftColor (void) const;
     EditFieldHandlePtr editHandleShadowLiftColor(void);
     GetFieldHandlePtr  getHandleMidToneGammaColor (void) const;
     EditFieldHandlePtr editHandleMidToneGammaColor(void);
     GetFieldHandlePtr  getHandleHighlightGainColor (void) const;
     EditFieldHandlePtr editHandleHighlightGainColor(void);
     GetFieldHandlePtr  getHandleFilmicCurveParameters (void) const;
     EditFieldHandlePtr editHandleFilmicCurveParameters(void);
     GetFieldHandlePtr  getHandleDragoBias       (void) const;
     EditFieldHandlePtr editHandleDragoBias      (void);
     GetFieldHandlePtr  getHandleTarget          (void) const;
     EditFieldHandlePtr editHandleTarget         (void);
     GetFieldHandlePtr  getHandlePerformDithering (void) const;
     EditFieldHandlePtr editHandlePerformDithering(void);
     GetFieldHandlePtr  getHandleCarryDepth      (void) const;
     EditFieldHandlePtr editHandleCarryDepth     (void);
     GetFieldHandlePtr  getHandleColorBufferInternalFormat (void) const;
     EditFieldHandlePtr editHandleColorBufferInternalFormat(void);
     GetFieldHandlePtr  getHandleColorBufferPixelFormat (void) const;
     EditFieldHandlePtr editHandleColorBufferPixelFormat(void);
     GetFieldHandlePtr  getHandleColorBufferType (void) const;
     EditFieldHandlePtr editHandleColorBufferType(void);
     GetFieldHandlePtr  getHandleDepthBufferInternalFormat (void) const;
     EditFieldHandlePtr editHandleDepthBufferInternalFormat(void);
     GetFieldHandlePtr  getHandleDepthBufferPixelFormat (void) const;
     EditFieldHandlePtr editHandleDepthBufferPixelFormat(void);
     GetFieldHandlePtr  getHandleDepthBufferType (void) const;
     EditFieldHandlePtr editHandleDepthBufferType(void);
     GetFieldHandlePtr  getHandleLumBufferInternalFormat (void) const;
     EditFieldHandlePtr editHandleLumBufferInternalFormat(void);
     GetFieldHandlePtr  getHandleLumBufferPixelFormat (void) const;
     EditFieldHandlePtr editHandleLumBufferPixelFormat(void);
     GetFieldHandlePtr  getHandleLumBufferType   (void) const;
     EditFieldHandlePtr editHandleLumBufferType  (void);
     GetFieldHandlePtr  getHandleImageBufferInternalFormat (void) const;
     EditFieldHandlePtr editHandleImageBufferInternalFormat(void);
     GetFieldHandlePtr  getHandleImageBufferPixelFormat (void) const;
     EditFieldHandlePtr editHandleImageBufferPixelFormat(void);
     GetFieldHandlePtr  getHandleImageBufferType (void) const;
     EditFieldHandlePtr editHandleImageBufferType(void);
     GetFieldHandlePtr  getHandleNumSamples      (void) const;
     EditFieldHandlePtr editHandleNumSamples     (void);
     GetFieldHandlePtr  getHandleMipmapLevel     (void) const;
     EditFieldHandlePtr editHandleMipmapLevel    (void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  MFReal32            *editMFFilmicCurveParameters(void);
            const MFReal32            *getMFFilmicCurveParameters (void) const;


                  MFReal32           ::reference editFilmicCurveParameters(const UInt32 index);
                  Real32               getFilmicCurveParameters (const UInt32 index) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      HDR2StageBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const HDR2StageBase &source);
};

typedef HDR2StageBase *HDR2StageBaseP;

typedef CoredNodeRefPtr  <HDR2Stage> HDR2StageNodeRefPtr;
typedef CoredNodeMTRefPtr<HDR2Stage> HDR2StageNodeMTRefPtr;

OSG_END_NAMESPACE

#endif /* _OSGHDR2STAGEBASE_H_ */
