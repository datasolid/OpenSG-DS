/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class HDR2StageData!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE



//! access the type of the class
inline
OSG::FieldContainerType &HDR2StageDataBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 HDR2StageDataBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 HDR2StageDataBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/

//! Get the value of the HDR2StageData::_sfCurrentAdaptLuminanceIdx field.

inline
UInt32 &HDR2StageDataBase::editCurrentAdaptLuminanceIdx(void)
{
    editSField(CurrentAdaptLuminanceIdxFieldMask);

    return _sfCurrentAdaptLuminanceIdx.getValue();
}

//! Get the value of the HDR2StageData::_sfCurrentAdaptLuminanceIdx field.
inline
      UInt32  HDR2StageDataBase::getCurrentAdaptLuminanceIdx(void) const
{
    return _sfCurrentAdaptLuminanceIdx.getValue();
}

//! Set the value of the HDR2StageData::_sfCurrentAdaptLuminanceIdx field.
inline
void HDR2StageDataBase::setCurrentAdaptLuminanceIdx(const UInt32 value)
{
    editSField(CurrentAdaptLuminanceIdxFieldMask);

    _sfCurrentAdaptLuminanceIdx.setValue(value);
}
//! Get the value of the HDR2StageData::_sfWidth field.

inline
Int32 &HDR2StageDataBase::editWidth(void)
{
    editSField(WidthFieldMask);

    return _sfWidth.getValue();
}

//! Get the value of the HDR2StageData::_sfWidth field.
inline
      Int32  HDR2StageDataBase::getWidth(void) const
{
    return _sfWidth.getValue();
}

//! Set the value of the HDR2StageData::_sfWidth field.
inline
void HDR2StageDataBase::setWidth(const Int32 value)
{
    editSField(WidthFieldMask);

    _sfWidth.setValue(value);
}
//! Get the value of the HDR2StageData::_sfHeight field.

inline
Int32 &HDR2StageDataBase::editHeight(void)
{
    editSField(HeightFieldMask);

    return _sfHeight.getValue();
}

//! Get the value of the HDR2StageData::_sfHeight field.
inline
      Int32  HDR2StageDataBase::getHeight(void) const
{
    return _sfHeight.getValue();
}

//! Set the value of the HDR2StageData::_sfHeight field.
inline
void HDR2StageDataBase::setHeight(const Int32 value)
{
    editSField(HeightFieldMask);

    _sfHeight.setValue(value);
}
//! Get the value of the HDR2StageData::_sfLastTime field.

inline
Real64 &HDR2StageDataBase::editLastTime(void)
{
    editSField(LastTimeFieldMask);

    return _sfLastTime.getValue();
}

//! Get the value of the HDR2StageData::_sfLastTime field.
inline
      Real64  HDR2StageDataBase::getLastTime(void) const
{
    return _sfLastTime.getValue();
}

//! Set the value of the HDR2StageData::_sfLastTime field.
inline
void HDR2StageDataBase::setLastTime(const Real64 value)
{
    editSField(LastTimeFieldMask);

    _sfLastTime.setValue(value);
}
//! Get the value of the HDR2StageData::_sfCurrentTime field.

inline
Real64 &HDR2StageDataBase::editCurrentTime(void)
{
    editSField(CurrentTimeFieldMask);

    return _sfCurrentTime.getValue();
}

//! Get the value of the HDR2StageData::_sfCurrentTime field.
inline
      Real64  HDR2StageDataBase::getCurrentTime(void) const
{
    return _sfCurrentTime.getValue();
}

//! Set the value of the HDR2StageData::_sfCurrentTime field.
inline
void HDR2StageDataBase::setCurrentTime(const Real64 value)
{
    editSField(CurrentTimeFieldMask);

    _sfCurrentTime.setValue(value);
}
//! Get the value of the HDR2StageData::_sfZNear field.

inline
Real32 &HDR2StageDataBase::editZNear(void)
{
    editSField(ZNearFieldMask);

    return _sfZNear.getValue();
}

//! Get the value of the HDR2StageData::_sfZNear field.
inline
      Real32  HDR2StageDataBase::getZNear(void) const
{
    return _sfZNear.getValue();
}

//! Set the value of the HDR2StageData::_sfZNear field.
inline
void HDR2StageDataBase::setZNear(const Real32 value)
{
    editSField(ZNearFieldMask);

    _sfZNear.setValue(value);
}
//! Get the value of the HDR2StageData::_sfZFar field.

inline
Real32 &HDR2StageDataBase::editZFar(void)
{
    editSField(ZFarFieldMask);

    return _sfZFar.getValue();
}

//! Get the value of the HDR2StageData::_sfZFar field.
inline
      Real32  HDR2StageDataBase::getZFar(void) const
{
    return _sfZFar.getValue();
}

//! Set the value of the HDR2StageData::_sfZFar field.
inline
void HDR2StageDataBase::setZFar(const Real32 value)
{
    editSField(ZFarFieldMask);

    _sfZFar.setValue(value);
}





#ifdef OSG_MT_CPTR_ASPECT
inline
void HDR2StageDataBase::execSync (      HDR2StageDataBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (LuminanceMapShaderFieldMask & whichField))
        _sfLuminanceMapShader.syncWith(pFrom->_sfLuminanceMapShader);

    if(FieldBits::NoField != (AdaptLuminanceShaderFieldMask & whichField))
        _sfAdaptLuminanceShader.syncWith(pFrom->_sfAdaptLuminanceShader);

    if(FieldBits::NoField != (ThresholdShaderFieldMask & whichField))
        _sfThresholdShader.syncWith(pFrom->_sfThresholdShader);

    if(FieldBits::NoField != (ScaleShaderFieldMask & whichField))
        _sfScaleShader.syncWith(pFrom->_sfScaleShader);

    if(FieldBits::NoField != (BlurHorizShaderFieldMask & whichField))
        _sfBlurHorizShader.syncWith(pFrom->_sfBlurHorizShader);

    if(FieldBits::NoField != (BlurVertShaderFieldMask & whichField))
        _sfBlurVertShader.syncWith(pFrom->_sfBlurVertShader);

    if(FieldBits::NoField != (CompositeShaderFieldMask & whichField))
        _sfCompositeShader.syncWith(pFrom->_sfCompositeShader);

    if(FieldBits::NoField != (FinalScreenShaderFieldMask & whichField))
        _sfFinalScreenShader.syncWith(pFrom->_sfFinalScreenShader);

    if(FieldBits::NoField != (SharedMaterialChunkFieldMask & whichField))
        _sfSharedMaterialChunk.syncWith(pFrom->_sfSharedMaterialChunk);

    if(FieldBits::NoField != (BackgroundMaterialFieldMask & whichField))
        _sfBackgroundMaterial.syncWith(pFrom->_sfBackgroundMaterial);

    if(FieldBits::NoField != (SceneMaterialFieldMask & whichField))
        _sfSceneMaterial.syncWith(pFrom->_sfSceneMaterial);

    if(FieldBits::NoField != (LuminanceMapMaterialFieldMask & whichField))
        _sfLuminanceMapMaterial.syncWith(pFrom->_sfLuminanceMapMaterial);

    if(FieldBits::NoField != (AdaptLuminanceMaterialFieldMask & whichField))
        _sfAdaptLuminanceMaterial.syncWith(pFrom->_sfAdaptLuminanceMaterial);

    if(FieldBits::NoField != (ThresholdMaterialFieldMask & whichField))
        _sfThresholdMaterial.syncWith(pFrom->_sfThresholdMaterial);

    if(FieldBits::NoField != (ScaleMaterialFieldMask & whichField))
        _mfScaleMaterial.syncWith(pFrom->_mfScaleMaterial,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (BlurHorizMaterialFieldMask & whichField))
        _sfBlurHorizMaterial.syncWith(pFrom->_sfBlurHorizMaterial);

    if(FieldBits::NoField != (BlurVertMaterialFieldMask & whichField))
        _sfBlurVertMaterial.syncWith(pFrom->_sfBlurVertMaterial);

    if(FieldBits::NoField != (CompositeMaterialFieldMask & whichField))
        _sfCompositeMaterial.syncWith(pFrom->_sfCompositeMaterial);

    if(FieldBits::NoField != (FinalScreenMaterialFieldMask & whichField))
        _sfFinalScreenMaterial.syncWith(pFrom->_sfFinalScreenMaterial);

    if(FieldBits::NoField != (CurrentAdaptLuminanceIdxFieldMask & whichField))
        _sfCurrentAdaptLuminanceIdx.syncWith(pFrom->_sfCurrentAdaptLuminanceIdx);

    if(FieldBits::NoField != (FinalScreenMaterialDepthChunkFieldMask & whichField))
        _sfFinalScreenMaterialDepthChunk.syncWith(pFrom->_sfFinalScreenMaterialDepthChunk);

    if(FieldBits::NoField != (WidthFieldMask & whichField))
        _sfWidth.syncWith(pFrom->_sfWidth);

    if(FieldBits::NoField != (HeightFieldMask & whichField))
        _sfHeight.syncWith(pFrom->_sfHeight);

    if(FieldBits::NoField != (BackgroundRenderTargetFieldMask & whichField))
        _sfBackgroundRenderTarget.syncWith(pFrom->_sfBackgroundRenderTarget);

    if(FieldBits::NoField != (SceneRenderTargetFieldMask & whichField))
        _sfSceneRenderTarget.syncWith(pFrom->_sfSceneRenderTarget);

    if(FieldBits::NoField != (LuminanceRenderTargetFieldMask & whichField))
        _sfLuminanceRenderTarget.syncWith(pFrom->_sfLuminanceRenderTarget);

    if(FieldBits::NoField != (AdaptLuminanceRenderTargetFieldMask & whichField))
        _mfAdaptLuminanceRenderTarget.syncWith(pFrom->_mfAdaptLuminanceRenderTarget,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (ThresholdRenderTargetFieldMask & whichField))
        _sfThresholdRenderTarget.syncWith(pFrom->_sfThresholdRenderTarget);

    if(FieldBits::NoField != (BlurHorizRenderTargetFieldMask & whichField))
        _sfBlurHorizRenderTarget.syncWith(pFrom->_sfBlurHorizRenderTarget);

    if(FieldBits::NoField != (BlurVertRenderTargetFieldMask & whichField))
        _sfBlurVertRenderTarget.syncWith(pFrom->_sfBlurVertRenderTarget);

    if(FieldBits::NoField != (ScaleRenderTargetFieldMask & whichField))
        _mfScaleRenderTarget.syncWith(pFrom->_mfScaleRenderTarget,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (CompositeRenderTargetFieldMask & whichField))
        _sfCompositeRenderTarget.syncWith(pFrom->_sfCompositeRenderTarget);

    if(FieldBits::NoField != (HdrShaderDataFieldMask & whichField))
        _sfHdrShaderData.syncWith(pFrom->_sfHdrShaderData);

    if(FieldBits::NoField != (LastTimeFieldMask & whichField))
        _sfLastTime.syncWith(pFrom->_sfLastTime);

    if(FieldBits::NoField != (CurrentTimeFieldMask & whichField))
        _sfCurrentTime.syncWith(pFrom->_sfCurrentTime);

    if(FieldBits::NoField != (ZNearFieldMask & whichField))
        _sfZNear.syncWith(pFrom->_sfZNear);

    if(FieldBits::NoField != (ZFarFieldMask & whichField))
        _sfZFar.syncWith(pFrom->_sfZFar);
}
#endif


inline
const Char8 *HDR2StageDataBase::getClassname(void)
{
    return "HDR2StageData";
}
OSG_GEN_CONTAINERPTR(HDR2StageData);

OSG_END_NAMESPACE

