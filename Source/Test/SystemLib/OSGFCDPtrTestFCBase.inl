/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class FCDPtrTestFC!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE



//! access the type of the class
inline
OSG::FieldContainerType &FCDPtrTestFCBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 FCDPtrTestFCBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 FCDPtrTestFCBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/











#ifdef OSG_MT_CPTR_ASPECT
inline
void FCDPtrTestFCBase::execSync (      FCDPtrTestFCBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (FieldSFPub_ptrFieldMask & whichField))
        _sfFieldSFPub_ptr.syncWith(pFrom->_sfFieldSFPub_ptr);

    if(FieldBits::NoField != (FieldSFPub_weakptrFieldMask & whichField))
        _sfFieldSFPub_weakptr.syncWith(pFrom->_sfFieldSFPub_weakptr);

    if(FieldBits::NoField != (FieldSFPub_mpchildptrFieldMask & whichField))
        _sfFieldSFPub_mpchildptr.syncWith(pFrom->_sfFieldSFPub_mpchildptr);

    if(FieldBits::NoField != (FieldSFPro_ptrFieldMask & whichField))
        _sfFieldSFPro_ptr.syncWith(pFrom->_sfFieldSFPro_ptr);

    if(FieldBits::NoField != (FieldSFPro_weakptrFieldMask & whichField))
        _sfFieldSFPro_weakptr.syncWith(pFrom->_sfFieldSFPro_weakptr);

    if(FieldBits::NoField != (FieldSFPro_mpchildptrFieldMask & whichField))
        _sfFieldSFPro_mpchildptr.syncWith(pFrom->_sfFieldSFPro_mpchildptr);

    if(FieldBits::NoField != (FieldSFNo_ptrFieldMask & whichField))
        _sfFieldSFNo_ptr.syncWith(pFrom->_sfFieldSFNo_ptr);

    if(FieldBits::NoField != (FieldSFNo_weakptrFieldMask & whichField))
        _sfFieldSFNo_weakptr.syncWith(pFrom->_sfFieldSFNo_weakptr);

    if(FieldBits::NoField != (FieldSFNo_mpchildptrFieldMask & whichField))
        _sfFieldSFNo_mpchildptr.syncWith(pFrom->_sfFieldSFNo_mpchildptr);

    if(FieldBits::NoField != (FieldMFPub_ptrFieldMask & whichField))
        _mfFieldMFPub_ptr.syncWith(pFrom->_mfFieldMFPub_ptr,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (FieldMFPub_weakptrFieldMask & whichField))
        _mfFieldMFPub_weakptr.syncWith(pFrom->_mfFieldMFPub_weakptr,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (FieldMFPub_mpchildptrFieldMask & whichField))
        _mfFieldMFPub_mpchildptr.syncWith(pFrom->_mfFieldMFPub_mpchildptr,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (FieldMFPro_ptrFieldMask & whichField))
        _mfFieldMFPro_ptr.syncWith(pFrom->_mfFieldMFPro_ptr,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (FieldMFPro_weakptrFieldMask & whichField))
        _mfFieldMFPro_weakptr.syncWith(pFrom->_mfFieldMFPro_weakptr,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (FieldMFPro_mpchildptrFieldMask & whichField))
        _mfFieldMFPro_mpchildptr.syncWith(pFrom->_mfFieldMFPro_mpchildptr,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (FieldMFNo_ptrFieldMask & whichField))
        _mfFieldMFNo_ptr.syncWith(pFrom->_mfFieldMFNo_ptr,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (FieldMFNo_weakptrFieldMask & whichField))
        _mfFieldMFNo_weakptr.syncWith(pFrom->_mfFieldMFNo_weakptr,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (FieldMFNo_mpchildptrFieldMask & whichField))
        _mfFieldMFNo_mpchildptr.syncWith(pFrom->_mfFieldMFNo_mpchildptr,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (FieldSFPub_spchildptrFieldMask & whichField))
        _sfFieldSFPub_spchildptr.syncWith(pFrom->_sfFieldSFPub_spchildptr);

    if(FieldBits::NoField != (FieldSFPro_spchildptrFieldMask & whichField))
        _sfFieldSFPro_spchildptr.syncWith(pFrom->_sfFieldSFPro_spchildptr);

    if(FieldBits::NoField != (FieldSFNo_spchildptrFieldMask & whichField))
        _sfFieldSFNo_spchildptr.syncWith(pFrom->_sfFieldSFNo_spchildptr);

    if(FieldBits::NoField != (FieldMFPub_spchildptrFieldMask & whichField))
        _mfFieldMFPub_spchildptr.syncWith(pFrom->_mfFieldMFPub_spchildptr,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (FieldMFPro_spchildptrFieldMask & whichField))
        _mfFieldMFPro_spchildptr.syncWith(pFrom->_mfFieldMFPro_spchildptr,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (FieldMFNo_spchildptrFieldMask & whichField))
        _mfFieldMFNo_spchildptr.syncWith(pFrom->_mfFieldMFNo_spchildptr,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);
}
#endif


inline
const Char8 *FCDPtrTestFCBase::getClassname(void)
{
    return "FCDPtrTestFC";
}
OSG_GEN_CONTAINERPTR(FCDPtrTestFC);

OSG_END_NAMESPACE

